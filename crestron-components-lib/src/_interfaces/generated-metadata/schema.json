{
  "htmlElements": {
    "common": {
      "attributes": [
        {
          "documentation": [
            "`data-ch5-show` custom attribute",
            "***",
            "Specifies whether or not an element is visible.",
            "Web application designers need to have the ability to make standard HTML elements, including",
            "container elements like <div> and terminal elements like <h1>, visible or invisible based upon the state",
            "of a signal received from the Blackbird App as a proxy for the Crestron equipment. To this end, the",
            "Crestron Components library will support 'data-ch5-visibility' as a HTML custom attribute to allow",
            "designers to designate the appropriate signal name."
          ],
          "value": [],
          "name": "data-ch5-show"
        },
        {
          "documentation": [
            "`data-ch5-noshow-type` custom attribute",
            "***",
            "'data-ch5-noshow-type' custom attribute is related to HTML custom attribute 'data-ch5-show'",
            "and overrides the way in which a Component is made invisible.",
            "Crestron Components library will default the 'noshow' type based upon the element type"
          ],
          "value": [
            "visibility",
            "display",
            "remove"
          ],
          "name": "data-ch5-noshow-type"
        },
        {
          "documentation": [
            "`data-ch5-appendclass` custom attribute",
            "***",
            "The 'data-ch5-appendclass' custom HTML attribute appends the value of a signal to the 'class' attribute",
            "on a standard HTML element. A change in the value of the signal will remove the prior value of the",
            "signal and append the new value. "
          ],
          "value": [],
          "name": "data-ch5-appendclass"
        },
        {
          "documentation": [
            "`data-ch5-innerhtml` custom attribute",
            "***",
            "The 'data-ch5-innerhtml' custom HTML attribute allows for dynamic HTML content to be applied to",
            "standard HTML elements such as <div>. This is a very powerful construct that when used in a poor",
            "manner can lead to functional and performance issues if used to inject badly formed HTML. The",
            "attribute value is signalScript as described in the ch5.subscribeStateScript utility function description."
          ],
          "value": [],
          "name": "data-ch5-innerhtml"
        },
        {
          "documentation": [
            "`data-ch5-showpulse` custom attribute",
            "***",
            "Specifies whether or not an element is visible.",
            "Web application designers need to have the ability to make standard HTML elements, including",
            "container elements like <div> and terminal elements like <h1>, visible or invisible based upon the state",
            "of a signal received from the Blackbird App as a proxy for the Crestron equipment. To this end, the",
            "Crestron Components library will support 'data-ch5-visibility' as a HTML custom attribute to allow",
            "designers to designate the appropriate signal name."
          ],
          "value": [],
          "name": "data-ch5-showpulse"
        },
        {
          "documentation": [
            "`data-ch5-textcontent` custom attribute",
            "***",
            "The 'data-ch5-textcontent' custom HTML attribute allows for dynamic text content to be applied to",
            "standard HTML elements such as <p> and <h1-6>. The attribute value is signalScript as described in the",
            "ch5.subscribeStateScript utility function description."
          ],
          "value": [],
          "name": "data-ch5-textcontent"
        },
        {
          "documentation": [
            "`data-ch5-appendstyle` custom attribute",
            "***",
            "The 'data-ch5-appendstyle' custom HTML attribute appends the value of a signal to the 'style' attribute ",
            "on a standard HTML element. A change in the value of the signal will remove the prior value of the",
            "signal and append the new value. "
          ],
          "value": [],
          "name": "data-ch5-appendstyle"
        },
        {
          "documentation": [
            "`data-ch5-showpulse` custom attribute",
            "***",
            "Specifies whether or not an element is visible.",
            "Web application designers need to have the ability to make standard HTML elements, including",
            "container elements like <div> and terminal elements like <h1>, visible or invisible based upon the state",
            "of a signal received from the Blackbird App as a proxy for the Crestron equipment. To this end, the",
            "Crestron Components library will support 'data-ch5-visibility' as a HTML custom attribute to allow",
            "designers to designate the appropriate signal name."
          ],
          "value": [],
          "name": "data-ch5-hidepulse"
        },
        {
          "documentation": [
            "`data-ch5-keep-sig-subscription` custom attribute",
            "***",
            "Keeps state subscription key generated by hidepulse, showpulse or show custom attributes"
          ],
          "value": [],
          "name": "data-ch5-keep-sig-subscription"
        },
        {
          "documentation": [
            "`data-ch5-i18n` custom attribute",
            "***",
            "The 'data-ch5-i18n' custom HTML attribute allows for text content translation to be applied to",
            "standard HTML elements."
          ],
          "value": [],
          "name": "data-ch5-i18n"
        }
      ]
    },
    "elements": []
  },
  "ch5Elements": {
    "common": {
      "attributes": []
    },
    "elements": [
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Overrides the appearance of the button with alternative css defined in classes defined with ch5-button--size where size is the value of the property.If no `size` is provided, type of `default` is used."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "Label value"
            ],
            "value": [],
            "name": "label"
          },
          {
            "documentation": [
              "`icon` attribute",
              "***",
              "Icon class"
            ],
            "value": [],
            "name": "iconclass"
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "Default left",
              "Valid values: first, last, top, bottom.",
              "Icon position relative to the label."
            ],
            "value": [
              "first",
              "last",
              "top",
              "bottom"
            ],
            "name": "iconposition"
          },
          {
            "documentation": [
              "`iconurl` attribute",
              "***",
              "Attribute used for add a svg image"
            ],
            "value": [],
            "name": "iconurl"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "Default 'horizontal'. Valid values horizontal, vertical. Lays out",
              "the elements of the control in a horizontal or vertical manner.",
              "For vertical alignment it will apply a css class that will rotate the ",
              "component -90 degrees ( 270 degrees clockwise, 90 degrees counter clockwise )."
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation"
          },
          {
            "documentation": [
              "`shape` attribute",
              "***",
              "Default rounded-rectangle. Valid values: rounded-rectangle,",
              "rectangle, tab, circle, oval. Shape of the button."
            ],
            "value": [
              "rounded-rectangle",
              "rectangle",
              "tab",
              "circle",
              "oval"
            ],
            "name": "shape"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Default both. Valid values: width, height, both",
              "When stretch property is set, the button element inherits the",
              "width or/and height of the container. If stretch by height is used,",
              "the button will be responsive based on the label length, until",
              "reaches the max-width of the container. If stretch width is",
              "applied, there is no responsiveness after reaching the maxwidth,",
              "the text will overflow. Same if stretch both is used. Note",
              "that, if button element shape is 'circle' or 'ova', stretch",
              "property will be ignored."
            ],
            "value": [
              "",
              "both",
              "width",
              "height"
            ],
            "name": "stretch"
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Valid values: default, info, text, danger, warning, success,primary, secondary.",
              "overrides the appearance of the button with alternative css",
              "defined in classes defined with ch5-button--type where type is",
              "the value of the property. If no 'type' is provided, type of",
              "'default' is used. "
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "type"
          },
          {
            "documentation": [
              "`receivestateselected` attribute",
              "***",
              "When receive apply true value apply the selected class ( ch5-button--selected"
            ],
            "value": [],
            "name": "receivestateselected"
          },
          {
            "documentation": [
              "`receivestatelabel` attribute",
              "***",
              "When receive apply the value on the label"
            ],
            "value": [],
            "name": "receivestatelabel"
          },
          {
            "documentation": [
              "`receivestatescriptlabelhtml` attribute",
              "***",
              "Signal script evaluation will be applied to the",
              "button.innerHTML. Allows for multiline, multistyled labels. "
            ],
            "value": [],
            "name": "receivestatescriptlabelhtml"
          },
          {
            "documentation": [
              "`sendeventonclick` attribute",
              "***",
              "Sends event on click or tap event (mouse or finger up and down in a small period of time).",
              "Use this when control system takes action on rising edge from false to true of boolean digital event.",
              "Examples include SIMPL Logic Symbol for Toggle with description of",
              "Digital input <clock> 'High/1 (rising edge) = Toggle; Low/0 = No effect'"
            ],
            "value": [],
            "name": "sendeventonclick"
          },
          {
            "documentation": [
              "`sendeventontouch` attribute",
              "***",
              "Sends boolean true event when finger on glass and boolean false event when finger released",
              "Use this when control system takes action on level sensitive boolean digital event",
              "Examples include SIMPL Logic Symbol for Analog Ramp with description of",
              "Digital input <up> 'High/1 (level sensitive) = Ramp up; Low/0 = Stop ramp'"
            ],
            "value": [],
            "name": "sendeventontouch"
          },
          {
            "documentation": [
              "`receivestateiconclass` attribute",
              "***",
              "The icon class received from Control System"
            ],
            "value": [],
            "name": "receivestateiconclass"
          },
          {
            "documentation": [
              "`onpress` attribute",
              "***",
              "Run when press event is fired"
            ],
            "value": [],
            "name": "onpress"
          },
          {
            "documentation": [
              "`onrelease` attribute",
              "***",
              "Run when release event is fired"
            ],
            "value": [],
            "name": "onrelease"
          },
          {
            "documentation": [
              "`selected` attribute",
              "***",
              "Default false.",
              "this property reflects the state of the component. If set to true",
              "'ch5-button--selected' will be applied as css class on the component"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "selected"
          },
          {
            "documentation": [
              "`customclassselected` attribute",
              "***",
              "Specify custom class for the selected state of the button"
            ],
            "value": [],
            "name": "customclassselected"
          }
        ],
        "documentation": [
          "`ch5-button` element",
          "***",
          "Extension to standard HTML ch5-button element with icons and simple formats."
        ],
        "snippets": [
          {
            "prefix": "ch5-button:blank",
            "description": "Crestron Button",
            "body": [
              "<ch5-button>",
              "</ch5-button>$0"
            ]
          },
          {
            "prefix": "ch5-button:default",
            "description": "Crestron Button",
            "body": [
              "<ch5-button id=\"btn_${1:id}\"",
              "\tlabel=\"${2:Crestron Button}\"",
              "\tsendeventonclick=\"${3:btn_${1}_clicked}\">",
              "</ch5-button>$0"
            ]
          },
          {
            "prefix": "ch5-button:all-attributes",
            "description": "Crestron Button (All Attributes)",
            "body": [
              "<ch5-button id=\"btn_${1:id}\"",
              "\tlabel=\"${2:Crestron Button}\"",
              "\ttype=\"${3|default,primary,info,text,danger,warning,success,secondary|}\"",
              "\tcustomClass=\"${4:customClass}\"",
              "\tshape=\"${5|rounded-rectangle,rectangle,tab,circle,oval|}\"",
              "\tsize=\"${6|regular,x-small,small,large,x-large|}\"",
              "\tstretch=\"${7|both,width,height|}\"",
              "\ticonposition=\"${8|first,last,top,bottom|}\"",
              "\ticonclass=\"${9:iconClass}\"",
              "\torientation=\"${10|horizontal,vertical|}\"",
              "\tsendeventonclick=\"${11:btn_${1}_clicked}\"",
              "\tsendeventontouch=\"${12:btn_${1}_touched}\"",
              "\treceivestateselected=\"${13}\"",
              "\treceivestatelabel=\"${14}\"",
              "\treceivestatescriptlabelhtml=\"${15}\">",
              "</ch5-button>$0"
            ]
          }
        ],
        "description": "Ch5 Button offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Button",
        "tagName": "ch5-button"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [],
            "value": [],
            "name": "submitbuttonlabel"
          },
          {
            "documentation": [],
            "value": [],
            "name": "submitbuttonicon"
          },
          {
            "documentation": [],
            "value": [],
            "name": "submitbuttonstyle"
          },
          {
            "documentation": [
              "`submitbuttontype` attribute",
              "***",
              "Represents the type of the auto-generated 'Submit' button"
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "submitbuttontype"
          },
          {
            "documentation": [],
            "value": [],
            "name": "cancelbuttonlabel"
          },
          {
            "documentation": [],
            "value": [],
            "name": "cancelbuttonicon"
          },
          {
            "documentation": [],
            "value": [],
            "name": "cancelbuttonstyle"
          },
          {
            "documentation": [
              "`cancelButtonType` attribute",
              "***",
              "Represents the type of the auto-generated 'Cancel' button"
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "cancelbuttontype"
          },
          {
            "documentation": [],
            "value": [],
            "name": "submitid"
          },
          {
            "documentation": [],
            "value": [],
            "name": "cancelid"
          },
          {
            "documentation": [
              "`hidesubmitbutton` attribute",
              "***",
              "If true the submit button is not shown"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hidesubmitbutton"
          },
          {
            "documentation": [
              "`hidecancelbutton` attribute",
              "***",
              "If true the cancel button is not shown"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hidecancelbutton"
          }
        ],
        "documentation": [
          "`ch5-form` element",
          "***",
          " This component provides a container for which 'input' like components, such as TextEntry,",
          "Slider, Toggle Switch, Select and Spinner can be grouped together to update their send signals upon a",
          "'submit' button press or revert to their receive signal value upon a 'cancel' button press. "
        ],
        "snippets": [
          {
            "prefix": "ch5-form:blank",
            "description": "Crestron Form (blank)",
            "body": [
              "<ch5-form>",
              "</ch5-form>$0"
            ]
          },
          {
            "prefix": "ch5-form:default",
            "description": "Crestron Form (default)",
            "body": [
              "<ch5-form>",
              "    <h2>Room X</h2>",
              "    ",
              "    <h5>Do not disturb</h5>",
              "    <ch5-toggle",
              "        labelon=\"On\"",
              "        labeloff=\"Off\"",
              "        feedbackmode=\"submit\"",
              "        receivestatevalue=\"room_donotdisturb_selected\"",
              "        sendeventonclick=\"room_donotdisturb_clicked\">",
              "    </ch5-toggle>",
              "",
              "",
              "    <h5>Temperature</h5>",
              "    <ch5-slider",
              "        feedbackmode=\"submit\"",
              "        receivestatevalue=\"room_thermostat_set_fb\"",
              "        sendeventonchange=\"room_thermostat_set\"",
              "        step=\"10\"",
              "        min=\"0\"",
              "        max=\"100\">",
              "    </ch5-slider>",
              "",
              "    ",
              "    <ch5-select size=\"4\" indexid=\"idx\" mode=\"panel\"",
              "                 feedbackmode=\"submit\"",
              "                 sendeventonchange=\"select_send_change_signal\"",
              "                 receivestatevalue=\"select_receive_signal_value\"",
              "                 noneselectedprompt=\"Select\">",
              "         <template>",
              "            <ch5-select-option>",
              "                <span>Option {{idx}}</span>",
              "            </ch5-select-option>",
              "         </template>",
              "    </ch5-select>",
              "</ch5-form>"
            ]
          },
          {
            "prefix": "ch5-form:custom-buttons",
            "description": "Crestron Form with custom submit and cancel buttons inside",
            "body": [
              "<ch5-form>",
              "    <h2>Room X</h2>",
              "    ",
              "    <h5>Do not disturb</h5>",
              "    <ch5-toggle",
              "        labelon=\"On\"",
              "        labeloff=\"Off\"",
              "        feedbackmode=\"submit\"",
              "        receivestatevalue=\"room_donotdisturb_selected\"",
              "        sendeventonclick=\"room_donotdisturb_clicked\">",
              "    </ch5-toggle>",
              "",
              "",
              "    <h5>Temperature</h5>",
              "    <ch5-slider",
              "        feedbackmode=\"submit\"",
              "        receivestatevalue=\"room_thermostat_set_fb\"",
              "        sendeventonchange=\"room_thermostat_set\"",
              "        step=\"10\"",
              "        min=\"0\"",
              "        max=\"100\">",
              "    </ch5-slider>",
              "",
              "    ",
              "    <ch5-select size=\"4\" indexId=\"idx\" mode=\"panel\"",
              "                 feedbackmode=\"submit\"",
              "                 sendeventonchange=\"select_send_change_signal\"",
              "                 receivestatevalue=\"select_receive_signal_value\"",
              "                 noneselectedprompt=\"Select\">",
              "         <template>",
              "            <ch5-select-option>",
              "                <span>Option {{idx}}</span>",
              "            </ch5-select-option>",
              "         </template>",
              "    </ch5-select>",
              "",
              "    <ch5-button id=\"room_submit_id\" formtype=\"submit\" label=\"Update Room\"></ch5-button>",
              "    <ch5-button id=\"room_cancel_id\" formtype=\"cancel\" label=\"Revert Changes\"></ch5-button>",
              "</ch5-form>"
            ]
          }
        ],
        "description": "Ch5 Form offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Form",
        "tagName": "ch5-form"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`alt` attribute",
              "***",
              "Defines an alternative text description of the image"
            ],
            "value": [],
            "name": "alt"
          },
          {
            "documentation": [
              "`height` attribute",
              "The intrinsic height of the image, in pixels. Must be a string of the form Npx or N%"
            ],
            "value": [],
            "name": "height"
          },
          {
            "documentation": [
              "`width` attribute",
              "The intrinsic width of the image, in pixels. Must be a string of the form Npx or N%"
            ],
            "value": [],
            "name": "width"
          },
          {
            "documentation": [
              "`refreshrate` attribute",
              "***",
              "Number of seconds between each refresh of the URL. If 0, the URL will not",
              "be refresh."
            ],
            "value": [],
            "name": "refreshrate"
          },
          {
            "documentation": [
              "`url` attribute",
              "***",
              "Must be a supported image format, including JPEG, GIF, PNG, SVG, and BMP"
            ],
            "value": [],
            "name": "url"
          },
          {
            "documentation": [
              "`password` attribute",
              "***",
              "Password for authentication in order to get the image"
            ],
            "value": [],
            "name": "password"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "Image direction"
            ],
            "value": [],
            "name": "dir"
          },
          {
            "documentation": [
              "`user` attribute",
              "***",
              "User for authentication in order to get the image"
            ],
            "value": [],
            "name": "user"
          },
          {
            "documentation": [
              "`receivestateurl` attribute",
              "***",
              "Image URL passed via state"
            ],
            "value": [],
            "name": "receivestateurl"
          },
          {
            "documentation": [
              "`sendeventontouch` attribute",
              "***",
              "Sends boolean true event when finger on glass and boolean false event when finger released",
              "Use this when control system takes action on level sensitive boolean digital event",
              "Examples include SIMPL Logic Symbol for Analog Ramp with description of",
              "Digital input <up> 'High/1 (level sensitive) = Ramp up; Low/0 = Stop ramp'"
            ],
            "value": [],
            "name": "sendeventontouch"
          },
          {
            "documentation": [
              "`sendeventonclick` attribute",
              "***",
              "Sends event on click or tap event (mouse or finger up and down in a small period of time).",
              "Use this when control system takes action on rising edge from false to true of boolean digital event.",
              "Examples include SIMPL Logic Symbol for Toggle with description of",
              "Digital input <clock> 'High/1 (rising edge) = Toggle; Low/0 = No effect'"
            ],
            "value": [],
            "name": "sendeventonclick"
          },
          {
            "documentation": [
              "`sendeventonerror` attribute",
              "***",
              "Sends event on error"
            ],
            "value": [],
            "name": "sendeventonerror"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`onpress` attribute",
              "***",
              "Run when press event is fired"
            ],
            "value": [],
            "name": "onpress"
          },
          {
            "documentation": [
              "`onrelease` attribute",
              "***",
              "Run when release event is fired"
            ],
            "value": [],
            "name": "onrelease"
          }
        ],
        "documentation": [
          "`ch5-image` element",
          "***",
          "Component to load images. Even with this component, user can use the standard HTML",
          "<img>tag. This component primarily allows for images to be loaded from a security camera on a polled basis. ",
          "The implementation of the Image Component in the needs to coordinate request of images to be shared",
          "between different image components and video components that may be requesting the same image URL. "
        ],
        "snippets": [
          {
            "prefix": "ch5-image:blank",
            "description": "Crestron Image (Blank)",
            "body": [
              "<ch5-image>",
              "</ch5-image>$0"
            ]
          },
          {
            "prefix": "ch5-image:default",
            "description": "Crestron Image (Default)",
            "body": [
              "<ch5-image alt=\"${1:Outside driveway image}\"",
              "\theight=\"${2:900px}\"",
              "\twidth=\"${3:1600px}\"",
              "\trefreshrate=\"${4:2}\"",
              "\turl=\"${5:http://someServer/image.png}\">",
              "</ch5-image>$0"
            ]
          },
          {
            "prefix": "ch5-image:receive-signal",
            "description": "Crestron Image (Receive Signal)",
            "body": [
              "<ch5-image alt=\"${1:Backyard image}\"",
              "\theight=\"${2:450px}\"",
              "\twidth=\"${3:800px}\"",
              "\trefreshrate=\"${4:1}\"",
              "\treceivestateurl=\"${5:url_for_image_signal}\">",
              "</ch5-image>$0"
            ]
          }
        ],
        "description": "Ch5 Image offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Image",
        "tagName": "ch5-image"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "The number of items in a list. Max value is 1000"
            ],
            "value": [],
            "name": "size"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "Default vertical. Values are vertical or horizontal",
              "Lays out the elements of the control in a horizontal or vertical manner.",
              "This is done with CSS overflow property. The overflow property specifies",
              "what happens if content overflows an element's box."
            ],
            "value": [
              "vertical",
              "horizontal"
            ],
            "name": "orientation"
          },
          {
            "documentation": [
              "`bufferammount` attribute",
              "***",
              "The number of elements to be rendered outside of the current container's",
              "viewport ( visible area )."
            ],
            "value": [],
            "name": "bufferamount"
          },
          {
            "documentation": [
              "`itemheight` attribute",
              "***",
              "Height of an item. The value of the height can be in px and vh.",
              "We need the item height for vertical infinite list. If this will not be provided",
              "we will calculate base on the first item height.",
              "Each item of list needs to have the same height."
            ],
            "value": [],
            "name": "itemheight"
          },
          {
            "documentation": [
              "`itemwidth` attribute",
              "***",
              "Recommendation: use the same unit type for all width/height attributes",
              "Width of an item. The value of the height can be in px and vh.",
              "We need the item horizontal for vertical infinite list. If this will not be",
              "provided, we will calculate base on the first item width.",
              "Each item on the list needs to have the same width"
            ],
            "value": [],
            "name": "itemwidth"
          },
          {
            "documentation": [
              "`minWidth` attribute",
              "***",
              "Recommendation: use the same unit type for all width/height attributes",
              "Min width of the list container"
            ],
            "value": [],
            "name": "minwidth"
          },
          {
            "documentation": [
              "`minWidth` attribute",
              "***",
              "Recommendation: use the same unit type for all width/height attributes",
              "Max width of the list container"
            ],
            "value": [],
            "name": "maxwidth"
          },
          {
            "documentation": [
              "`minHeight` attribute",
              "***",
              "Recommendation: use the same unit type for all width/height attributes",
              "Min height of the list container"
            ],
            "value": [],
            "name": "minheight"
          },
          {
            "documentation": [
              "`maxHeight` attribute",
              "***",
              "Recommendation: use the same unit type for all width/height attributes",
              "Max height of the list container"
            ],
            "value": [],
            "name": "maxheight"
          },
          {
            "documentation": [
              "`scrollToTime` attribute",
              "***",
              "500ms default. How long to animate changing list location to scrollTo",
              "signal value"
            ],
            "value": [],
            "name": "scrolltotime"
          },
          {
            "documentation": [
              "`indexid` attribute",
              "***",
              "The pattern that will be replaced with the id from the list items iteration.",
              "Example: {{ idx }}"
            ],
            "value": [],
            "name": "indexid"
          },
          {
            "documentation": [
              "`receivestatesize` attribute",
              "***",
              "Represents the size of the list received from Native"
            ],
            "value": [],
            "name": "receivestatesize"
          },
          {
            "documentation": [
              "`receivestatescrollto` attribute",
              "***",
              "Represents the scroll position of the list received from Native",
              "Example: value 10 of receivestatescrollto will scroll the list",
              "to the 10th element"
            ],
            "value": [],
            "name": "receivestatescrollto"
          },
          {
            "documentation": [
              "`receivestatetemplatevars` attribute",
              "***",
              "Represents the template variables that are received from native"
            ],
            "value": [],
            "name": "receivestatetemplatevars"
          },
          {
            "documentation": [
              "`gestureable` attribute",
              "***",
              "Default false. When set to true the gesturing will be supported.",
              "Adding this will change the behavior inside of the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "gestureable"
          },
          {
            "documentation": [
              "`scrollbar` attribute",
              "***",
              "Default false. If true show a scrollbar for the list"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "scrollbar"
          },
          {
            "documentation": [
              "`pageswipe` attribute",
              "***",
              "Default false. If false, swipe gesture moves the list with momentum as",
              "expected on 'throwable' lists. If true, a swipe gesture will move the list only",
              "the number of visible items at a time, snapping the first visible item to top",
              "for vertical list or on left for dir='ltr' attribute lists."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "pagedswipe"
          },
          {
            "documentation": [
              "`endless` attribute",
              "***",
              "Default false. If false, continued swiping when reach end of list will reveal",
              "no entries beyond the last entry. If true, or just added without a value, ",
              "the first entry of the list will",
              "virtually follow the last entry of list when reaching the end of the entries.",
              "Swiping towards the beginning of list entries will also review the last entry",
              "prior to the first entry. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "endless"
          }
        ],
        "documentation": [
          "`ch5-list` element",
          "***",
          " Use to display repetitive items."
        ],
        "snippets": [
          {
            "prefix": "ch5-list:all",
            "description": "Crestron List (All Attributes)",
            "body": [
              "<ch5-list indexid=\"${1:idx}\"",
              "\tsize=\"${2:5}\"",
              "\torientation=\"${3:horizontal}\"",
              "\tbufferamount=\"${4:5}\"",
              "\titemheight=\"${5:75px}\"",
              "\titemwidth=\"${6:125px}\"",
              "\tminwidth=\"${7:250px}\"",
              "\tmaxwidth=\"${8:500px}\"",
              "\tminheight=\"${9:100px}\"",
              "\tmaxheight=\"${10:150px}\"",
              "\tpagedswipe=\"${11:false}\"",
              "\tendless=\"${12:false}\"",
              "\tscrollbar=\"${13:true}\"",
              "\tscrolltotime=\"${14}\"",
              "\treceivestatesize=\"${15}\"",
              "\treceivestatescrollto=\"${16}\"",
              "\treceivestatetemplatevars=\"${17}\">",
              "</ch5-list>$0"
            ]
          },
          {
            "prefix": "ch5-list",
            "description": "Crestron List",
            "body": [
              "<ch5-list size=\"${1:10}\" orientation=\"${2|vertical,horizontal|}\">",
              "\t<template>",
              "\t\t<ch5-button id=\"btn_${3:id}\"",
              "\t\t\tlabel=\"${4:Crestron Button}\"",
              "\t\t\tsendeventonclick=\"${5:btn_${3}_clicked}\">",
              "\t\t</ch5-button>",
              "\t</template>",
              "</ch5-list>$0"
            ]
          },
          {
            "prefix": "ch5-list-",
            "description": "Crestron List Extended",
            "body": [
              "<ch5-list size=\"${1:10}\" orientation=\"${2|vertical,horizontal|}\" minwidth=\"${3:900px}\" maxwidth=\"${4:1115px}\"",
              "\t minheight=\"${5:600px}\" maxheight=\"${6:700px}\" indexid=\"${7:idx}\" itemwidth=\"${8:150px}\">",
              "\t<template>",
              "\t\t<ch5-button stretch=\"${9|both,width,height|}\" label=\"${10:mute}\"",
              "\t\t\treceivestateselected=\"levels_mute_selected_${7}\">",
              "\t\t</ch5-button>",
              "\t</template>",
              "</ch5-list>$0"
            ]
          }
        ],
        "description": "Ch5 List offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 List",
        "tagName": "ch5-list"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`closeicon` attribute",
              "***",
              "A class name of the close icon, it may be a font awesome class"
            ],
            "value": [],
            "name": "closeicon"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Valid values are 'width', 'height', and 'both'. The component will stretch to",
              "the available width or the available height in the parent component. Using",
              "'both' it will stretch both ways."
            ],
            "value": [
              "",
              "both",
              "width",
              "height"
            ],
            "name": "stretch"
          },
          {
            "documentation": [
              "`overflow` attribute",
              "***",
              "Valid values are 'scroll' and 'show'. The overflow property specifies what",
              "happens if content overflows the component box or not.",
              "This is related with stretch property. This property specifies whether to add",
              "scrollbars when an element's content is too big to fit in a specified area.",
              "If 'show' is selected the overflow is not clipped."
            ],
            "value": [
              "scroll",
              "show"
            ],
            "name": "overflow"
          },
          {
            "documentation": [
              "`positionto` attribute",
              "***",
              "If not set, will be related to the viewport.",
              "Position the component related to one of window or an element by id."
            ],
            "value": [],
            "name": "positionto"
          },
          {
            "documentation": [
              "`positionoffset` attribute",
              "***",
              "Valid values 'top-left', 'top-center', 'top-right', 'bottom-left', 'bottom-center',",
              "'bottom-right', 'left-center', and 'right-center'. Auto-position the panel offset",
              "to the event element's position."
            ],
            "value": [
              "top-left",
              "top-center",
              "top-right",
              "bottom-left",
              "bottom-center",
              "bottom-right",
              "left-center",
              "right-center"
            ],
            "name": "positionoffset"
          },
          {
            "documentation": [
              "`receivestatepositionto` attribute ",
              "***",
              "When receive position to of this component"
            ],
            "value": [],
            "name": "receivestatepositionto "
          },
          {
            "documentation": [
              "`receivestatepositionoffset` attribute",
              "***",
              "when receive position offset of this component.",
              "See attribute 'positionOffset' for valid values"
            ],
            "value": [],
            "name": "receivestatepositionoffset"
          },
          {
            "documentation": [
              "`sendeventonbeforeshow` attribute",
              "***",
              "Send signal on overlay panel before show"
            ],
            "value": [],
            "name": "sendeventonbeforeshow"
          },
          {
            "documentation": [
              "`sendeventonaftershow` attribute",
              "***",
              "Send signal on overlay panel after show"
            ],
            "value": [],
            "name": "sendeventonaftershow"
          },
          {
            "documentation": [
              "`sendisignalonbeforehide` attribute",
              "***",
              "Send signal on overlay panel before hide"
            ],
            "value": [],
            "name": "sendeventonbeforehide"
          },
          {
            "documentation": [
              "`sendisgnalonafterhide` attribute",
              "***",
              "Send signal on overlay panel after hide"
            ],
            "value": [],
            "name": "sendeventonafterhide"
          },
          {
            "documentation": [
              "`dismissable` attribute",
              "***",
              "Default 'true'. If false, the panel won't automatically hide if a touch event occurs outside of it"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "dismissable"
          },
          {
            "documentation": [
              "`closable` attribute",
              "***",
              "Default 'false'. If true, show a close icon on the corner of the panel, else",
              "don't show the close icon"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "closable"
          },
          {
            "documentation": [
              "`mask` attribute",
              "***",
              "Specifies whether to apply a background mask"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "mask"
          }
        ],
        "documentation": [
          "`ch5-overlay-panel` element",
          "***",
          "The overlay panel component provides a content container for other components that",
          "'pops up' on top of and overlays the main content container."
        ],
        "snippets": [
          {
            "prefix": "ch5-overlay-panel:blank",
            "description": "Crestron Overlay Panel (Blank)",
            "body": [
              "<ch5-overlay-panel>",
              "</ch5-overlay-panel>$0"
            ]
          },
          {
            "prefix": "ch5-overlay-panel:default",
            "description": "Crestron Overlay Panel (Default)",
            "body": [
              "<ch5-overlay-panel receivestateshowpulse=\"${1:trigger_1}\" closable>",
              "    <p>Sample text</p>",
              "    <ch5-image id=\"${2:ex1-img}\" url=\"${3:some_server_url}\">",
              "    </ch5-image>",
              "</ch5-overlay-panel>$0"
            ]
          },
          {
            "prefix": "ch5-overlay-panel:signals",
            "description": "Crestron Overlay Panel Signals",
            "body": [
              "<ch5-overlay-panel",
              "    receivestateshowpulse=\"${1:trigger_1}\"",
              "    closable",
              "    sendeventonshow=\"${1:signal_on_show}\"",
              "    sendeventonbeforeshow=\"${2:signal_on_before_show}\"",
              "    sendeventonaftershow=\"${3:signal_on_after_show}\"",
              "    sendeventonbeforehide=\"${4:signal_on_before_hide}\"",
              "    sendeventonafterhide=\"${5:signal_on_after_hide}\"",
              "    >",
              "    <p>Sample text</p>",
              "    <ch5-image id=\"${8:ex1-img}\" url=\"${9:some_server_url}\">",
              "    </ch5-image>",
              "</ch5-overlay-panel>$0"
            ]
          }
        ],
        "description": "Ch5 Overlay Panel ",
        "name": "Ch5 Overlay Panel ",
        "tagName": "ch5-overlay-panel"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`closeicon` attribute",
              "***",
              "A class name of the close icon, it may be a font awesome class"
            ],
            "value": [],
            "name": "closeicon"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Valid values are 'width', 'height', and 'both'. The component will stretch to",
              "the available width or the available height in the parent component. Using",
              "'both' it will stretch both ways."
            ],
            "value": [
              "",
              "both",
              "width",
              "height"
            ],
            "name": "stretch"
          },
          {
            "documentation": [
              "`overflow` attribute",
              "***",
              "Valid values are 'scroll' and 'show'. The overflow property specifies what",
              "happens if content overflows the component box or not.",
              "This is related with stretch property. This property specifies whether to add",
              "scrollbars when an element's content is too big to fit in a specified area.",
              "If 'show' is selected the overflow is not clipped."
            ],
            "value": [
              "scroll",
              "show"
            ],
            "name": "overflow"
          },
          {
            "documentation": [
              "`width` attribute",
              "***",
              "The width of the modal dialog, in pixels. Must be a string of the form Npx"
            ],
            "value": [],
            "name": "width"
          },
          {
            "documentation": [
              "`height` attribute",
              "***",
              "The height of the modal dialog, in pixels. Must be a string of the form Npx"
            ],
            "value": [],
            "name": "height"
          },
          {
            "documentation": [
              "`title` attribute",
              "***",
              "The title of the modal dialog. Must be a string"
            ],
            "value": [],
            "name": "title"
          },
          {
            "documentation": [
              "`maskstyle` attribute",
              "***",
              "Header title text. If absent or empty, hide the title bar"
            ],
            "value": [],
            "name": "maskstyle"
          },
          {
            "documentation": [
              "`okbuttonlabel` attribute",
              "Ok button text. If absent or empty the default translated 'OK' text will show."
            ],
            "value": [],
            "name": "okbuttonlabel"
          },
          {
            "documentation": [
              "`okbuttonicon` attribute",
              "***",
              "Ok button icon. If absent or empty, hide the icon"
            ],
            "value": [],
            "name": "okbuttonicon"
          },
          {
            "documentation": [
              "`okbuttonstyle` attribute",
              "***",
              "Inline style value for the ok button to override theme."
            ],
            "value": [],
            "name": "okbuttonstyle"
          },
          {
            "documentation": [
              "`cancelbuttonlabel` attribute",
              "***",
              "Cancel button text. If absent or empty the default translated 'Cancel' text",
              "will show"
            ],
            "value": [],
            "name": "cancelbuttonlabel"
          },
          {
            "documentation": [
              "`cancelbuttonicon` attribute",
              "***",
              "Cancel button icon. If absent or empty, hide the icon"
            ],
            "value": [],
            "name": "cancelbuttonicon"
          },
          {
            "documentation": [
              "`cancelbuttonstyle` attribute",
              "***",
              "Inline style value for the cancel button to override theme."
            ],
            "value": [],
            "name": "cancelbuttonstyle"
          },
          {
            "documentation": [
              "`prompt` attribute",
              "***",
              "Optional Text of message."
            ],
            "value": [],
            "name": "prompt"
          },
          {
            "documentation": [
              "`prompticon` attribute",
              "***",
              "Icon that appears next to prompt text"
            ],
            "value": [],
            "name": "prompticon"
          },
          {
            "documentation": [
              "`sendeventonbeforeshow` attribute",
              "***",
              "The name of the boolean signal that will be sent to native just before the panel is shown."
            ],
            "value": [],
            "name": "sendeventonbeforeshow"
          },
          {
            "documentation": [
              "`sendeventonaftershow` attribute",
              "***",
              "The name of the boolean signal that will be sent to native after the panel is shown."
            ],
            "value": [],
            "name": "sendeventonaftershow"
          },
          {
            "documentation": [
              "`sendeventonbeforehide` attribute",
              "***",
              "The name of the boolean signal that will be sent to native before the panel is hidden."
            ],
            "value": [],
            "name": "sendeventonbeforehide"
          },
          {
            "documentation": [
              "`sendeventonafterhide` attribute",
              "***",
              "The name of the boolean signal that will be sent to native after the panel is hidden."
            ],
            "value": [],
            "name": "sendeventonafterhide"
          },
          {
            "documentation": [
              "`sendeventonok` attribute",
              "***",
              "The name of the boolean signal that will be sent when the Ok button is pressed"
            ],
            "value": [],
            "name": "sendeventonok"
          },
          {
            "documentation": [
              "`sendeventoncancel` attribute",
              "***",
              "The name of the boolean signal that will be sent when the Cancel button is pressed"
            ],
            "value": [],
            "name": "sendeventoncancel"
          },
          {
            "documentation": [
              "`dismissable` attribute",
              "***",
              "Default 'true'. If false, the panel won't automatically hide if a touch event occurs outside of it"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "dismissable"
          },
          {
            "documentation": [
              "`closable` attribute",
              "***",
              "Default 'false'. If true, show a close icon on the corner of the panel, else",
              "don't show the close icon"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "closable"
          },
          {
            "documentation": [
              "`mask` attribute",
              "***",
              "Specifies whether to apply a background mask"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "mask"
          },
          {
            "documentation": [
              "`hideokbutton` attribute",
              "***",
              "Default false. If true hide the button."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hideokbutton"
          },
          {
            "documentation": [
              "`hidecancelbutton` attribute",
              "***",
              "Default false. If true hide the button."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hidecancelbutton"
          }
        ],
        "documentation": [
          "`ch5-modal-dialog` element",
          "***",
          "The Modal Dialog component is a special-case instance of an overlay panel used primarily",
          "to display dialog windows and user prompts.",
          "The modal dialog should generally contains an optional header bar with a title",
          "an optional message with an optional icon, and optional button 'ok' and 'cancel' buttons. "
        ],
        "snippets": [
          {
            "prefix": "ch5-modal-dialog:blank",
            "description": "Crestron Modal Dialog (Blank)",
            "body": [
              "<ch5-modal-dialog>",
              "</ch5-modal-dialog>$0"
            ]
          },
          {
            "prefix": "ch5-modal-dialog:default",
            "description": "Crestron Modal Dialog (Default)",
            "body": [
              "<ch5-modal-dialog receivestateshowpulse=\"${1:trigger_1}\" closable>",
              "    <p>Sample text</p>",
              "    <ch5-image id=\"${2:ex1-img}\" url=\"${3:some_server_url}\">",
              "    </ch5-image>",
              "</ch5-modal-dialog>$0"
            ]
          },
          {
            "prefix": "ch5-modal-dialog:signals",
            "description": "Crestron Modal Dialog Signals",
            "body": [
              "<ch5-modal-dialog",
              "    receivestateshowpulse=\"${1:trigger_1}\"",
              "    closable",
              "    sendeventonshow=\"${1:signal_on_show}\"",
              "    sendeventonbeforeshow=\"${2:signal_on_before_show}\"",
              "    sendeventonaftershow=\"${3:signal_on_after_show}\"",
              "    sendeventonbeforehide=\"${4:signal_on_before_hide}\"",
              "    sendeventonafterhide=\"${5:signal_on_after_hide}\"",
              "    sendeventonok=\"${6:signal_on_ok}\"",
              "    sendSignaloncancel=\"${7:signal_on_cancel}\"",
              "    >",
              "    <p>Sample text</p>",
              "    <ch5-image id=\"${8:ex1-img}\" url=\"${9:some_server_url}\">",
              "    </ch5-image>",
              "</ch5-modal-dialog>$0"
            ]
          }
        ],
        "description": "Ch5 Modal",
        "name": "Ch5 Modal Dialog",
        "tagName": "ch5-modal-dialog"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Initial number of entries in selection. Default to 1, Range 1-30"
            ],
            "value": [],
            "name": "size"
          },
          {
            "documentation": [
              "`iconPosition` attribute",
              "***",
              "Valid values are 'first' and 'last'. Default is 'first'.",
              "This attribute only applies when a template is not provided",
              "and the implied template is in use. If template is provided,",
              "this property is ignored."
            ],
            "value": [
              "first",
              "last"
            ],
            "name": "iconposition"
          },
          {
            "documentation": [
              "`selectedvalud` attribute",
              "***",
              "Default of false, true if multiple selections can be selected.",
              "If true, the value of the select will be an array of values"
            ],
            "value": [],
            "name": "selectedvalue"
          },
          {
            "documentation": [
              "`scrollheight` attribute",
              "***",
              "height of the panel containing the list of options"
            ],
            "value": [],
            "name": "panelscrollheight"
          },
          {
            "documentation": [
              "`minwidth` attribute",
              "***",
              "Min width of the select container"
            ],
            "value": [],
            "name": "minwidth"
          },
          {
            "documentation": [
              "`maxwidth` attribute",
              "***",
              "Max width of the select container"
            ],
            "value": [],
            "name": "maxwidth"
          },
          {
            "documentation": [
              "`minheight` attribute",
              "***",
              "Min height of the select container"
            ],
            "value": [],
            "name": "minheight"
          },
          {
            "documentation": [
              "`maxheight` attribute",
              "***",
              "Max height of the select container"
            ],
            "value": [],
            "name": "maxheight"
          },
          {
            "documentation": [
              "`mode` attribute",
              "***",
              "Two choices below. Default is 'plain'",
              "plain - select menu opens and closes as clicked by user",
              "panel – select menu stays open even when not in focus"
            ],
            "value": [
              "plain",
              "panel"
            ],
            "name": "mode"
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "Allow the form submission functionality. direct, submit"
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode"
          },
          {
            "documentation": [
              "`signalvaluesynctimeout` attribute",
              "***",
              "Default 1500. Defines the time between the user release the",
              "handle of the toggle and the time the toggle will check if the",
              "value is equal with the value from the signal. If not it will",
              "automatically apply the value from the signal. Apply only for feedbackMode direct"
            ],
            "value": [],
            "name": "signalvaluesynctimeout"
          },
          {
            "documentation": [
              "`indexid` attribute",
              "***",
              "Provides the name of the offset identifier to substituted with",
              "1 based index of the item in list within the template item",
              "surrounded by {{ }} delimiters."
            ],
            "value": [],
            "name": "indexid"
          },
          {
            "documentation": [
              "`noneselectedprompt` attribute",
              "***",
              "Showed when none of the items is selected"
            ],
            "value": [],
            "name": "noneselectedprompt"
          },
          {
            "documentation": [
              "`receivestatevalue` attribute",
              "***",
              "When receive change the selected value of this selector. this is only applicable for",
              "multiselect=false. 1 based index is expected.",
              "Value 0 indicates all are be unselected"
            ],
            "value": [],
            "name": "receivestatevalue"
          },
          {
            "documentation": [
              "`receivestatesize` attribute",
              "***",
              "Sets the number of items in this component"
            ],
            "value": [],
            "name": "receivestatesize"
          },
          {
            "documentation": [
              "`receivestatetemplatevars` attribute",
              "***",
              "Json encoded array of name/value objects, one per item created from the template."
            ],
            "value": [],
            "name": "receivestatetemplatevars"
          },
          {
            "documentation": [
              "`snedsignalonfocus` attribute",
              "***",
              "send signal on focus event. True in focus. False not in focus"
            ],
            "value": [],
            "name": "sendeventonfocus"
          },
          {
            "documentation": [
              "`sendeventonchange` attribute",
              "***",
              "send signal value on selected change. this is only applicable for multiselect=false.",
              "1 based index is expected. Value 0 indicates all are be unselected"
            ],
            "value": [],
            "name": "sendeventonchange"
          },
          {
            "documentation": [
              "`onclean` attribute",
              "***",
              "Run when clean event is fired"
            ],
            "value": [],
            "name": "onclean"
          },
          {
            "documentation": [
              "`ondirty` attribute",
              "***",
              "Run when dirty event is fired"
            ],
            "value": [],
            "name": "ondirty"
          },
          {
            "documentation": [
              "`multiselect` attribute",
              "***",
              "Default of false, true if multiple selections can be selected.",
              "If true, the value of the select will be an array of values"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "multiselect"
          },
          {
            "documentation": [
              "`resize` attribute",
              "***",
              "If true, then resize the options panel to fit content width.",
              "The maximum width and height cannot be bigger then parent HTML element"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "resize"
          }
        ],
        "documentation": [
          "`ch5-select` element",
          "***",
          "The select component enables the user to select one or more choices from a list of options.",
          "The select component will NOT be a wrapper around the HTML input type select, because we need to",
          "cover other options that are not available on HTML input type select."
        ],
        "snippets": [
          {
            "prefix": "ch5-select:blank",
            "description": "Crestron Select (Blank)",
            "body": [
              "<ch5-select>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:all",
            "description": "Crestron Select (All Attributes)",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\ticonposition=\"${2|first,last|}\"",
              "\tmultiselect=\"${3}\"",
              "\tselectedvalue=\"${4}\"",
              "\tnoneselectedprompt=\"${5}\"",
              "\tpanelscrollheight=\"${6}\"",
              "\tminwidth=\"${7}\"",
              "\tmaxwidth=\"${8}\"",
              "\tminheight=\"${9}\"",
              "\tmaxheight=\"${8}\"",
              "\tresize=\"${9}\"",
              "\tmode=\"${10|plain,panel|}\"",
              "\tfeedbackmode=\"${11|direct,submit|}\"",
              "\tsignalvaluesynctimeout=\"${12|1500|}\"",
              "\tindexid=\"${13|idx|}\"",
              "\treceivestatevalue=\"${14}\"",
              "\treceivestatesize=\"${15}\"",
              "\treceivestatetemplatevars=\"${16}\"",
              "\tsendeventonfocus=\"${17}\"",
              "\tsendeventonchange=\"${18}\">",
              "\t<template>",
              "\t\t<ch5-select-option receivestateselected=\"${19}\"",
              "\t\t\treceivestatelabel=\"${20}\"",
              "\t\t\treceivestateurl=\"${21}\"",
              "\t\t\treceivestatescriptlabelhtml=\"${22}\"",
              "\t\t\tsendeventonclick=\"${23}\">",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:single-selection",
            "description": "Crestron Select (single selection using receiveStateValue and sendEventOnChange",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\tselectedvalue=\"${2}\"",
              "\tnoneselectedprompt=\"${3}\"",
              "\tpanelscrollheight=\"${4}\"",
              "\tminwidth=\"${5}\"",
              "\tmaxwidth=\"${6}\"",
              "\tminheight=\"${7}\"",
              "\tmaxheight=\"${8}\"",
              "\tresize=\"${9}\"",
              "\tmode=\"${10|plain,panel|}\"",
              "\tfeedbackmode=\"${11|direct,submit|}\"",
              "\tsignalvaluesynctimeout=\"${12|1500|}\"",
              "\tindexid=\"${13|idx|}\"",
              "\treceivestatevalue=\"${14}\"",
              "\tsendeventonchange=\"${15}\">",
              "\t<template>",
              "\t\t<ch5-select-option>",
              "\t\t\t<span>Option {{idx}}</span>",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:single-selection2",
            "description": "Crestron Select (single selection using receiveStateValue and ch5-select-option.sendEventOnClick)",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\tselectedvalue=\"${2}\"",
              "\tnoneselectedprompt=\"${3}\"",
              "\tpanelscrollheight=\"${4}\"",
              "\tminwidth=\"${5}\"",
              "\tmaxwidth=\"${6}\"",
              "\tminheight=\"${7}\"",
              "\tmaxheight=\"${8}\"",
              "\tresize=\"${9}\"",
              "\tmode=\"${10|plain,panel|}\"",
              "\tfeedbackmode=\"${11|direct,submit|}\"",
              "\tsignalvaluesynctimeout=\"${12|1500|}\"",
              "\tindexid=\"${13|idx|}\"",
              "\treceivestatevalue=\"${14}\">",
              "\t<template>",
              "\t\t<ch5-select-option sendeventonclick=\"${15}\">",
              "\t\t\t<span>Option {{idx}}</span>",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:single-selection3",
            "description": "Crestron Select (single selection using ch5-select-option.receiveStateSelected and ch5-select-option.sendEventOnClick)",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\tselectedvalue=\"${2}\"",
              "\tnoneselectedprompt=\"${3}\"",
              "\tpanelscrollheight=\"${4}\"",
              "\tminwidth=\"${5}\"",
              "\tmaxwidth=\"${6}\"",
              "\tminheight=\"${7}\"",
              "\tmaxheight=\"${8}\"",
              "\tresize=\"${9}\"",
              "\tmode=\"${10|plain,panel|}\"",
              "\tfeedbackmode=\"${11|direct,submit|}\"",
              "\tsignalvaluesynctimeout=\"${12|1500|}\"",
              "\tindexid=\"${13|idx|}\"",
              "\treceivestatevalue=\"${14}\">",
              "\t<template>",
              "\t\t<ch5-select-option sendeventonclick=\"${15}\"",
              "\t\t\treceivestateselected=\"${16}\">",
              "\t\t\t<span>Option {{idx}}</span>",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:multiselection",
            "description": "Crestron Select (multi selection using ch5-select-option.receiveStateSelected, ch5-select-option.sendEventOnClick and ch5-select-option.receiveStateLabel)",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\tnoneselectedprompt=\"${2}\"",
              "\tpanelscrollheight=\"${3}\"",
              "\tminwidth=\"${4}\"",
              "\tmaxwidth=\"${5}\"",
              "\tminheight=\"${6}\"",
              "\tmaxheight=\"${7}\"",
              "\tresize=\"${8}\"",
              "\tmode=\"${9|plain,panel|}\"",
              "\tmultiselect",
              "\tfeedbackmode=\"${10|direct,submit|}\"",
              "\tindexid=\"${11|idx|}\">",
              "\t<template>",
              "\t\t<ch5-select-option sendeventonclick=\"${12}\"",
              "\t\t\treceivestateselected=\"${13}\">",
              "\t\t\receivestatelabel=\"${14}\">",
              "\t\t\t<span>Option {{label}}</span>",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:default",
            "description": "Crestron Select (using default template)",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\ticonposition=\"${2|first,last|}\"",
              "\tselectedvalue=\"${3}\"",
              "\tnoneselectedprompt=\"${4}\"",
              "\tpanelscrollheight=\"${5}\"",
              "\tminwidth=\"${6}\"",
              "\tmaxwidth=\"${7}\"",
              "\tminheight=\"${8}\"",
              "\tmaxheight=\"${9}\"",
              "\tresize=\"${10}\"",
              "\tmode=\"${11|plain,panel|}\"",
              "\tfeedbackmode=\"${12|direct,submit|}\"",
              "\tsignalvaluesynctimeout=\"${13|1500|}\"",
              "\tindexid=\"${14|idx|}\">",
              "\t<template>",
              "\t\t<ch5-select-option receivestateselected=\"${15}\"",
              "\t\t\treceivestatelabel=\"${16}\"",
              "\t\t\treceivestateurl=\"${17}\"",
              "\t\t\treceivestatescriptlabelhtml=\"${18}\"",
              "\t\t\tsendeventonclick=\"${19}\">",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          }
        ],
        "description": "Ch5 Select inherits the default html select, but provides a lot of extra features",
        "name": "Ch5 Select",
        "tagName": "ch5-select"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`receivestateselected` attribute",
              "***",
              "When receive apply true value apply the selected class ( ch5-button--selected"
            ],
            "value": [],
            "name": "receivestateselected"
          },
          {
            "documentation": [
              "`receivestatelabel` attribute",
              "***",
              "The label / name of this ch5-select-option is received via this attribute"
            ],
            "value": [],
            "name": "receivestatelabel"
          },
          {
            "documentation": [
              "`receivestateurl` attribute",
              "***",
              "Provides the image/icon url."
            ],
            "value": [],
            "name": "receivestateurl"
          },
          {
            "documentation": [
              "`receivestatescriptlabelhtml` attribute",
              "***",
              "Signal script evaluation will be applied to the",
              "button.innerHTML. Allows for multiline, multistyled labels. "
            ],
            "value": [],
            "name": "receivestatescriptlabelhtml"
          },
          {
            "documentation": [
              "`sendeventonclick` attribute",
              "***",
              "Sends event on click or tap event (mouse or finger up and down in a small period of time).",
              "Use this when control system takes action on rising edge from false to true of boolean digital event.",
              "Examples include SIMPL Logic Symbol for Toggle with description of",
              "Digital input <clock> 'High/1 (rising edge) = Toggle; Low/0 = No effect'"
            ],
            "value": [],
            "name": "sendeventonclick"
          },
          {
            "documentation": [
              "`useDefaultTmpl` attribute",
              "***",
              "Option to initialise ch5-select with the default template"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usedefaulttmpl"
          }
        ],
        "documentation": [
          "`ch5-select-option` element",
          "***",
          "Extension to standard HTML option element"
        ],
        "snippets": [],
        "description": "",
        "name": "Ch5 Select option",
        "tagName": "ch5-select-option"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`handleshape` attribute",
              "***",
              "Default: rounded-rectangle. Valid Values: rectangle, circle, oval,",
              "rounded-rectangle. Defines the handle shape."
            ],
            "value": [
              "rounded-rectangle",
              "rectangle",
              "circle",
              "oval"
            ],
            "name": "handleshape"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "Initial values of single value or lower value if range=true"
            ],
            "value": [],
            "name": "value"
          },
          {
            "documentation": [
              "`valuehigh` attribute",
              "***",
              "Higher value only applicable if range=true"
            ],
            "value": [],
            "name": "valuehigh"
          },
          {
            "documentation": [
              "`max` attribute",
              "***",
              "Maximum value"
            ],
            "value": [],
            "name": "max"
          },
          {
            "documentation": [
              "`min` attribute",
              "***",
              "Minimum value"
            ],
            "value": [],
            "name": "min"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "Default horizontal. Valid values: horizontal, vertical"
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Default regular. Valid values: x-small, small, regular, large, xlarge"
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size"
          },
          {
            "documentation": [
              "`handlesize` attribute",
              "***",
              "Size of the handle",
              "Default regular. Valid values: x-small, small, regular, large, x-large"
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "handlesize"
          },
          {
            "documentation": [
              "`step` attribute",
              "***",
              "Default 100. Maximum 100.",
              "Defines the number of steps values in the slider.",
              "If you want quarters 0, 25, 50, 75, 100 then 5 is the numbers of steps"
            ],
            "value": [],
            "name": "step"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Default both. Valid Values: width, height, both",
              "When stretch property is set, the slider inherits the width or/and",
              "height of the container"
            ],
            "value": [
              "",
              "both",
              "width",
              "height"
            ],
            "name": "stretch"
          },
          {
            "documentation": [
              "`ticks` attribute",
              "***",
              "Defines the ticks on the slider.",
              "It will be an advanced tick scales: non-linear or logarithmic.",
              "You can create sliders with ever-increasing increments by",
              "specifying the value for the slider at certain intervals.",
              "- The first value define the % position along the length of the slider scale to place a tick mark.",
              "- The second value will be the label value to place next to the tick at that position.",
              "***",
              "An example would be [[0.0,'-60'], [0.25,'-40'], [0.50,'-20'],[0.75,'-10'], [1.0,'0']]"
            ],
            "value": [],
            "name": "ticks"
          },
          {
            "documentation": [
              "`tooltipshowtype` attribute",
              "***",
              "Default 'off'.  Option to display a tooltip above (horizontal), right(vertical) of the handle.  Valid values are",
              "-'off' not displayed",
              "-'on' always displayed",
              "-'auto' displayed while user interact with the slider"
            ],
            "value": [
              "off",
              "on",
              "auto"
            ],
            "name": "tooltipshowtype"
          },
          {
            "documentation": [
              "`tooltipdisplaytype` attribute",
              "***",
              "Default: percent. Option of what is displayed in the tooltip. Valid values are:",
              "'%' - displayed as percent.",
              "'value' - actual value provided"
            ],
            "value": [
              "%",
              "value"
            ],
            "name": "tooltipdisplaytype"
          },
          {
            "documentation": [
              "`signalvaluesynctimeout` attribute",
              "***",
              "Default 1500. Defines the time (milliseconds) between the user",
              "release the handle of the slider and the time the slider will check",
              "if the value is equal with the value from the signal. If not it will automatically apply the value from the signal. "
            ],
            "value": [],
            "name": "signalvaluesynctimeout"
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "If direct send and receive of value will be instant. On submit it",
              "will send and listen for the first event receive."
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode"
          },
          {
            "documentation": [
              "`receivestatevalue` attribute",
              "***",
              "On receive, change the value of the slider handle"
            ],
            "value": [],
            "name": "receivestatevalue"
          },
          {
            "documentation": [
              "`receivestatevaluehigh` attribute",
              "***",
              "On receive, change the value of the right slider handle, available when range is true"
            ],
            "value": [],
            "name": "receivestatevaluehigh"
          },
          {
            "documentation": [
              "`sendeventonchange` attribute",
              "***",
              "Send signal value on slider change"
            ],
            "value": [],
            "name": "sendeventonchange"
          },
          {
            "documentation": [
              "`sendeventonchangehigh` attribute",
              "***",
              "If range slider is set to true, send signal value high on slider change"
            ],
            "value": [],
            "name": "sendeventonchangehigh"
          },
          {
            "documentation": [
              "`onclean` attribute",
              "***",
              "Run when clean event is fired"
            ],
            "value": [],
            "name": "onclean"
          },
          {
            "documentation": [
              "`ondirty` attribute",
              "***",
              "Run when dirty event is fired"
            ],
            "value": [],
            "name": "ondirty"
          },
          {
            "documentation": [
              "`range` attribute",
              "***",
              "Default false. If true, the slider will have two handles so two different values can be defined."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "range"
          },
          {
            "documentation": [
              "`showtickvalues` attribute",
              "***",
              "Default false. Option to display value labels next to tick marks",
              "at each tick increment."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "showtickvalues"
          },
          {
            "documentation": [
              "`noHandle` attribute",
              "***",
              "False by default. Option to hide the slider handle."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "nohandle"
          },
          {
            "documentation": [
              "`tapSettable` attribute",
              "***",
              "False by default. Option to set slider value on tap."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "tapsettable"
          }
        ],
        "documentation": [
          "`ch5-slider` element",
          "***",
          "Component to provide input using dragging of a handle. One or two numeric values can be",
          "visualized with this component. If two values, two handles provided. "
        ],
        "snippets": [
          {
            "prefix": "ch5-slider:blank",
            "description": "Crestron slider (Blank)",
            "body": [
              "<ch5-slider>",
              "</ch5-slider>$0"
            ]
          },
          {
            "prefix": "ch5-slider:default",
            "description": "Crestron slider (Default)",
            "body": [
              "<ch5-slider value=\"${1:20}\"",
              "\tmin=\"${2:0}\"",
              "\tmax=\"${3:100}\"",
              "\tstep=\"${4:20}\"",
              "\tsendeventonchange=\"${5:slider_value_on_change}\"",
              "\treceivestatevalue=\"${6:receive_slider_value}\">",
              "</ch5-slider>$0"
            ]
          },
          {
            "prefix": "ch5-slider:range",
            "description": "Crestron slider range(If true, we provide two handles to define two values.)",
            "body": [
              "<ch5-slider value=\"${1:20}\"",
              "\tvaluehigh=\"${2:80}\"",
              "\tmin=\"${3:0}\"",
              "\tmax=\"${4:100}\"",
              "\tstep=\"${5:20}\"",
              "\trange=\"${6:true}\"",
              "\tsendeventonchange=\"${7:slider_value_on_change}\"",
              "\treceivestatevalue=\"${8:receive_slider_value}\"",
              "\tsendeventonchangehigh=\"${9:slider_value_high_on_change}\"",
              "\treceivestatevaluehigh=\"${10:receive_slider_value_high}\">",
              "</ch5-slider>$0"
            ]
          },
          {
            "prefix": "ch5-slider:ticks",
            "description": "Crestron slider ticks(Defines the ticks on the slider, value should be a valid JSON.)",
            "body": [
              "<ch5-slider value=\"${1:40}\"",
              "\tshowtickvalues=\"${2:true}\"",
              "\tticks='${3:{\"0\":\"-60\", \"25\":\"-40\", \"50\":\"-20\", \"75\":\"-10\", \"100\": \"0\" }}'",
              "\tsendeventonchange=\"${4:slider_value_on_change}\"",
              "\treceivestatevalue=\"${5:receive_slider_value}\">",
              "</ch5-slider>$0"
            ]
          }
        ],
        "description": "Ch5 Slider inherits the default input range behavior but provides a lot of extra features.",
        "name": "Ch5 Slider",
        "tagName": "ch5-slider"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Amount of items which can be in a spinner element"
            ],
            "value": [],
            "name": "size"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "The label of spinner element"
            ],
            "value": [],
            "name": "label"
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "Valid values are 'first' and 'last'. Default is 'first'.",
              "This attribute only applies when a template is not provided",
              "and the implied template is in use. ",
              "If template is provided, this property is ignored.",
              "If direction attribute is 'ltr', as will be typical in locales with left",
              "to right language direction, 'first' is equivalent to icon being",
              "on the left and text on the right. Conversely, if the direction",
              "attribute is 'rtl', the 'first' would have the icon on the right and",
              "the label to its left. Value of 'last' is the opposite of 'first'. "
            ],
            "value": [
              "first",
              "last"
            ],
            "name": "iconposition"
          },
          {
            "documentation": [
              "`selectedValue` attribute",
              "***",
              "The 1 based index of the selected item. Valid values >=1",
              "and <= size"
            ],
            "value": [],
            "name": "selectedvalue"
          },
          {
            "documentation": [
              "`itemheight` attribute",
              "***",
              "Height of an item. The value of the height can be in px and vh.",
              "We need the item height. If this will not be provided we",
              "will calculate base on the first item height.",
              "Each item on the list needs to have the same height."
            ],
            "value": [],
            "name": "itemheight"
          },
          {
            "documentation": [
              "`visibleitemscroll` attribute",
              "***",
              "Default 3. The number of items to be visible in the",
              "upper/lower container around the selected item container.",
              "This information is needed so we can know how many items",
              "to add to the top of the list and to the bottom. If we do not",
              "have this value set, that means we have to calculate how",
              "many items can fit in the scrollHeight and the probability that",
              "one item will not be fully visible is high. If there is a template",
              "including this visibleItems will need to adjust on the height of",
              "the template given."
            ],
            "value": [],
            "name": "visibleitemscroll"
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "Default direct. allow the form submission functionality.",
              "direct, submit"
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode"
          },
          {
            "documentation": [
              "`signalValueSyncTimeout` attribute",
              "***",
              "Default 1500. Defines the time between the user release the",
              "handle of the toggle and the time the toggle will check if the",
              "value is equal with the value from the signal. If not it will",
              "automatically apply the value from the signal. Apply only for",
              "feedbackMode direct"
            ],
            "value": [],
            "name": "signalvaluesynctimeout"
          },
          {
            "documentation": [
              "`indexid` attribute",
              "***",
              "Provides the name of the offset identifier to substituted with",
              "1 based index of the item in list within the template item",
              "surrounded by {{ }} delimiters."
            ],
            "value": [],
            "name": "indexid"
          },
          {
            "documentation": [
              "`receiveStateValue` attribute",
              "***",
              "Provides the current value of the spinner."
            ],
            "value": [],
            "name": "receivestatevalue"
          },
          {
            "documentation": [
              "`receiveStateSize` attribute",
              "***",
              "Provides the size of the spinner."
            ],
            "value": [],
            "name": "receivestatesize"
          },
          {
            "documentation": [
              "`receiveStateLabel` attribute",
              "***",
              "Provides the label of the spinner."
            ],
            "value": [],
            "name": "receivestatelabel"
          },
          {
            "documentation": [
              "`receiveStateUrl` attribute",
              "***",
              "Provides the image/icon url."
            ],
            "value": [],
            "name": "receivestateurl"
          },
          {
            "documentation": [
              "`sendEventOnChange` attribute",
              "***",
              "Send an event when the value of the spinner changes"
            ],
            "value": [],
            "name": "sendeventonchange"
          },
          {
            "documentation": [
              "`sendEventOnFocus` attribute",
              "***",
              "Send event on focus"
            ],
            "value": [],
            "name": "sendeventonfocus"
          },
          {
            "documentation": [
              "`sendEventOnOverflow` attribute",
              "***",
              "Send event on overflow ( endless attribute required )"
            ],
            "value": [],
            "name": "sendeventonoverflow"
          },
          {
            "documentation": [],
            "value": [],
            "name": "sendeventonunderflow"
          },
          {
            "documentation": [
              "`onclean` attribute",
              "***",
              "Run when clean event is fired"
            ],
            "value": [],
            "name": "onclean"
          },
          {
            "documentation": [
              "`ondirty` attribute",
              "***",
              "Run when dirty event is fired"
            ],
            "value": [],
            "name": "ondirty"
          },
          {
            "documentation": [
              "`resize` attribute",
              "***",
              "If true, then resize the options panel to fit content width.",
              "apply only this css rule “width=fit-content” and/or “width =auto”",
              "( depending on the browser agent )"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "resize"
          },
          {
            "documentation": [
              "`endless` attribute",
              "***",
              "Default false. Infinite spinner. This will trigger that the next",
              "element after the last to be the first element in the list."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "endless"
          },
          {
            "documentation": [],
            "value": [
              "false",
              "true"
            ],
            "name": "autosetitemheight"
          }
        ],
        "documentation": [
          "`ch5-spinner` element",
          "***",
          "Functionally the Spinner Component is similar to the Select component. The primary differences are visual representation.",
          "Visually, Spinner component will present a vertical list of values centered around one central orientated",
          "item which is considered the single selected item. Swiping up and down on the items will allow the user",
          "to see other selections and leaving an item in the center chooses the item. "
        ],
        "snippets": [
          {
            "prefix": "ch5-spinner:blank",
            "description": "Crestron Spinner (Blank)",
            "body": [
              "<ch5-spinner>",
              "</ch5-spinner>$0"
            ]
          },
          {
            "prefix": "ch5-spinner:default",
            "description": "Crestron Spinner (Default)",
            "body": [
              "<ch5-spinner",
              "    label=\"${1:item {{idx}}}\"",
              "    indexid=\"${2:idx}\"",
              "    size=\"${3:40}\"",
              "    itemheight=\"${4:40}\"",
              "    visibleitemscroll=\"${5:3}\"",
              "    sendeventonchange=\"${6:changed_signal}\">",
              "</ch5-spinner>$0"
            ]
          },
          {
            "prefix": "ch5-spinner:endless",
            "description": "Crestron Spinner endless attribute allows the user to continuously drag the spinner.",
            "body": [
              "<ch5-spinner",
              "    label=\"${1:item {{idx}}}\"",
              "    indexid=\"${2:idx}\"",
              "    size=\"${3:20}\"",
              "    itemheight=\"${4:40}\"",
              "    visibleitemscroll=\"${5:3}\"",
              "    endless=\"${6:true}\">",
              "</ch5-spinner>$0"
            ]
          },
          {
            "prefix": "ch5-spinner:signals",
            "description": "Crestron Spinner sending signals when interact with the component.",
            "body": [
              "<ch5-spinner",
              "    label=\"${1:item {{idx}}}\"",
              "    indexid=\"${2:idx}\"",
              "    size=\"${3:20}\"",
              "    itemheight=\"${4:40}\"",
              "    visibleitemscroll=\"${5:3}\"",
              "    endless=\"${6:true}\"",
              "    sendeventonchange=\"${7:changed_signal}\"",
              "    sendeventonfocus=\"${8:spinner_focusin}\">",
              "</ch5-spinner>$0"
            ]
          }
        ],
        "description": "Ch5 Spinner provides a list of items being possible to go through items by dragging the spinner element.",
        "name": "Ch5 Spinner",
        "tagName": "ch5-spinner"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "Default direct. Valid values 'direct', 'submit'",
              "***",
              "'direct' has updates trigger change event and sendEventOnChange",
              "as user changes.",
              "'submit' triggers change event and updating signal in",
              "sendEventOnChange attribute only when the submit() method is called by a Form Component"
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode"
          },
          {
            "documentation": [
              "`signalvaluesynctimeout` attribute",
              "***",
              "Default 1500. Defines the time between the user release the",
              "handle of the toggle and the time the toggle will check if the value is",
              "equal with the value from the signal. If not it will automatically apply",
              "the value from the signal. Apply only for feedbackMode direct"
            ],
            "value": [],
            "name": "signalvaluesynctimeout"
          },
          {
            "documentation": [
              "`onclean` attribute",
              "***",
              "Run when clean event is fired"
            ],
            "value": [],
            "name": "onclean"
          },
          {
            "documentation": [
              "`ondirty` attribute",
              "***",
              "Run when dirty event is fired"
            ],
            "value": [],
            "name": "ondirty"
          },
          {
            "documentation": [
              "`required` attribute",
              "***",
              "Specifies that the input element must be filled out before submitting the form"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "required"
          },
          {
            "documentation": [
              "`mask` attribute",
              "***",
              "Background pattern that will be present when the input is focus.",
              "We will allow the following combination of prebuild definitions:",
              "a - alpha caracter",
              "9- numeric character",
              "*- alpha numeric character"
            ],
            "value": [],
            "name": "mask"
          },
          {
            "documentation": [
              "`icon` attribute",
              "***",
              "Icon to be show"
            ],
            "value": [],
            "name": "icon"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "Provides the label for the input"
            ],
            "value": [],
            "name": "label"
          },
          {
            "documentation": [
              "`placeholder` attribute",
              "***",
              "Provides the placeholder for the input, it has the default behavior as for input html element"
            ],
            "value": [],
            "name": "placeholder"
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "Valid values are 'first' and 'last'. Default is 'first'",
              "If direction attribute is 'ltr', as will be typical in locales with left to right language",
              "direction, 'first' is equivalent to icon being on the left and text on the",
              "right",
              " Conversely, if the direction attribute is 'rtl', the 'first' would have the icon on the ",
              "right and the label to its left. Value of 'last' is",
              "the opposite of 'first'."
            ],
            "value": [
              "first",
              "last"
            ],
            "name": "iconposition"
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Type of the input."
            ],
            "value": [
              "text",
              "number",
              "email"
            ],
            "name": "type"
          },
          {
            "documentation": [
              "`minlength` attribute",
              "***",
              "Applicable only in feedbackmode='submit'."
            ],
            "value": [],
            "name": "minlength"
          },
          {
            "documentation": [
              "`maxlength` attribute",
              "***",
              "Applicable only in feedbackmode='submit'."
            ],
            "value": [],
            "name": "maxlength"
          },
          {
            "documentation": [
              "`minvalue` attribute",
              "***",
              "Applicable only for type=numeric and feedbackmode='submit', field",
              "will be in error if the value supplied by user is less than value of the attribute. "
            ],
            "value": [],
            "name": "minvalue"
          },
          {
            "documentation": [
              "`maxvalue` attribute",
              "***",
              "Applicable only for type=numeric and feedbackmode='submit', field",
              "will be in error if the value supplied by user is greater than value of",
              "the attribute. "
            ],
            "value": [],
            "name": "maxvalue"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Sets the relative size of this Component"
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Default 'fixed'. Valid values 'fixed', 'width', and 'content'.",
              "Sets the width of the input",
              "***",
              "Fixed - fixed position ( from CSS classes )",
              "Width - Width of the parent content",
              "Content - Width will be equal to the content width."
            ],
            "value": [
              "fixed",
              "width",
              "content"
            ],
            "name": "stretch"
          },
          {
            "documentation": [
              "`text-transform` attribute",
              "***",
              "Only for type=text, default value 'none'. Valid values",
              "'capitalize' – make all first characters of each word uppercase",
              "'uppercase' – make all characters uppercase",
              "'lowercase' – make all characters lowercase",
              "'none' – don't change input"
            ],
            "value": [
              "none",
              "capitalize",
              "uppercase",
              "lowercase"
            ],
            "name": "text-transform"
          },
          {
            "documentation": [
              "`receivestatefocus` attribute",
              "***",
              "When focused, true, when unfocuses, send false"
            ],
            "value": [],
            "name": "receivestatefocus"
          },
          {
            "documentation": [
              "`receivestatevalue` attribute",
              "***",
              "When receive change the value of the text input field"
            ],
            "value": [],
            "name": "receivestatevalue"
          },
          {
            "documentation": [
              "`sendeventonchange` attribute",
              "***",
              "Send event on value change"
            ],
            "value": [],
            "name": "sendeventonchange"
          },
          {
            "documentation": [
              "`sendeventonfocus` attribute",
              "***",
              "Send event on focus"
            ],
            "value": [],
            "name": "sendeventonfocus"
          },
          {
            "documentation": [
              "`sendeventonblur` attribute",
              "***",
              "Send event on blur"
            ],
            "value": [],
            "name": "sendeventonblur"
          },
          {
            "documentation": [
              "`onvaliditychange` attribute",
              "***",
              "Run when validity state of a input has been change"
            ],
            "value": [],
            "name": "onvaliditychange"
          },
          {
            "documentation": [
              "`scaling` attribute",
              "***",
              "Scale the input font size when reaches the edge"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "scaling"
          },
          {
            "documentation": [
              "`tabIndex` attribute",
              "***",
              "The tabindex global attribute indicates that its element",
              "can be focused, and where it participates in sequential",
              "keyboard navigation"
            ],
            "value": [],
            "name": "tabindex"
          }
        ],
        "documentation": [
          "`ch5-textinput` attribute",
          "***",
          "The TextEntry component allows the user to enter textual input. This is an extension of the",
          "input HTML element."
        ],
        "snippets": [
          {
            "prefix": "ch5-textinput:blank",
            "description": "Crestron Textinput (Blank)",
            "body": [
              "<ch5-textinput>",
              "</ch5-textinput>$0"
            ]
          },
          {
            "prefix": "ch5-textinput:default",
            "description": "Crestron Textinput (Default)",
            "body": [
              "<ch5-textinput",
              "     type=\"${1|text,number,month,week,email|}\">",
              "</ch5-textinput>$0"
            ]
          },
          {
            "prefix": "ch5-textinput:phone",
            "description": "Crestron Textinput phone mask attribute",
            "body": [
              "<ch5-textinput",
              "    label=\"${1:Phone number:}\"",
              "    icon=\"${2:fa fa-phone}\"",
              "    size=\"${3:x-large}\"",
              "    placeholder=\"${4:Phone Number}\"",
              "    mask=\"${5:(+99) 999 999 999}\"",
              "    id=\"${7:phoneNumber}\">",
              "</ch5-textinput>"
            ]
          },
          {
            "prefix": "ch5-textinput:signals",
            "description": "Crestron Textinput phone mask attribute",
            "body": [
              "<ch5-textinput",
              "    label=\"${1:Phone number:}\"",
              "    icon=\"${2:fa fa-phone}\"",
              "    size=\"${3:x-large}\"",
              "    placeholder=\"${4:Phone Number}\"",
              "    mask=\"${5:(+99) 999 999 999}\"",
              "    id=\"${7:phoneNumber}\"",
              "    sendeventonchange=\"${8:input_changed}\"",
              "    sendeventonfocus=\"${9:input_focus}\"",
              "    sendeventonblur=\"${10:input_blur}\">",
              "</ch5-textinput>"
            ]
          }
        ],
        "description": "Ch5 Textinput inherits the default html input behavior, but also provides extra features.",
        "name": "Ch5 Textinput",
        "tagName": "ch5-textinput"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "Default 'direct'. If direct, send and receive of value will be",
              "instant. On submit it will send and listen for the first event receive."
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode"
          },
          {
            "documentation": [
              "`signalvaluesynctimeout` attribute",
              "***",
              "Default 1500. Defines the time between the user click the",
              "toggle and the time the toggle will check if the value is equal",
              "with the value from the signal. If not it will automatically apply",
              "the value from the signal. Apply only for feedbackMode direct "
            ],
            "value": [],
            "name": "signalvaluesynctimeout"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "Label value"
            ],
            "value": [],
            "name": "label"
          },
          {
            "documentation": [
              "`labelon` attribute",
              "***",
              "Custom text to display on the toggle when the toggle is ON"
            ],
            "value": [],
            "name": "labelon"
          },
          {
            "documentation": [
              "`labeloff` attribute",
              "***",
              "Custom text to display on the toggle when the toggle is OFF"
            ],
            "value": [],
            "name": "labeloff"
          },
          {
            "documentation": [
              "`iconon` attribute",
              "***",
              "Specify a custom icon class when the toggle is ON"
            ],
            "value": [],
            "name": "iconon"
          },
          {
            "documentation": [
              "`iconoff` attribute",
              "***",
              "Specify a custom icon class when the toggle is OFF"
            ],
            "value": [],
            "name": "iconoff"
          },
          {
            "documentation": [
              "`handleshape` attribute",
              "***",
              "Default circle. Handle Shape. That will also determine the shape",
              "of the component ( rectangle or circle )"
            ],
            "value": [
              "circle",
              "rectangle"
            ],
            "name": "handleshape"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "Default Horizontal. Orientation"
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation"
          },
          {
            "documentation": [
              "`receivestatescriptlabelhtml` attribute",
              "***",
              "The value of the switch"
            ],
            "value": [],
            "name": "receivestatescriptlabelhtml"
          },
          {
            "documentation": [
              "`receivestatevalue` attribute",
              "***",
              "Receiving value from signal"
            ],
            "value": [],
            "name": "receivestatevalue"
          },
          {
            "documentation": [
              "`sendeventonclick` attribute",
              "Send signal on click or tap event (mouse or finger up and down in a small period of time)"
            ],
            "value": [],
            "name": "sendeventonclick"
          },
          {
            "documentation": [
              "`onclean` attribute",
              "***",
              "Run when clean event is fired"
            ],
            "value": [],
            "name": "onclean"
          },
          {
            "documentation": [
              "`ondirty` attribute",
              "***",
              "Run when dirty event is fired"
            ],
            "value": [],
            "name": "ondirty"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "Default false, Initial value of the component.",
              "When feedbackMode= submit, this property will change to the last",
              "value submit. When reset, the value property will be change to",
              "the initial value or last value on submit"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "value"
          }
        ],
        "documentation": [
          "`ch5-toggle` element",
          "***",
          "Visually appearing as a two state switch with ease transition between states, the component has the",
          "functionality of an HTML checkbox type input element. "
        ],
        "snippets": [
          {
            "prefix": "ch5-toggle:label-on-off",
            "description": "Crestron Toggle (Default)",
            "body": [
              "<ch5-toggle label=\"${1:Alarm}\"",
              "\tvalue=\"${2:false}\"",
              "\tlabelon=\"${3:On}\"",
              "\tlabeloff=\"${4:Off}\"",
              "\tsendeventonclick=\"${5:send_switch_value}\"",
              "\treceivestatevalue=\"${5:receive_switch_value}\">",
              "</ch5-toggle>$0"
            ]
          },
          {
            "prefix": "ch5-toggle:icon-on-off",
            "description": "Crestron Toggle (Default)",
            "body": [
              "<ch5-toggle label=\"${1:Alarm}\"",
              "\tvalue=\"${2:false}\"",
              "\ticonon=\"${3:fas fa-bell}\"",
              "\ticonoff=\"${4:fas fa-bell-slash}\"",
              "\tsendeventonclick=\"${5:send_switch_value}\"",
              "\treceivestatevalue=\"${5:receive_switch_value}\">",
              "</ch5-toggle>$0"
            ]
          }
        ],
        "description": "Ch5 Toggle represents an input with two states behaving like a switch",
        "name": "Ch5 Toggle",
        "tagName": "ch5-toggle"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`activeview` attribute",
              "***",
              "Default 1. Which view will be shown. 1-based index."
            ],
            "value": [],
            "name": "activeview"
          },
          {
            "documentation": [
              "`sendeventshowchildindex` attribute",
              "***",
              "Send index of currently visible item. 1 based index."
            ],
            "value": [],
            "name": "sendeventshowchildindex"
          },
          {
            "documentation": [
              "`receivestateshowchildindex` attribute",
              "***",
              "Send index of currently visible item. 1 based index."
            ],
            "value": [],
            "name": "receivestateshowchildindex"
          },
          {
            "documentation": [
              "`disableanimation` attribute",
              "***",
              "Disable swipe-like animation when navigating through the ChildViews of the TriggerView"
            ],
            "value": [],
            "name": "disableanimation"
          },
          {
            "documentation": [
              "`gestureable` attribute",
              "***",
              "Default false. When set to true the gesturing will be supported. Adding this will",
              "change the behavior inside of the component.",
              "You can find more Gesture - Use Cases."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "gestureable"
          },
          {
            "documentation": [
              "`endless` attribute",
              "***",
              "Default false. We can call nextChildView method on the last viewchild to open the first-child"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "endless"
          },
          {
            "documentation": [
              "`nested` attribute",
              "***",
              "Boolean attribute used to flag that ch5-triggerview is child element on ch5-triggerview-child"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "nested"
          }
        ],
        "documentation": [
          "`ch5-triggerview` element",
          "***",
          "Container-like component for organizing content into multiple subgroups (ch5-triggerview-child), each ChildView can be viewed as a separate page or tab."
        ],
        "snippets": [
          {
            "prefix": "ch5-triggerview:blank",
            "body": [
              "<ch5-triggerview>",
              "    <ch5-triggerview-child>",
              "    </ch5-triggerview-child> ",
              "</ch5-triggerview>"
            ],
            "description": "Crestron Triggerview (Blank)"
          },
          {
            "prefix": "ch5-triggerview:default",
            "body": [
              "<ch5-triggerview activeview=\"${1:1}\" gestureable=\"${2:true}\" endless=\"${3:true}\"> ",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>First View</h1>",
              "        </div>",
              "    </ch5-triggerview-child> ",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>Second View</h1>",
              "        </div>",
              "    </ch5-triggerview-child>",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>Third View</h1>",
              "        </div>",
              "    </ch5-triggerview-child>",
              "</ch5-triggerview>"
            ],
            "description": "Crestron Triggerview (Default)"
          },
          {
            "prefix": "ch5-triggerview:signals",
            "body": [
              "<ch5-triggerview activeview=\"${1:1}\" sendeventshowchildindex=\"${2:send_index_view}\" receivestateshowchildindex=\"${3:receive_index_view}\" > ",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>First View</h1>",
              "        </div>",
              "    </ch5-triggerview-child> ",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>Second View</h1>",
              "        </div>",
              "    </ch5-triggerview-child>",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>Third View</h1>",
              "        </div>",
              "    </ch5-triggerview-child>",
              "</ch5-triggerview>"
            ],
            "description": "Crestron Triggerview Signals"
          }
        ],
        "description": "Ch5 Trigger View will be used to group content, each component will be wrap inside an ChildView Component",
        "name": "Ch5 Trigger View",
        "tagName": "ch5-triggerview"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true it will tell the parent component (ch5-triggerview) to hide all the other ChildViews * and only show this one."
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Sends a digital pulse when a view child becomes visible. Allows the control system",
              "to take various actions based on which view is active."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          }
        ],
        "documentation": [
          "`ch5-triggerview-child` attribute",
          "***",
          "Each triggerview child is similar to a standalone page, navigating between pages is done via swiping"
        ],
        "snippets": [
          {
            "prefix": "ch5-triggerview:child-send-signals",
            "body": [
              "<ch5-triggerview activeview=\"${1:1}\"> ",
              "    <ch5-triggerview-child sendeventonshow=\"${2:first_child_is_shown}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>First View</h1>",
              "        </div>",
              "    </ch5-triggerview-child > ",
              "    <ch5-triggerview-child sendeventonshow=\"${3:second_child_is_shown}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>Second View </h1>",
              "        </div> ",
              "    </ch5-triggerview-child >",
              "    <ch5-triggerview-child sendeventonshow=\"${4:third_child_is_shown}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>Third View </h1>",
              "        </div> ",
              "    </ch5-triggerview-child >",
              "</ch5-triggerview>"
            ],
            "description": "Crestron Triggerview Child Send Signals"
          },
          {
            "prefix": "ch5-triggerview:child-receive-signals",
            "body": [
              "<ch5-triggerview activeview=\"${1:1}\"> ",
              "    <ch5-triggerview-child receivestateshow=\"${2:show_first_view_signal}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>First View</h1>",
              "        </div>",
              "    </ch5-triggerview-child > ",
              "    <ch5-triggerview-child receivestateshow=\"${3:show_second_view_signal}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>Second View </h1>",
              "        </div> ",
              "    </ch5-triggerview-child >",
              "    <ch5-triggerview-child receivestateshow=\"${4:show_third_view_signal}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>Third View </h1>",
              "        </div> ",
              "    </ch5-triggerview-child >",
              "</ch5-triggerview>"
            ],
            "description": "Crestron Triggerview Signals"
          }
        ],
        "description": "Ch5 View Child - content wrapper for ch5-triggerview.",
        "name": "Ch5 View Child",
        "tagName": "ch5-triggerview-child"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`templateid` attribute",
              "***",
              "The id of the template to be instantiated"
            ],
            "value": [],
            "name": "templateid"
          },
          {
            "documentation": [
              "`context` attribute",
              "***",
              "In format of 'original:replacement;'  original is the value to be replaced, replacement",
              "is the replacement value."
            ],
            "value": [],
            "name": "context"
          }
        ],
        "documentation": [
          "`ch5-template` element",
          "***"
        ],
        "snippets": [
          {
            "prefix": "ch5-template:default",
            "description": "Crestron Ch5-Template (default)",
            "body": [
              "<ch5-template templateId=\"[provideTemplateId]\" context=\"[original]:[replacement]\"></ch5-template>"
            ]
          }
        ],
        "description": "The primary functionality of this component is to create new instances of the user provided <template>\nand substitute event and state names where indicated by the integrator",
        "name": "Ch5 Template",
        "tagName": "ch5-template"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receiveStateShow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user."
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`receiveStateShowPulse` attribute",
              "***",
              "On transition from false to true, this signal will direct the component to be seen by user."
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receiveStateHidePulse` attribute",
              "***",
              "On transition from false to true, the signal will direct if the component to no longer be seen."
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`url` attribute",
              "***",
              "HTML file path."
            ],
            "value": [],
            "name": "url"
          }
        ],
        "documentation": [
          "`ch5-import-htmlsnippet` element",
          "***",
          "Component to load HTML snippets during run time.",
          "This component allows the users to load the HTML snippets. The snippets should not contain HTML, HEAD and BODY tags.",
          "The users can modularize the HTML files into pages or sections using this component ",
          "and it inserts the Snippet into the DOM at the respective place ",
          "during run time.",
          "The afterload event occurs when a snippet HTML has been loaded and inserted into the DOM.",
          "afterLoad is most often used within the ch5-import-htmlsnippet element to execute a script once a html ",
          "snippet has completely loaded all content (including images, script files, CSS files, etc.).",
          "To import the snippet in Angular, we have to add the source directory in angular.json file like below:",
          "     \"assets\": [",
          "         \"src/assets/htmlsnippets\" ",
          "     ]"
        ],
        "snippets": [
          {
            "prefix": "ch5-import-htmlsnippet:default",
            "description": "Crestron import-htmlsnippet (Default)",
            "body": [
              "<ch5-import-htmlsnippet url=\"\">",
              "</ch5-import-htmlsnippet>$0"
            ]
          },
          {
            "prefix": "ch5-import-htmlsnippet:All Attributes",
            "description": "Crestron import-htmlsnippet (All Attributes)",
            "body": [
              "<ch5-import-htmlsnippet url=\"\" receivestateshowpulse=\"\" data-ch5-noshow-type=\"\" receivestatehidepulse=\"\" receivestateshow=\"\" sendeventonshow=\"\">",
              "</ch5-import-htmlsnippet>$0"
            ]
          }
        ],
        "description": "Ch5 import-htmlsnippet allows to import the HTML snippet.",
        "name": "Ch5 import-htmlsnippet",
        "tagName": "ch5-import-htmlsnippet"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`url` attribute",
              "***",
              "When one or more image URLs to be used as background. ",
              "Supported image types include JPEG, PNG, SVG, and BMP. ",
              "Motion GIFs are not supported. Multiple urls can be provided ",
              "separated by | (vertical bar) to have images replaced over time."
            ],
            "value": [],
            "name": "url"
          },
          {
            "documentation": [
              "`backgroundcolor` attribute",
              "***",
              "When one or more color of background using CSS background-color property ",
              "syntax including color names, #hex codes, rgb(), rgba(), hsl() and hsla().",
              "Multiple colors can be provided separated by | (vertical bar) to have colors ",
              "replaced based on time defined.",
              "This attribute is superseded by the url attribute."
            ],
            "value": [],
            "name": "backgroundcolor"
          },
          {
            "documentation": [
              "`repeat` attribute",
              "***",
              "The repeat property sets how a background image will be repeated. In the absence of ",
              "repeat attribute no-repeat will be considered as default. Support values no-repeat, ",
              "repeat-x, repeat-y and repeat. ",
              "The value repeat-x repeats image horizontally, repeat-y repeats image vertically, repeat ",
              "repeats both vertically and horizontally. The last image will be clipped if it does not fit."
            ],
            "value": [
              "",
              "no-repeat",
              "repeat",
              "repeat-x",
              "repeat-y"
            ],
            "name": "repeat"
          },
          {
            "documentation": [
              "`scale` attribute",
              "***",
              "Default stretch. Valid values: stretch, fill, fit ",
              "defines how an image will fill the component when the ",
              "component and the image do not have the same aspect ratio. ",
              "stretch will transform the image to have same aspect ratio as the component ",
              "fill will size the image to leave no extra space ",
              "but will crop off either top and bottom or left and right to ",
              "completely fill the component and fit will preserve the image aspect ratio ",
              "centering the image leaving either letter box on top and bottom or ",
              "pillar box on left and right. For fit attribute, see related ",
              "imgBackgroundColor attribute."
            ],
            "value": [
              "stretch",
              "fill",
              "fit"
            ],
            "name": "scale"
          },
          {
            "documentation": [
              "`refreshrate` attribute",
              "***",
              "Default 600. min value 10 and max value 604800 ",
              "when more than one image provided in url attribute ",
              "this attribute provides length of time in seconds each ",
              "image will be displayed. Values outside of min and max ",
              "will be capped at closest valid value."
            ],
            "value": [],
            "name": "refreshrate"
          },
          {
            "documentation": [
              "`imgbackgroundcolor` attribute",
              "***",
              "Default black",
              "Related to the scale attribute having value of fit ",
              "this attribute defines the color of the pillarbox or ",
              "letterbox borders when image aspect ratio is not the ",
              "same of the component aspect ratio."
            ],
            "value": [],
            "name": "imgbackgroundcolor"
          },
          {
            "documentation": [
              "`transitioneffect` attribute",
              "***",
              "Default ease",
              "when more than one image/color provided in url/backgroundcolor attribute ",
              "this attribute provide type of transition using CSS transition-timing-syntax ",
              "property syntax. See related attribute transition-duration."
            ],
            "value": [],
            "name": "transitioneffect"
          },
          {
            "documentation": [
              "`transitionduration` attribute",
              "***",
              "Default 1s",
              "when more than one image/color provided in url/backgroundcolor attribute ",
              "this attribute provides the time length of the transition ",
              "using CSS transition-duration syntax."
            ],
            "value": [],
            "name": "transitionduration"
          },
          {
            "documentation": [
              "`receivestaterefreshrate` attribute",
              "***",
              "when defined, will set refreshRate attribute"
            ],
            "value": [],
            "name": "receivestaterefreshrate"
          },
          {
            "documentation": [
              "`receivestateurl` attribute",
              "***",
              "when defined, will set url attribute"
            ],
            "value": [],
            "name": "receivestateurl"
          },
          {
            "documentation": [
              "`receivestatebackgroundcolor` attribute",
              "***",
              "when defined, will set the backgroundColor attribute"
            ],
            "value": [],
            "name": "receivestatebackgroundcolor"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          }
        ],
        "documentation": [
          "`ch5-background` element",
          "***",
          "As a background, Standard HTML has a large amount of available styles to provide backgrounds for HTML elements.",
          "Ch5 Video will be implemented using Alpha Blending  where portions of the HTML will become invisible to allow video",
          "playing below the HTML layer to be visually inserted into the user's view. As such, to support background images and",
          "colors of html elements views that will be in CH5 projects, the ch5-background component provides much of the same",
          "functionality, but works with the video component to make portions of the screen invisible to allow the video to shine through."
        ],
        "snippets": [
          {
            "prefix": "ch5-background:blank",
            "description": "Crestron Background (Blank)",
            "body": [
              "<ch5-background>",
              "</ch5-background>$0"
            ]
          },
          {
            "prefix": "ch5-background:default",
            "description": "Crestron Background (Default)",
            "body": [
              "<ch5-background url=\"${5:http://someServer/background.png}\">",
              "</ch5-background>$0"
            ]
          },
          {
            "prefix": "ch5-background:all-attributes",
            "description": "Crestron Background (All Attributes)",
            "body": [
              "<ch5-background url=\"${5:http://someServer/background.png}\">",
              "\trefreshrate=\"${2:10}\"",
              "\tbackgroundcolor=\"${3:black}\"",
              "\trepeat=\"${4|no-repeat,repeat,repeat-x,repeat-y|}\"",
              "\tscale=\"${5|stretch,fill,fit|}\"",
              "\timgbackgroundcolor=\"${6:black}\"",
              "\ttransitioneffect=\"${7:ease}\"",
              "\transitionduration=\"${8:1s}\"",
              "\treceivestateurl=\"${9}\"",
              "\treceivestatebackgroundcolor=\"${10}\"",
              "\treceivestaterefreshrate=\"${11}\"",
              "</ch5-background>$0"
            ]
          }
        ],
        "description": "Ch5 Background offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Background",
        "tagName": "ch5-background"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute"
            ],
            "value": [],
            "name": "id"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applies in the component. "
            ],
            "value": [],
            "name": "customclass"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "A list of space delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property will reflect the type of the visibility of the item. See the 'data-ch5-noshow-type'",
              "custom HTML attribute for further information"
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'customClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomclass"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "the value of this signal will be applied equivalent as a property on 'styleClass'.",
              "Change of value will remove prior value and then apply new value"
            ],
            "value": [],
            "name": "receivestatecustomstyle"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "While true, the boolean value of the signal determines if the component is seen by user"
            ],
            "value": [],
            "name": "receivestateshow"
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal will direct the component to be seen by user"
            ],
            "value": [],
            "name": "receivestateshowpulse"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, the signal will direct if the component to no longer be seen"
            ],
            "value": [],
            "name": "receivestatehidepulse"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              " while true, the boolean value of the signal determines if the component is enabled. Please note",
              "the signal name is provided, the value of the signal has the opposite",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices. "
            ],
            "value": [],
            "name": "receivestateenable"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "boolean value of true when the component is visible and false when not visible.",
              "Note, if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "apply the provided value as class name while the component is visible and remove the class name when not visible"
            ],
            "value": [],
            "name": "appendclasswheninviewport"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute"
            ],
            "value": [],
            "name": "class"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute"
            ],
            "value": [],
            "name": "style"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "Accessibility attribute, implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog' and so on. ",
              "You can override its default value for this ch5-component via this attribute."
            ],
            "value": [],
            "name": "role"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "Defaulted to false. Used to get useful developer related information about component behavior"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "Defaulted to false, this property will direct the component to change CSS and event listeners",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled"
          },
          {
            "documentation": [
              "`indexId` attribute",
              "***",
              "Provides the name of the offset identifier to substituted with 0 based index of the item in list within the signal names provided in other attributes surrounded by {{ }} delimiters."
            ],
            "value": [],
            "name": "indexId"
          },
          {
            "documentation": [
              "`userId` attribute",
              "***",
              "Userid to access the video along with password."
            ],
            "value": [],
            "name": "userId"
          },
          {
            "documentation": [
              "`snapShotUserId` attribute",
              "***",
              "Userid to access the snapshot along with password."
            ],
            "value": [],
            "name": "snapShotUserId"
          },
          {
            "documentation": [
              "`password` attribute",
              "***",
              "Password to access the video along with userid."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "password"
          },
          {
            "documentation": [
              "`snapShotPassword` attribute",
              "***",
              "Password to access the snapshot along with userid."
            ],
            "value": [],
            "name": "snapShotPassword"
          },
          {
            "documentation": [
              "`snapShotRefreshRate` attribute",
              "***",
              "Refresh rate of the snapshot."
            ],
            "value": [],
            "name": "snapShotRefreshRate"
          },
          {
            "documentation": [
              "`aspectRatio` attribute",
              "***",
              "Sets the ratio of width to height of the video.",
              "Width and height of the component to be controlled by css style classes.",
              "Values are 16:9 (default), 4:3, and custom.  When size of container is not match the aspect ratio, ",
              "the full height or the full width should be used and the dimension that is not full should be centered."
            ],
            "value": [
              "16:9",
              "4:3"
            ],
            "name": "aspectRatio"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Default false.  When true, video will be displayed in the whole component.",
              "When false, video will be displayed as letter or pillar box based upon the aspect ratio of the video ",
              "feed and the size of the component.  Note: this attribute is independent of aspectRatio."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "stretch"
          },
          {
            "documentation": [
              "`url` attribute",
              "***",
              "The source path of the video."
            ],
            "value": [],
            "name": "url"
          },
          {
            "documentation": [
              "`sourceType` attribute",
              "***",
              "Video Source type can be Network, H.264, MJPEG, HDMI, HLS, DASH or DM."
            ],
            "value": [
              "Network",
              "H.264",
              "HDMI",
              "MJPEG",
              "DM",
              "HLS",
              "DASH"
            ],
            "name": "sourceType"
          },
          {
            "documentation": [
              "`snapShotUrl` attribute",
              "***",
              "A snapshot of the video, if any."
            ],
            "value": [],
            "name": "snapShotUrl"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "The display size for the video. The default size will be small if not mentioned."
            ],
            "value": [
              "x-small",
              "small",
              "regular",
              "large",
              "x-large",
              "xx-large"
            ],
            "name": "size"
          },
          {
            "documentation": [
              "`zIndex` attribute",
              "***",
              "Display of the video moves front and back w.r.t z-axis."
            ],
            "value": [],
            "name": "zIndex"
          },
          {
            "documentation": [
              "`controls` attribute",
              "***",
              "When present, it specifies that video controls like start, stop, fullscreen should be displayed."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "controls"
          },
          {
            "documentation": [
              "`sendeventonerror` attribute",
              "***",
              "HTML attribute name: sendEventOnError or sendeventonerror."
            ],
            "value": [],
            "name": "sendeventonerror"
          },
          {
            "documentation": [
              "`sendEventOnClick` attribute",
              "***",
              "Send signal on click or tap event (mouse or finger up and down in a small period of time)."
            ],
            "value": [],
            "name": "sendEventOnClick"
          },
          {
            "documentation": [
              "`sendEventSelectionChange` attribute",
              "***",
              "Send signal on source selection change."
            ],
            "value": [],
            "name": "sendEventSelectionChange"
          },
          {
            "documentation": [
              "`sendEventSelectionSourceType` attribute",
              "***",
              "Current selected source type."
            ],
            "value": [],
            "name": "sendEventSelectionSourceType"
          },
          {
            "documentation": [
              "`sendEventSelectionURL` attribute",
              "***",
              "Current selected video URL."
            ],
            "value": [],
            "name": "sendEventSelectionURL"
          },
          {
            "documentation": [
              "`sendEventSelectionImageURL` attribute",
              "***",
              "Current selected still image URL."
            ],
            "value": [],
            "name": "sendEventSelectionImageURL"
          },
          {
            "documentation": [
              "`sendEventErrorCode` attribute",
              "***",
              "Current state video error code."
            ],
            "value": [],
            "name": "sendEventErrorCode"
          },
          {
            "documentation": [
              "`sendEventErrorMessage` attribute",
              "***",
              "Current state video error message."
            ],
            "value": [],
            "name": "sendEventErrorMessage"
          },
          {
            "documentation": [
              "`sendEventRetryCount` attribute",
              "***",
              "Current state video retry count."
            ],
            "value": [],
            "name": "sendEventRetryCount"
          },
          {
            "documentation": [
              "`sendEventResolution` attribute",
              "***",
              "Current video resolution."
            ],
            "value": [],
            "name": "sendEventResolution"
          },
          {
            "documentation": [
              "`sendEventState` attribute",
              "***",
              "Current state of the video associated with the current source selection."
            ],
            "value": [],
            "name": "sendEventState"
          },
          {
            "documentation": [
              "`sendEventSnapShotStatus` attribute",
              "***",
              "Current state of the snapshot associated with the current source selection."
            ],
            "value": [],
            "name": "sendEventSnapShotStatus"
          },
          {
            "documentation": [
              "`sendStateSnapShotLastUpdateTime` attribute",
              "***",
              "The timestamp of the last update time of the still image associated with the current source selection."
            ],
            "value": [],
            "name": "sendStateSnapShotLastUpdateTime"
          },
          {
            "documentation": [
              "`receiveStateUrl` attribute",
              "***",
              "Default empty. Defines the video URL as an attribute."
            ],
            "value": [],
            "name": "receiveStateUrl"
          },
          {
            "documentation": [
              "`receiveStateSnapShotURL` attribute",
              "***",
              "Provides the still image URL to use when selection changes to INDEX value."
            ],
            "value": [],
            "name": "receiveStateSnapShotURL"
          },
          {
            "documentation": [
              "`receiveStatePlay` attribute",
              "***",
              "When defined, will play video only when the value is true, will stop video when value is false.",
              "If not defined, the video will play whenever the component is visible.  If defined and value of false, ",
              "display background of ch5-video--nosource css class."
            ],
            "value": [],
            "name": "receiveStatePlay"
          },
          {
            "documentation": [
              "`receiveStateSelect` attribute",
              "***",
              "When defined, will play 0-based index of the video source list.",
              "Value of < 0 or > 31 will select no video to play Value of 0 to 31 will play the selected video source ",
              "provided the video source type (see receiveStateVideoSourceType) is valid. When not defined, ",
              "the first video source defined (equivalent of index 0) in the list will be played."
            ],
            "value": [],
            "name": "receiveStateSelect"
          },
          {
            "documentation": [
              "`receiveStateSourceType` attribute",
              "***",
              "Provides the video source type when the selection changes to INDEX value."
            ],
            "value": [],
            "name": "receiveStateSourceType"
          },
          {
            "documentation": [
              "`receiveStateSnapShotRefreshRate` attribute",
              "***",
              "Defines the refresh rate for a still image url.  0 indicates no refresh."
            ],
            "value": [],
            "name": "receiveStateSnapShotRefreshRate"
          },
          {
            "documentation": [
              "`receiveStateUserId` attribute",
              "***",
              "Provides the userid for credentials supplied to camera for video URL."
            ],
            "value": [],
            "name": "receiveStateUserId"
          },
          {
            "documentation": [
              "`receiveStateSnapShotUserId` attribute",
              "***",
              "provides the userid for credentials supplied to camera for image URL."
            ],
            "value": [],
            "name": "receiveStateSnapShotUserId"
          },
          {
            "documentation": [
              "`receiveStateVideoPassword` attribute",
              "***",
              "provides the password for credentials supplied to camera for video URL."
            ],
            "value": [],
            "name": "receiveStateVideoPassword"
          },
          {
            "documentation": [
              "`receiveStateSnapShotPassword` attribute",
              "***",
              "Provides the password for credentials supplied to camera for image URL."
            ],
            "value": [],
            "name": "receiveStateSnapShotPassword"
          },
          {
            "documentation": [
              "`receiveStatePositionChange` attribute",
              "***",
              "Defines the change of position."
            ],
            "value": [],
            "name": "receiveStatePositionChange"
          },
          {
            "documentation": [
              "`onpress` attribute",
              "***",
              "Run when press event is fired"
            ],
            "value": [],
            "name": "onpress"
          },
          {
            "documentation": [
              "`onrelease` attribute",
              "***",
              "Run when release event is fired"
            ],
            "value": [],
            "name": "onrelease"
          }
        ],
        "documentation": [
          "`ch5-video` element",
          "***",
          "Provides a view onto a streaming video window.",
          "Components that are to reside above the video that need to be visible and active,",
          "examples include buttons to control playback, text describing the video,",
          "and annotation controls, need to be defined as children elements to this component.",
          "As a background, the <video> tag provided in modern HTML5 browsers will stream HTTP based protocols",
          "such as HLS (HTTP Live Streaming) and DASH (dynamic adaptive Streaming over HTTP).",
          "These protocols are not employed on the vast majority of security cameras and the design of these protocols",
          "specify a great deal of buffering (i.e. time delay) that would not be appropriate for use cases associated with security camera.",
          "The implementation of the <ch5-video> component will not attempt to render the streaming video within the HTML rendering engine.",
          "A three tier approach will be employed.  In the top tier,",
          "the HTML component will be responsible to creating invisible rectangles to expose content beneath the HTML rendering engine.",
          "The second tier will provide a surface (handle to raw buffer to display graphics) that will render the streaming video.",
          "The top tier and the second tier will coordinate the location and size of rendered video stream.",
          "The bottom tier is responsible to decode the video stream and interface with the second tier to display the decoded video stream.",
          "The documentation below describes the configuration of the top tier HTML component <ch5-video>."
        ],
        "snippets": [
          {
            "prefix": "ch5-video:default",
            "description": "Provides a view onto a streaming video window. Components that are to reside above the video that need to be visible and active, examples include buttons to control playback, text describing the video, and annotation controls, need to be defined as children elements to this component.",
            "body": [
              "<ch5-video indexid=\"${1}\" aspectratio=\"${2|16:9,4:3|}\" controls=\"${3:true,false}\" size=\"${4:regular,x-small,small,large,x-large,xx-large}\" sourcetype=\"${5:Network,H.264,HDMI,MJPEG,DM,HLS,DASH}\" userid=\"${6}\" snapshotuserid=\"${7}\" password=\"${8:true,false}\" snapshotpassword=\"${9}\" snapshoturl=\"${10}\" url=\"${11}\" stretch=\"${12:true,false}\" zindex=\"${13}\" snapshotrefreshrate=\"${14}\">",
              "</ch5-video>$0"
            ]
          },
          {
            "prefix": "ch5-video:receive-signal",
            "description": "Provides a view onto a streaming video window. Components that are to reside above the video that need to be visible and active, examples include buttons to control playback, text describing the video, and annotation controls, need to be defined as children elements to this component.",
            "body": [
              "<ch5-video indexid=\"${1}\" aspectratio=\"${2|16:9,4:3|}\" controls=\"${3:true,false}\" size=\"${4:regular,x-small,small,large,x-large,xx-large}\" sourcetype=\"${5:Network,H.264,HDMI,MJPEG,DM,HLS,DASH}\" userid=\"${6}\" snapshotuserid=\"${7}\" password=\"${8:true,false}\" snapshotpassword=\"${9}\" snapshoturl=\"${10}\" url=\"${11}\" stretch=\"${12:true,false}\" receivestateselect=\"${13}\" receivestatevideourl=\"${14}\" receivestatepositionchange=\"${15}\" receivestatesourcetype=\"${16}\" receivestateuserid=\"${17}\" receivestatepassword=\"${18}\" receivestatesnapshoturl=\"${19}\" receivestatesnapshotrefreshrate=\"${20}\" receivestatesnapshotuserid=\"${21}\" receivestatesnapshotpassword=\"${22}\" receivestateplay=\"${23}\" zindex=\"${24}\" snapshotrefreshrate=\"${25}\">",
              "</ch5-video>$0"
            ]
          }
        ],
        "description": "Ch5 Video offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Video",
        "tagName": "ch5-video"
      }
    ]
  }
}