{
  "version": "2.8.0",
  "componentsVersion": "2.9.1",
  "htmlElements": {
    "common": {
      "attributes": [
        {
          "documentation": [
            "`data-ch5-show` custom attribute",
            "***",
            "Specifies whether or not an element is visible based upon the value of the state. Works with standard HTML elements. ",
            "The data-ch5-noshow-type attribute can be supplied to set how an HTML element will be hidden from view."
          ],
          "value": [],
          "name": "data-ch5-show"
        },
        {
          "documentation": [
            "`data-ch5-noshow-type` custom attribute",
            "***",
            "The 'data-ch5-noshow-type' custom attribute is related to the HTML custom attribute 'data-ch5-show' ",
            "and overrides the way in which a Component is made invisible. ",
            "The Crestron Components library will default the 'noshow' type based upon the element type."
          ],
          "value": [
            "visibility",
            "display",
            "remove"
          ],
          "name": "data-ch5-noshow-type"
        },
        {
          "documentation": [
            "`data-ch5-appendclass` custom attribute",
            "***",
            "The 'data-ch5-appendclass' custom HTML attribute appends the value of a signal to the 'class' attribute ",
            "on a standard HTML element. A change in signal value will remove the prior value of the ",
            "signal and append the new value."
          ],
          "value": [],
          "name": "data-ch5-appendclass"
        },
        {
          "documentation": [
            "`data-ch5-innerhtml` custom attribute",
            "***",
            "The 'data-ch5-innerhtml' custom HTML attribute allows for dynamic HTML content to be applied to ",
            "standard HTML elements such as <div>. This is a very powerful construct that, when used incorrectly, ",
            "can lead to functional and performance issues if used to inject badly-formed HTML. The ",
            "attribute value is signalScript as described in the ch5.subscribeStateScript utility function description."
          ],
          "value": [],
          "name": "data-ch5-innerhtml"
        },
        {
          "documentation": [
            "`data-ch5-showpulse` custom attribute",
            "***",
            "Works similarly to data-ch5-show, but does not offer toggle functionality (can only make the elements visible). ",
            "Works with standard HTML elements. ",
            "The data-ch5-noshow-type attribute can be supplied to set how an HTML element will be hidden from view."
          ],
          "value": [],
          "name": "data-ch5-showpulse"
        },
        {
          "documentation": [
            "`data-ch5-enable` custom attribute",
            "***",
            "Specifies whether or not an element is enable based upon the value of the state. Works with standard HTML elements. "
          ],
          "value": [],
          "name": "data-ch5-enable"
        },
        {
          "documentation": [
            "`data-ch5-textcontent` custom attribute",
            "***",
            "The 'data-ch5-textcontent' custom HTML attribute allows for dynamic text content to be applied to ",
            "standard HTML elements such as <p> and <h1-6>. The attribute value is signalScript as described in the ",
            "ch5.subscribeStateScript utility function description."
          ],
          "value": [],
          "name": "data-ch5-textcontent"
        },
        {
          "documentation": [
            "`data-ch5-appendstyle` custom attribute",
            "***",
            "The 'data-ch5-appendstyle' custom HTML attribute appends the value of a signal to the 'style' attribute ",
            "on a standard HTML element. A signal value change will remove the prior value of the ",
            "signal and append the new value."
          ],
          "value": [],
          "name": "data-ch5-appendstyle"
        },
        {
          "documentation": [
            "`data-ch5-hidepulse` custom attribute",
            "***",
            "Works similarly to data-ch5-show, but does not offer toggle functionality (can only hide the elements). ",
            "Works with standard HTML elements. ",
            "The data-ch5-noshow-type attribute can be supplied to set how an HTML element will be hidden from view."
          ],
          "value": [],
          "name": "data-ch5-hidepulse"
        },
        {
          "documentation": [
            "`data-ch5-keep-sig-subscription` custom attribute",
            "***",
            "Keeps the state subscription key generated by hidepulse, showpulse, or show custom attributes."
          ],
          "value": [],
          "name": "data-ch5-keep-sig-subscription"
        },
        {
          "documentation": [
            "`data-ch5-i18n` custom attribute",
            "***",
            "The 'data-ch5-i18n' custom HTML attribute allows for text content translation to be applied to ",
            "standard HTML elements."
          ],
          "value": [],
          "name": "data-ch5-i18n"
        }
      ]
    },
    "elements": []
  },
  "ch5Elements": {
    "common": {
      "attributes": []
    },
    "elements": [
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`startAnimating` attribute",
              "***",
              "Starts or stops playing the animation object."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "startanimating",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "boolean"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Select the size of the animation object from small, regular, large and x-large."
            ],
            "value": [
              "regular",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": "regular",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`animationStyle` attribute",
              "***",
              "The styled graphics that determine the look/feel of this object. Each state of the style chosen corresponds to a frame of the animation. Default value is ring"
            ],
            "value": [
              "ring",
              "spinner",
              "roller"
            ],
            "name": "animationstyle",
            "default": "ring",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`receiveStateAnimate` attribute",
              "***",
              "Select a digital join receive feedback from the control system. When the signal is high the animation will play. If the signal is low, the animation will stop."
            ],
            "value": [],
            "name": "receivestateanimate",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateFramesPerSecond` attribute",
              "***",
              "Sets an integer value representing the number of frames that are played every second. Default is 3 frames per second."
            ],
            "value": [],
            "name": "receivestateframespersecond",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateAnimationStyle` attribute",
              "***",
              "Select an serial join to receive desired animation style to be displayed from the control system. If no join is selected, the animation object will display the default style."
            ],
            "value": [],
            "name": "receivestateanimationstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-animation` element",
          "***",
          "An animation object is designed to provide options to add startAnimating, size, animationStyle, receiveStateAnimate, receiveStateFramesPerSecond and receiveStateAnimationStyle"
        ],
        "snippets": [
          {
            "prefix": "ch5-animation:blank",
            "description": "Crestron Animation",
            "body": [
              "<ch5-animation>",
              "</ch5-animation>$0"
            ]
          },
          {
            "prefix": "ch5-animation:default",
            "description": "Crestron Animation",
            "body": [
              "<ch5-animation startAnimating=\"true\"",
              "\tanimationStyle=\"ring\"",
              "\tsize=\"regular\">",
              "</ch5-animation>$0"
            ]
          },
          {
            "prefix": "ch5-animation:all-attributes",
            "description": "Crestron Animation (All Attributes)",
            "body": [
              "<ch5-animation startAnimating=\"true\"",
              "\tanimationStyle=\"ring\"",
              "\tsize=\"regular\"",
              "\treceiveStateAnimate=\"${4}\"",
              "\treceiveStateFramesPerSecond=\"${5}\"",
              "\treceiveStateAnimationStyle=\"${6}\">",
              "</ch5-animation>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "An animation object is a theme-based object that support variable frame rates and automatic playback at runtime.",
        "name": "Ch5 Animation",
        "tagName": "ch5-animation",
        "role": "animation",
        "componentVersion": "2.1.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`url` attribute",
              "***",
              "For when one or more image URLs will be used as the background.",
              "Supported image types include JPEG, PNG, SVG, and BMP.",
              "Animated GIFs are not supported. Multiple URLs can be provided ",
              "separated by | (vertical bar) to have images cycle over time."
            ],
            "value": [],
            "name": "url",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "ImageUrl"
          },
          {
            "documentation": [
              "`backgroundcolor` attribute",
              "***",
              "Use when one or more background colors will be used via the CSS background-color property ",
              "syntax including color names, #hex codes, rgb(), rgba(), hsl() and hsla().",
              "Multiple colors can be provided separated by a | (vertical bar) to have colors ",
              "cycled based on the time defined. A black color will be used for invalid input.",
              "This attribute is superseded by the url attribute."
            ],
            "value": [],
            "name": "backgroundcolor",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`repeat` attribute",
              "***",
              "The default value is null. ",
              "The repeat property sets how a background image will be repeated. Valid values: 'no-repeat', ",
              "'repeat-x', 'repeat-y', and 'repeat'.",
              "The value 'repeat-x' repeats image horizontally, 'repeat-y' repeats the image vertically, and 'repeat' ",
              "repeats both vertically and horizontally. The last image will be clipped if it does not fit."
            ],
            "value": [
              "no-repeat",
              "repeat",
              "repeat-x",
              "repeat-y"
            ],
            "name": "repeat",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`scale` attribute",
              "***",
              "The default value is 'stretch'. Valid values: 'stretch', 'fill', 'fit'.",
              "Defines how an image will fill the component when the ",
              "component and the image do not have the same aspect ratio.",
              "'stretch' will transform the image to have the same aspect ratio as the component, ",
              "'fill' will size the image to leave no extra space ",
              "but will crop off either the top and bottom or left and right to ",
              "fill the component completely, and 'fit' will preserve the image aspect ratio by ",
              "centering the image and leaving either a letter box on the top and bottom or ",
              "a pillar box on the left and right. For fit attribute, see the related ",
              "imgBackgroundColor attribute.",
              "This attribute will be superseded by the repeat attribute if both are provided."
            ],
            "value": [
              "stretch",
              "fill",
              "fit"
            ],
            "name": "scale",
            "default": "stretch",
            "hideWhen": [],
            "showWhen": [
              {
                "repeat": null
              }
            ],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`refreshrate` attribute",
              "***",
              "The default value is 600. Min value is 10 and max value is 604800.",
              "When more than one image is provided in the url attribute, ",
              "this attribute provides the duration in seconds that each ",
              "image will be displayed. Values outside of the min and max ",
              "will be capped at the closest valid value.",
              "This attribute supersedes the scale attribute if both are provided."
            ],
            "value": [],
            "name": "refreshrate",
            "default": "600",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`imgbackgroundcolor` attribute",
              "***",
              "The default value is 'black'. ",
              "Related to the scale attribute having a value of 'fit'. ",
              "This attribute defines the color of the pillar box or ",
              "letter box borders when the image aspect ratio is not the ",
              "same as the component aspect ratio."
            ],
            "value": [],
            "name": "imgbackgroundcolor",
            "default": "black",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`transitioneffect` attribute",
              "***",
              "The default value is 'ease'. ",
              "When more than one image or color is provided in url or backgroundcolor attribute, ",
              "this attribute provide the type of transition using the CSS transition-timing-syntax ",
              "property syntax. See the related attribute transition-duration."
            ],
            "value": [
              "ease",
              "linear",
              "ease-in",
              "ease-out",
              "ease-in-out"
            ],
            "name": "transitioneffect",
            "default": "ease",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`transitionduration` attribute",
              "***",
              "The default value is '1s'. ",
              "when more than one image or color is provided in url or backgroundcolor attribute, ",
              "this attribute provides the duration of the transition ",
              "using CSS transition-duration syntax."
            ],
            "value": [],
            "name": "transitionduration",
            "default": "1s",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestaterefreshrate` attribute",
              "***",
              "When defined, this will set the refreshRate attribute."
            ],
            "value": [],
            "name": "receivestaterefreshrate",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateurl` attribute",
              "***",
              "When defined, this will set the url attribute.  This attribute",
              " takes precedence over backgroundcolor, url, and receiveStateBackgroundColor ",
              " attributes."
            ],
            "value": [],
            "name": "receivestateurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatebackgroundcolor` attribute",
              "***",
              "When defined, this will set the backgroundColor attribute. This attribute",
              " is superseded by the receivestateurl attribute."
            ],
            "value": [],
            "name": "receivestatebackgroundcolor",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-background` element",
          "***",
          "For backgrounds, standard HTML has a many available styles to provide backgrounds for HTML elements.",
          "CH5 Video will be implemented using Alpha Blending, where portions of the HTML will become invisible to allow video ",
          "playing below the HTML layer to be visible to the user. As such, to support background images and",
          "colors of HTML element views that will be in CH5 projects, the ch5-background component provides much of the same",
          "functionality, but works with the video component to make portions of the screen invisible to allow the video to appear."
        ],
        "snippets": [
          {
            "prefix": "ch5-background:blank",
            "description": "Crestron Background (Blank)",
            "body": [
              "<ch5-background>",
              "</ch5-background>$0"
            ]
          },
          {
            "prefix": "ch5-background:default",
            "description": "Crestron Background (Default)",
            "body": [
              "<ch5-background url=\"${1:http://someServer/background.png}\">",
              "</ch5-background>$0"
            ]
          },
          {
            "prefix": "ch5-background:all-attributes",
            "description": "Crestron Background (All Attributes)",
            "body": [
              "<ch5-background url=\"${1:http://someServer/background.png}\"",
              "\trefreshrate=\"${2:10}\"",
              "\tbackgroundcolor=\"${3:black}\"",
              "\trepeat=\"${4|no-repeat,repeat,repeat-x,repeat-y|}\"",
              "\tscale=\"${5|stretch,fill,fit|}\"",
              "\timgbackgroundcolor=\"${6:black}\"",
              "\ttransitioneffect=\"${7:ease}\"",
              "\ttransitionduration=\"${8:1s}\"",
              "\treceivestateurl=\"${9}\"",
              "\treceivestatebackgroundcolor=\"${10}\"",
              "\treceivestaterefreshrate=\"${11}\">",
              "</ch5-background>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 Background offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Background",
        "tagName": "ch5-background",
        "role": "region",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [],
        "documentation": [
          "`ch5-button-label` element",
          "***",
          "A child element designed to capture the label for Ch5 Button component."
        ],
        "snippets": [
          {
            "prefix": "ch5-button-label:blank",
            "description": "Crestron Button Label",
            "body": [
              "<ch5-button-label>",
              "\t<template>",
              "\t$1",
              "\t</template>",
              "</ch5-button-label>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-jointotext-boolean",
            "optional": true,
            "childElements": []
          },
          {
            "tagName": "ch5-jointotext-numeric",
            "optional": true,
            "childElements": []
          },
          {
            "tagName": "ch5-jointotext-string",
            "optional": true,
            "childElements": []
          }
        ],
        "description": "Ch5 Button Label is a child node for <ch5-button>, <ch5-button-mode> and <ch5-button-mode-state>.",
        "name": "Ch5 Button Label",
        "tagName": "ch5-button-label",
        "role": "button",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`labelinnerhtml` attribute",
              "***",
              "The labelInnerHTML of the button element."
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EncodedHTML",
            "hidden": true
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Valid values: 'default', 'primary', 'info', 'text', 'danger', 'warning', 'success', 'secondary'.",
              "Overrides the appearance of the button with alternative CSS ",
              "defined in classes defined with ch5-button--type, where type is ",
              "the value of the property. If no 'type' is provided, the type of ",
              "'default' is used."
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "type",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`iconclass` attribute",
              "***",
              "The icon class."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "IconClass"
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "The default value is 'first'.",
              "Valid values: 'first', 'last', 'top', 'bottom'.",
              "The icon position relative to the label."
            ],
            "value": [
              "first",
              "last",
              "top",
              "bottom"
            ],
            "name": "iconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`iconurl` attribute",
              "***",
              "The attribute used for add a SVG image."
            ],
            "value": [],
            "name": "iconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "ImageURL"
          },
          {
            "documentation": [
              "`iconUrlFillType` attribute",
              "***",
              "Sets the icon url fill type. Default value is 'null'. Applicable values are 'null', 'stretch', 'stretch-aspect', 'center', 'tile', 'initial'. Uses the css property background-size for the implementation."
            ],
            "value": [
              "stretch",
              "stretch-aspect",
              "center",
              "tile",
              "initial"
            ],
            "name": "iconurlfilltype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "The attribute used for add a SVG image."
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "The attribute used for add a SVG image."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`checkboxposition` attribute",
              "***",
              "The default value is left.",
              "This property is used to set the position of a checkbox in a button. The value left would set the checkbox to the left of the button,",
              " and the value right would set the checkbox to the right of the button."
            ],
            "value": [
              "left",
              "right"
            ],
            "name": "checkboxposition",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`halignlabel` attribute",
              "***",
              "Valid values: 'left', 'right', 'center'.",
              "When the hAlignLabel property is set, the label and the icon of the button are horizontally aligned. ",
              "The center property sets the horizontal alignment of the label to the center of the button. ",
              "The left property sets the horizontal alignment of the label to the left of the button. ",
              "The right property sets the horizontal alignment of the label to the right of the button. "
            ],
            "value": [
              "left",
              "right",
              "center"
            ],
            "name": "halignlabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`valignlabel` attribute",
              "***",
              "Valid values: 'top', 'bottom', 'middle'.",
              "When the vAlignLabel property is set, the label and the icon of the button are vertically aligned. ",
              "The middle property sets the horizontal alignment of the label to the middle of the button. ",
              "The top property sets the horizontal alignment of the label to the top of the button. ",
              "The bottom property sets the horizontal alignment of the label to the bottom of the button. "
            ],
            "value": [
              "middle",
              "top",
              "bottom"
            ],
            "name": "valignlabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          }
        ],
        "documentation": [
          "`ch5-button-mode` element",
          "***",
          "A child element designed to capture mode level attributes for Ch5 Button component."
        ],
        "snippets": [
          {
            "prefix": "ch5-button-mode:blank",
            "description": "Crestron Button Mode",
            "body": [
              "<ch5-button-mode>",
              "</ch5-button-mode>$0"
            ]
          },
          {
            "prefix": "ch5-button-mode:all-attributes",
            "description": "Crestron Button Mode (All Attributes)",
            "body": [
              "<ch5-button-mode",
              "\ttype=\"${1|default,primary,info,text,danger,warning,success,secondary|}\"",
              "\tcustomClass=\"${2:customClass}\"",
              "\tcustomStyle=\"${3:customStyle}\"",
              "\tcheckboxposition=\"${4|left,right|}\"",
              "\thalignlabel=\"${5|center,left,right|}\"",
              "\tvalignlabel=\"${6|middle,top,bottom|}\"",
              "\ticonposition=\"${7|first,last,top,bottom|}\"",
              "\ticonClass=\"${8:iconClass}\"",
              "\ticonUrl=\"${9:iconUrl}\">",
              "</ch5-button-mode>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-button-label",
            "optional": true,
            "childElements": [
              {
                "tagName": "template",
                "optional": false,
                "childElements": [
                  {
                    "tagName": "ch5-jointotext-boolean",
                    "optional": true,
                    "childElements": []
                  },
                  {
                    "tagName": "ch5-jointotext-numeric",
                    "optional": true,
                    "childElements": []
                  },
                  {
                    "tagName": "ch5-jointotext-string",
                    "optional": true,
                    "childElements": []
                  }
                ]
              }
            ]
          },
          {
            "tagName": "ch5-button-mode-state",
            "optional": true,
            "childElements": [
              {
                "tagName": "ch5-button-label",
                "optional": true,
                "childElements": [
                  {
                    "tagName": "template",
                    "optional": false,
                    "childElements": [
                      {
                        "tagName": "ch5-jointotext-boolean",
                        "optional": true,
                        "childElements": []
                      },
                      {
                        "tagName": "ch5-jointotext-numeric",
                        "optional": true,
                        "childElements": []
                      },
                      {
                        "tagName": "ch5-jointotext-string",
                        "optional": true,
                        "childElements": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "description": "Ch5 Button Mode is a child node for <ch5-button>.",
        "name": "Ch5 Button Mode",
        "tagName": "ch5-button-mode",
        "role": "button",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`labelinnerhtml` attribute",
              "***",
              "The labelInnerHTML of the button element."
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EncodedHTML",
            "hidden": true
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Valid values: 'default', 'primary', 'info', 'text', 'danger', 'warning', 'success', 'secondary'.",
              "Overrides the appearance of the button with alternative CSS ",
              "defined in classes defined with ch5-button--type, where type is ",
              "the value of the property. If no 'type' is provided, the type of ",
              "'default' is used."
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "type",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`iconclass` attribute",
              "***",
              "The icon class."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "IconClass"
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "The default value is 'first'.",
              "Valid values: 'first', 'last', 'top', 'bottom'.",
              "The icon position relative to the label."
            ],
            "value": [
              "first",
              "last",
              "top",
              "bottom"
            ],
            "name": "iconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`iconurl` attribute",
              "***",
              "The attribute used for add a SVG image."
            ],
            "value": [],
            "name": "iconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "ImageURL"
          },
          {
            "documentation": [
              "`iconUrlFillType` attribute",
              "***",
              "Sets the icon url fill type. Default value is 'null'. Applicable values are 'null', 'stretch', 'stretch-aspect', 'center', 'tile', 'initial'. Uses the css property background-size for the implementation."
            ],
            "value": [
              "stretch",
              "stretch-aspect",
              "center",
              "tile",
              "initial"
            ],
            "name": "iconurlfilltype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "The attribute used for add a SVG image."
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "The attribute used for add a SVG image."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`checkboxposition` attribute",
              "***",
              "The default value is left.",
              "This property is used to set the position of a checkbox in a button. The value left would set the checkbox to the left of the button,",
              " and the value right would set the checkbox to the right of the button."
            ],
            "value": [
              "left",
              "right"
            ],
            "name": "checkboxposition",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`halignlabel` attribute",
              "***",
              "Valid values: 'left', 'right', 'center'.",
              "When the hAlignLabel property is set, the label and the icon of the button are horizontally aligned. ",
              "The center property sets the horizontal alignment of the label to the center of the button. ",
              "The left property sets the horizontal alignment of the label to the left of the button. ",
              "The right property sets the horizontal alignment of the label to the right of the button. "
            ],
            "value": [
              "left",
              "right",
              "center"
            ],
            "name": "halignlabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`valignlabel` attribute",
              "***",
              "Valid values: 'top', 'bottom', 'middle'.",
              "When the vAlignLabel property is set, the label and the icon of the button are vertically aligned. ",
              "The middle property sets the horizontal alignment of the label to the middle of the button. ",
              "The top property sets the horizontal alignment of the label to the top of the button. ",
              "The bottom property sets the horizontal alignment of the label to the bottom of the button. "
            ],
            "value": [
              "middle",
              "top",
              "bottom"
            ],
            "name": "valignlabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`state` attribute",
              "***",
              "Valid values: 'normal', 'pressed', 'selected'.",
              "This attribute is used to define the ch5-button-mode-state attributes on the basis of the state of the parent ch5-button. ",
              "If the button is neither in the 'pressed' state nor in the 'selected' state, then the button is considered to be in 'normal' state. ",
              "The attributes of 'state' as 'normal' are considered in this case for the ch5-button. ",
              "If the button is in the 'pressed' state, then the attributes of 'state' as 'pressed' are considered in this case for the ch5-button.  ",
              "If the button is in the 'selected' state, then the attributes of 'state' as 'selected' are considered in this case for the ch5-button.  "
            ],
            "value": [
              "normal",
              "pressed",
              "selected"
            ],
            "name": "state",
            "default": "normal",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          }
        ],
        "documentation": [
          "`ch5-button-mode-state` element",
          "***",
          "A child element designed to capture state level attributes for Ch5 Button component."
        ],
        "snippets": [
          {
            "prefix": "ch5-button-mode-state:blank",
            "description": "Crestron Button Mode State",
            "body": [
              "<ch5-button-mode-state>",
              "</ch5-button-mode-state>$0"
            ]
          },
          {
            "prefix": "ch5-button-mode-state:all-attributes",
            "description": "Crestron Button Mode State (All Attributes)",
            "body": [
              "<ch5-button-mode-state",
              "\tstate=\"${1|normal,pressed,selected|}\"",
              "\ttype=\"${2|default,primary,info,text,danger,warning,success,secondary|}\"",
              "\tcustomClass=\"${3:customClass}\"",
              "\tcustomStyle=\"${4:customStyle}\"",
              "\tcheckboxposition=\"${5|left,right|}\"",
              "\thalignlabel=\"${6|center,left,right|}\"",
              "\tvalignlabel=\"${7|middle,top,bottom|}\"",
              "\ticonposition=\"${8|first,last,top,bottom|}\"",
              "\ticonClass=\"${9:iconClass}\"",
              "\ticonUrl=\"${10:iconUrl}\">",
              "</ch5-button-mode-state>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-button-mode-state",
            "optional": true,
            "childElements": [
              {
                "tagName": "ch5-button-label",
                "optional": true,
                "childElements": [
                  {
                    "tagName": "template",
                    "optional": false,
                    "childElements": [
                      {
                        "tagName": "ch5-jointotext-boolean",
                        "optional": true,
                        "childElements": []
                      },
                      {
                        "tagName": "ch5-jointotext-numeric",
                        "optional": true,
                        "childElements": []
                      },
                      {
                        "tagName": "ch5-jointotext-string",
                        "optional": true,
                        "childElements": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "description": "Ch5 Button Mode State is a child node for <ch5-button-mode>.",
        "name": "Ch5 Button Mode State",
        "tagName": "ch5-button-mode-state",
        "role": "button",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Overrides the appearance of the button with alternative CSS that is defined in classes defined with ch5-button--size, where size is the value of the property. If no `size` is provided, type of `default` is used."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": "regular",
            "hideWhen": [
              {
                "stretch": [
                  "both",
                  "height",
                  "width"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "The label of the button element."
            ],
            "value": [],
            "name": "label",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`labelinnerhtml` attribute",
              "***",
              "The labelInnerHTML of the button element."
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EncodedHTML",
            "hidden": true
          },
          {
            "documentation": [
              "`iconClass` attribute",
              "***",
              "The iconclass attribute with Font Awesome icons and Material Icons. We can declare more than one css class in the iconClass attribute."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "IconClass"
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "The default value is 'first'.",
              "Valid values: 'first', 'last', 'top', 'bottom'.",
              "The icon position relative to the label."
            ],
            "value": [
              "first",
              "last",
              "top",
              "bottom"
            ],
            "name": "iconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`iconurl` attribute",
              "***",
              "The attribute used for add a SVG image."
            ],
            "value": [],
            "name": "iconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "ImageURL"
          },
          {
            "documentation": [
              "`mode` attribute",
              "***",
              "The default value is 0.",
              "This property is used to set or get the mode of the ch5-button in a multi-mode environment. ",
              "The maximum value that can be set is 99."
            ],
            "value": [],
            "name": "mode",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 99
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`checkboxshow` attribute",
              "***",
              "The default value is false.",
              "This property is used to display or hide a checkbox. If set to true, a checkbox is displayed and ",
              "'ch5-button__checkbox' will be applied as the CSS class on the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "checkboxshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`checkboxposition` attribute",
              "***",
              "The default value is left.",
              "This property is used to set the position of a checkbox in a button. The value left would set the checkbox to the left of the button,",
              " and the value right would set the checkbox to the right of the button."
            ],
            "value": [
              "left",
              "right"
            ],
            "name": "checkboxposition",
            "default": "left",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "The default value is 'horizontal'. Valid values: 'horizontal', 'vertical'.",
              "Positions the control elements in a horizontal or vertical orientation.",
              "For vertical alignment, it will apply a CSS class that will rotate the ",
              "component -90 degrees (270 degrees clockwise, 90 degrees counter clockwise)."
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation",
            "default": "horizontal",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`shape` attribute",
              "***",
              "The default value is 'rounded-rectangle'. Valid values: 'rounded-rectangle', ",
              "'rectangle', 'tab', 'circle', 'oval'. The shape of the button."
            ],
            "value": [
              "rounded-rectangle",
              "rectangle",
              "tab",
              "circle",
              "oval"
            ],
            "name": "shape",
            "default": "rounded-rectangle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Valid values: 'width', 'height', 'both'.",
              "When the stretch property is set, the button element inherits the ",
              "width and/or height of the container. If stretch=height is used, ",
              "the button will be responsive based on the label length until it ",
              "reaches the max-width of the container. If stretch=width is ",
              "applied, there is no responsiveness after reaching the max-width, and ",
              "the text will overflow. The same applies if stretch=both is used."
            ],
            "value": [
              "both",
              "width",
              "height"
            ],
            "name": "stretch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Valid values: 'default', 'primary', 'info', 'text', 'danger', 'warning', 'success', 'secondary'.",
              "Overrides the appearance of the button with alternative CSS ",
              "defined in classes defined with ch5-button--type, where type is ",
              "the value of the property. If no 'type' is provided, the type of ",
              "'default' is used."
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "type",
            "default": "default",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`halignlabel` attribute",
              "***",
              "Valid values: 'left', 'right', 'center'.",
              "When the hAlignLabel property is set, the label and the icon of the button are horizontally aligned. ",
              "The center property sets the horizontal alignment of the label to the center of the button. ",
              "The left property sets the horizontal alignment of the label to the left of the button. ",
              "The right property sets the horizontal alignment of the label to the right of the button. "
            ],
            "value": [
              "left",
              "right",
              "center"
            ],
            "name": "halignlabel",
            "default": "center",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`valignlabel` attribute",
              "***",
              "Valid values: 'top', 'bottom', 'middle'.",
              "When the vAlignLabel property is set, the label and the icon of the button are vertically aligned. ",
              "The middle property sets the vertical alignment of the label to the middle of the button. ",
              "The top property sets the vertical alignment of the label to the top of the button. ",
              "The bottom property sets the vertical alignment of the label to the bottom of the button. "
            ],
            "value": [
              "middle",
              "top",
              "bottom"
            ],
            "name": "valignlabel",
            "default": "middle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`formtype` attribute",
              "***",
              "Valid values: 'cancel' and 'submit'. ",
              "submit: The value submit,submits the form data. ",
              "cancel: The value cancel, reset all the controls of form to their initial values."
            ],
            "value": [
              "cancel",
              "submit"
            ],
            "name": "formtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`receivestatemode` attribute",
              "***",
              "When received, applies a value to the mode attribute from the signal."
            ],
            "value": [],
            "name": "receivestatemode",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateselected` attribute",
              "***",
              "When received, applies a true value applied by the selected class (ch5-button--selected)."
            ],
            "value": [],
            "name": "receivestateselected",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatelabel` attribute",
              "***",
              "When received, applies the value on the label."
            ],
            "value": [],
            "name": "receivestatelabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatescriptlabelhtml` attribute",
              "***",
              "Allows the signal script evaluation to be applied to the ",
              "button.inner HTML class. Allows for multiline, multistyled labels."
            ],
            "value": [],
            "name": "receivestatescriptlabelhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonclick` attribute",
              "***",
              "Sends an event on click or tap (mouse or swipe up and down quickly).",
              "Use this when the control system takes an action on the rising edge from false to true of a boolean digital event.",
              "Examples include the SIMPL Logic Symbol for Toggle a with description of ",
              "Digital input <clock> 'High/1 (rising edge) = Toggle; Low/0 = No effect'."
            ],
            "value": [],
            "name": "sendeventonclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventontouch` attribute",
              "***",
              "Sends a boolean true event when the screen is tapped and a boolean false event when released.",
              "Use this when the control system takes an action on a level-sensitive boolean digital event.",
              "Examples include the SIMPL Logic Symbol for Analog Ramp with a description of ",
              "Digital input <up> 'High/1 (level sensitive) = Ramp up; Low/0 = Stop ramp'."
            ],
            "value": [],
            "name": "sendeventontouch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateiconclass` attribute",
              "***",
              "The icon class received from the control system."
            ],
            "value": [],
            "name": "receivestateiconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatetype` attribute",
              "***",
              "After receiving a stateType value from control system, this value is applied to the type attribute.",
              "See description of the type attribute."
            ],
            "value": [],
            "name": "receivestatetype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateiconurl` attribute",
              "***",
              "After receiving stateIconUrl value from control system, this value is applied to the iconUrl attribute. ",
              "See description of the iconUrl attribute."
            ],
            "value": [],
            "name": "receivestateiconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`customclasspressed` attribute",
              "***",
              "The name of the CSS class applied while the button is pressed by a user."
            ],
            "value": [],
            "name": "customclasspressed",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclassdisabled` attribute",
              "***",
              "The name of the CSS class applied while the button is disabled."
            ],
            "value": [],
            "name": "customclassdisabled",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`selected` attribute",
              "***",
              "The default value is false.",
              "This property reflects the selected state of the component. If set to true, ",
              "'ch5-button--selected' will be applied as the CSS class on the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "selected",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`pressed` attribute",
              "***",
              "The default value is false.",
              "This property reflects the pressed state of the component. If set to true, ",
              "'ch5-button--pressed' will be applied as the CSS class on the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "pressed",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`backgroundImageUrl` attribute",
              "***",
              "Sets the image to be displayed as the background for the button. The attribute type is String. default value is empty."
            ],
            "value": [],
            "name": "backgroundimageurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`backgroundImageFillType` attribute",
              "***",
              "Sets the background image for button. Enum - Default value is 'stretch-aspect'. Applicable values are 'stretch', 'stretch-aspect', 'center', 'tile'. Uses the css property background-size for the implementation."
            ],
            "value": [
              "stretch-aspect",
              "stretch",
              "center",
              "tile"
            ],
            "name": "backgroundimagefilltype",
            "default": "stretch-aspect",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`iconUrlFillType` attribute",
              "***",
              "Sets the icon url fill type. Default value is 'null'. Applicable values are 'null', 'stretch', 'stretch-aspect', 'center', 'tile', 'initial'. Uses the css property background-size for the implementation."
            ],
            "value": [
              "stretch",
              "stretch-aspect",
              "center",
              "tile",
              "initial"
            ],
            "name": "iconurlfilltype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`receiveStateBackgroundImageUrl` attribute",
              "***",
              "Sets the image to be displayed as the background for the button. The attribute type with String response."
            ],
            "value": [],
            "name": "receivestatebackgroundimageurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSGIconNumeric` attribute",
              "***",
              "This would contain a mapping on analog joins to each of the sg icons. receiveStateSGIconString takes preference over receiveStateSGIconNumeric incase both are provided. receiveStateSGIconString, and receiveStateSGIconNumeric take precedence over receiveStateIconClass and receiveStateIconUrl"
            ],
            "value": [],
            "name": "receivestatesgiconnumeric",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSGIconString` attribute",
              "***",
              "This would contain a mapping of serial joins to each of the sg icons. receiveStateSGIconString takes preference over receiveStateSGIconNumeric incase both are provided. receiveStateSGIconString, and receiveStateSGIconNumeric take precedence over receiveStateIconClass and receiveStateIconUrl"
            ],
            "value": [],
            "name": "receivestatesgiconstring",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sgIconTheme` attribute",
              "***",
              "This will contain an enumeration of 5 values - icons-sg, icons-lg, mediatransports-accents, media-transports-light, media-transports-dark. Default. value is icon-lg."
            ],
            "value": [
              "icons-lg",
              "icons-sm",
              "media-transports-accents",
              "media-transports-light",
              "media-transports-dark"
            ],
            "name": "sgicontheme",
            "default": "icon-lg",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`onpress` attribute",
              "***",
              "Runs when a press event is initiated."
            ],
            "value": [],
            "name": "onpress",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`onrelease` attribute",
              "***",
              "Runs when a release event is initiated."
            ],
            "value": [],
            "name": "onrelease",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclassselected` attribute",
              "***",
              "Specifies a custom class for the selected state of the button."
            ],
            "value": [],
            "name": "customclassselected",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          }
        ],
        "documentation": [
          "`ch5-button` element",
          "***",
          "A custom component designed to provide options to add icons, label, text, multi-select among other powerful options."
        ],
        "snippets": [
          {
            "prefix": "ch5-button:blank",
            "description": "Crestron Button",
            "body": [
              "<ch5-button>",
              "</ch5-button>$0"
            ]
          },
          {
            "prefix": "ch5-button:default",
            "description": "Crestron Button",
            "body": [
              "<ch5-button id=\"btn_${1:id}\"",
              "\tlabel=\"${2:Crestron Button}\"",
              "\tsendeventonclick=\"${3:btn_${1}_clicked}\">",
              "</ch5-button>$0"
            ]
          },
          {
            "prefix": "ch5-button:all-attributes",
            "description": "Crestron Button (All Attributes)",
            "body": [
              "<ch5-button id=\"btn_${1:id}\"",
              "\tlabel=\"${2:Crestron Button}\"",
              "\ttype=\"${3|default,primary,info,text,danger,warning,success,secondary|}\"",
              "\tcustomClass=\"${4:customClass}\"",
              "\tcustomStyle=\"${5:customStyle}\"",
              "\tshape=\"${6|rounded-rectangle,rectangle,tab,circle,oval|}\"",
              "\tsize=\"${7|regular,x-small,small,large,x-large|}\"",
              "\tstretch=\"${8|both,width,height|}\"",
              "\tcheckboxshow=\"${9|true,false|}\"",
              "\tcheckboxposition=\"${10|left,right|}\"",
              "\thalignlabel=\"${11|center,left,right|}\"",
              "\tvalignlabel=\"${12|middle,top,bottom|}\"",
              "\ticonposition=\"${13|first,last,top,bottom|}\"",
              "\ticonclass=\"${14:iconClass}\"",
              "\torientation=\"${15|horizontal,vertical|}\"",
              "\tsendeventonclick=\"${16:btn_${1}_clicked}\"",
              "\tsendeventontouch=\"${17:btn_${1}_touched}\"",
              "\treceivestateselected=\"${18}\"",
              "\treceivestatelabel=\"${19}\"",
              "\treceivestatescriptlabelhtml=\"${20}\"",
              "\ticonurl=\"${21}\"",
              "\tmode=\"${22}\"",
              "\tformtype=\"${23}\"",
              "\treceivestatemode=\"${24}\"",
              "\treceivestateiconclass=\"${25}\"",
              "\treceivestatetype=\"${26}\"",
              "\treceivestateiconurl=\"${27}\"",
              "\tcustomclasspressed=\"${28}\"",
              "\tcustomclassdisabled=\"${29}\"",
              "\tselected=\"${30}\"",
              "\tpressed=\"${31}\"",
              "\tbackgroundimageurl=\"${32:}\"",
              "\tbackgroundimagefilltype=\"${33:stretch-aspect}\"",
              "\treceivestatesgiconnumeric=\"${34}\"",
              "\treceivestatesgiconstring=\"${35}\"",
              "\tsgicontheme=\"${36|icons-lg, icons-sm, media-transports-accents, media-transports-light, media-transports-dark|}\"",
              "\treceivestatebackgroundimageurl=\"${37:}\">",
              "</ch5-button>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-button-label",
            "optional": true,
            "childElements": [
              {
                "tagName": "template",
                "optional": false,
                "childElements": []
              }
            ]
          },
          {
            "tagName": "ch5-button-mode",
            "optional": true,
            "childElements": [
              {
                "tagName": "ch5-button-label",
                "optional": true,
                "childElements": [
                  {
                    "tagName": "template",
                    "optional": false,
                    "childElements": []
                  }
                ]
              },
              {
                "tagName": "ch5-button-mode-state",
                "optional": true,
                "childElements": [
                  {
                    "tagName": "ch5-button-label",
                    "optional": true,
                    "childElements": [
                      {
                        "tagName": "template",
                        "optional": false,
                        "childElements": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "description": "Ch5 Button offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Button",
        "tagName": "ch5-button",
        "role": "button",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "The default value is 'horizontal'. Valid values: 'horizontal' or 'vertical'. Positions the list elements in a horizontal or vertical orientation."
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation",
            "default": "horizontal",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`scrollbar` attribute",
              "***",
              "The default value is false. If scrollbar is true, then shows a scrollbar for the button list."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "scrollbar",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`centerItems` attribute",
              "***",
              "The default value is false. This attribute sets the buttons in the list to be center aligned. If Stretch attribute is set to both then stretch attribute will take more priority than centerItems attribute."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "centeritems",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "The default value is null. Valid values are null and 'both'. NOTE: stretch is set to null whenever there are multiple rows and columns. Stretch attribute is set to both will take more priority than centerItems attribute."
            ],
            "value": [
              "both"
            ],
            "name": "stretch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`endless` attribute",
              "***",
              "The default value is false. If false, continued swiping when reaching end of list reveals no items beyond the last. If true, if the attribute is added without a value, the first list item will virtually follow the last item when the end of the list is reached. Swiping towards the beginning of the list items will also show the last item prior to the first. Note: Endless is set to false whenever there are multiple rows and columns."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "endless",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`numberOfItems` attribute",
              "***",
              "Default value is 10,  Minimum value is 1 and Maximum value is 500. This attribute sets the number of buttons in the button lists"
            ],
            "value": [],
            "name": "numberofitems",
            "default": "10",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 500
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`rows` attribute",
              "***",
              "Default value is 1, Minimum value 1 and Maximum value 500. By using rows attribute the designer can align the buttons in multiple rows of the list when the orientation is horizontal."
            ],
            "value": [],
            "name": "rows",
            "default": "1",
            "hideWhen": [],
            "showWhen": [
              {
                "orientation": "horizontal"
              }
            ],
            "limits": [
              {
                "min": 1,
                "max": 500
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`columns` attribute",
              "***",
              "Default value is 1, Minimum value 1 and Maximum value 500. By using columns attribute the designer can align the buttons in multiple columns of the list when the orientation is vertical."
            ],
            "value": [],
            "name": "columns",
            "default": "1",
            "hideWhen": [],
            "showWhen": [
              {
                "orientation": "vertical"
              }
            ],
            "limits": [
              {
                "min": 1,
                "max": 500
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`indexId` attribute",
              "***",
              "This attribute helps to replace the pattern with the index on the ch5-button-list."
            ],
            "value": [],
            "name": "indexid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receiveStateNumberOfItems` attribute",
              "***",
              "signal value received from the receiveStateNumberOfItems Join will be constrained for numberOfItems attribute."
            ],
            "value": [],
            "name": "receivestatenumberofitems",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`scrollToPosition` attribute",
              "***",
              "Default value is 0, Minimum value is 0 and Maximum value is 499. Indicates the index of the button to scrollTo. This is applicable only for single row and column."
            ],
            "value": [],
            "name": "scrolltoposition",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 499
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`receiveStateScrollToPosition` attribute",
              "***",
              "Signal indicates the index of the button to scrollTo. This is applicable only for single row and column."
            ],
            "value": [],
            "name": "receivestatescrolltoposition",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`contractName` attribute",
              "***",
              "ContractName attribute sets the name of the contract"
            ],
            "value": [],
            "name": "contractname",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`useContractForEnable` attribute",
              "***",
              "When true, the contract 'Enable' state determines if the list is enabled. When false, the 'receiveStateEnable' join may be applied. Consistent with other components, if the 'receiveStateEnable' join is provide, the value of that join determines if the component is enabled. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforenable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForShow` attribute",
              "***",
              " When true, the contract 'Show' state determines if the list is enabled. When false, the 'receiveStateShow' join may be applied. Consistent with other components, if the 'receiveStateShow' join is provide, the value of that join determines if the component is visible. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForItemEnable` attribute",
              "***",
              "When true, the contract 'ItemEnable[x]' state determines if an individual button x is enabled. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforitemenable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForItemShow` attribute",
              "***",
              "When true, the contract 'ItemShow[x]' state determines if an individual button x is visible. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforitemshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForCustomStyle` attribute",
              "***",
              "contract for custom style "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforcustomstyle",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForCustomClass` attribute",
              "***",
              "contract for custom class"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforcustomclass",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`contractItemLabelType` attribute",
              "***",
              "Valid values are 'textContent', 'innerHTML', 'none'.   When 'none', contract 'ItemLabel[x]', will not change the label of button x. When 'textContent', change in value of contract 'ItemLabel[x]', will change the label as if it were text, not HTML markup. When 'innerHTML', change in value of contract 'ItemLabel[x]', will change the label as if it were HTML content"
            ],
            "value": [
              "none",
              "textContent",
              "innerHTML"
            ],
            "name": "contractitemlabeltype",
            "default": "none",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`contractItemIconType` attribute",
              "***",
              "Valid values are 'none', 'iconClass', 'url', 'sgStateName' and 'sgStateNumber'. The last two are reserved for backward compatibility to Smart Graphics Extenders used for Dynamic Button List.  They should not be provided as choices for projects that are not converted from VtPro/Smart Graphics."
            ],
            "value": [
              "none",
              "iconClass",
              "url",
              "sgStateName",
              "sgStateNumber"
            ],
            "name": "contractitemicontype",
            "default": "none",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`useContractForNumItems` attribute",
              "***",
              "When false, the 'receiveStateNumberOfItems' join may be applied. Consistent with other components, if the 'receiveStateNumberOfItems' join is provide, the value of that join determines how many items in the list to show. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractfornumitems",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`buttonType` attribute",
              "***",
              "buttonType sets the button background for all the buttons in the list. Valid values are default, danger, text, warning, info, success, primary, secondary."
            ],
            "value": [
              "default",
              "danger",
              "text",
              "warning",
              "info",
              "success",
              "primary",
              "secondary"
            ],
            "name": "buttontype",
            "default": "default",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonHAlignLabel` attribute",
              "***",
              "Default attribute is center.  Possible values are 'center', 'left', and 'right'. When the buttonHAlignLabel property is set, the label and the icon of the button are horizontally aligned.The center property sets the horizontal alignment of the label to the center of the button. The left property sets the horizontal alignment of the label to the left of the button.  The right property sets the horizontal alignment of the label to the right of the button."
            ],
            "value": [
              "center",
              "left",
              "right"
            ],
            "name": "buttonhalignlabel",
            "default": "center",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonVAlignLabel` attribute",
              "***",
              "Default attribute is middle. Possible values are 'middle', 'top', and 'bottom'. When the buttonVAlignLabel property is set, the label and the icon of the button are vertically aligned.  The middle property sets the vertical alignment of the label to the middle of the button.  The top property sets the vertical alignment of the label to the top of the button.   The bottom property sets the vertical alignment of the label to the bottom of the button."
            ],
            "value": [
              "middle",
              "top",
              "bottom"
            ],
            "name": "buttonvalignlabel",
            "default": "middle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonCheckboxPosition` attribute",
              "***",
              "Default value is left. Valid values are 'left', and 'right'. This property is used to set the position of a checkbox in a button. The value left would set the checkbox to the left of the button and the value right would set the checkbox to the right of the button."
            ],
            "value": [
              "left",
              "right"
            ],
            "name": "buttoncheckboxposition",
            "default": "left",
            "hideWhen": [],
            "showWhen": [
              {
                "buttonCheckboxShow": true
              }
            ],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonIconPosition` attribute",
              "***",
              "The default value is 'first', Valid values: 'first', 'last', 'top', 'bottom'. The icon position relative to the label."
            ],
            "value": [
              "first",
              "last",
              "top",
              "bottom"
            ],
            "name": "buttoniconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonShape` attribute",
              "***",
              "The default value is 'rectangle'. Valid values: 'rectangle', 'rounded-rectangle'. This attribute sets shape of the button."
            ],
            "value": [
              "rectangle",
              "rounded-rectangle"
            ],
            "name": "buttonshape",
            "default": "rectangle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonCheckboxShow` attribute",
              "***",
              "The default value is false. This property is used to display or hide a checkbox.  If set to true, a checkbox is displayed."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "buttoncheckboxshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`buttonSelected` attribute",
              "***",
              "The default value is false. This property reflects the selected state of the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "buttonselected",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`buttonPressed` attribute",
              "***",
              "The default value is false. This property reflects the pressed state of the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "buttonpressed",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`buttonMode` attribute",
              "***",
              "The default value is 0. This property is used to set or get the mode of the ch5-button in a multi-mode environment. The maximum value that can be set is 4."
            ],
            "value": [],
            "name": "buttonmode",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 4
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`buttonIconClass` attribute",
              "***",
              "The buttoniconclass attribute with Font Awesome icons and Material Icons. We can declare more than one css class in the buttonIconClass attribute."
            ],
            "value": [],
            "name": "buttoniconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`buttonIconUrl` attribute",
              "***",
              "The buttonIconUrl  attribute with SVG icons and PNG Icons we can pass only one url in the buttonIconUrl attribute"
            ],
            "value": [],
            "name": "buttoniconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`buttonLabelInnerHtml` attribute",
              "***",
              "This attribute provides the ability of a template that applies for all the buttons in the list."
            ],
            "value": [],
            "name": "buttonlabelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EncodedHTML",
            "hidden": true
          },
          {
            "documentation": [
              "`buttonReceiveStateMode` attribute",
              "***",
              "When received, applies a value to the mode attribute from the signal on all the buttons in the button list."
            ],
            "value": [],
            "name": "buttonreceivestatemode",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateSelected` attribute",
              "***",
              "When received, applies a true value applied by the selected class (ch5-button--selected) on all the buttons in the button list."
            ],
            "value": [],
            "name": "buttonreceivestateselected",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateLabel` attribute",
              "***",
              "When received, applies the value on the label on all the buttons in the button list."
            ],
            "value": [],
            "name": "buttonreceivestatelabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateScriptLabelHtml` attribute",
              "***",
              "Allows the signal script evaluation to be applied to the button.innerHTML class. Allows for multiline, multiStyled labels."
            ],
            "value": [],
            "name": "buttonreceivestatescriptlabelhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateIconClass` attribute",
              "***",
              "After receiving stateIconClass value from control system, this value is applied to the iconClass attribute of all the buttons in the list."
            ],
            "value": [],
            "name": "buttonreceivestateiconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateIconUrl` attribute",
              "***",
              "After receiving icon url value from the control system, this value is applied to the iconUrl attribute of all the buttons in the list."
            ],
            "value": [],
            "name": "buttonreceivestateiconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonSendEventOnClick` attribute",
              "***",
              "Sends an event on click or tap (mouse or swipe up and down quickly). Use this when the control system takes an action on the rising edge from false to true of a boolean digital event."
            ],
            "value": [],
            "name": "buttonsendeventonclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateShow` attribute",
              "***",
              ". When the signal is low, the component will not be displayed, and the area will not be pressable. If the receiveStateShow attribute is given for ch5-button-list, then it takes more preference over buttonReceiveStateShow attribute."
            ],
            "value": [],
            "name": "buttonreceivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateEnable` attribute",
              "***",
              "When the signal is low, the look of the component will change to represent a disabled state and the component will not be pressable. If the receiveStateEnable attribute is given for ch5-button-list, then it takes more preference over buttonReceiveStateEnable attribute."
            ],
            "value": [],
            "name": "buttonreceivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`clickHoldTime` attribute",
              "***",
              "The number of milliseconds that differentiates a tap from a press and hold for ItemClicked and ItemHeld Joins"
            ],
            "value": [],
            "name": "clickholdtime",
            "default": "1500",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 300,
                "max": 30000
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`buttonReceiveStateSGIconNumeric` attribute",
              "***",
              "This would contain a mapping on analog joins to each of the sg icons."
            ],
            "value": [],
            "name": "buttonreceivestatesgiconnumeric",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateSGIconString` attribute",
              "***",
              "This would contain a mapping of serial joins to each of the sg icons."
            ],
            "value": [],
            "name": "buttonreceivestatesgiconstring",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonSgIconTheme` attribute",
              "***",
              "This will contain an enumeration of 5 values - icons-lg, icons-sm, media-transports-accents, media-transports-light, media-transports-dark. Default. value is icons-lg."
            ],
            "value": [
              "icons-lg",
              "icons-sm",
              "media-transports-accents",
              "media-transports-light",
              "media-transports-dark"
            ],
            "name": "buttonsgicontheme",
            "default": "icons-lg",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`loadItems` attribute",
              "***",
              "The default value is visible-only. The possible values are visible-only, load-new, all. This attribute allows for buttons to be created and loaded on demand. Will determine if buttons are removed or not after they are no longer in visibility."
            ],
            "value": [
              "visible-only",
              "load-new",
              "all"
            ],
            "name": "loaditems",
            "default": "visible-only",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonIconUrlFillType` attribute",
              "***",
              "Sets the icon url fill type for all the buttons in the list. Default value is 'null'. Applicable values are 'null', 'stretch', 'stretch-aspect', 'center', 'tile', 'initial'. Uses the css property background-size for the implementation."
            ],
            "value": [
              "stretch",
              "stretch-aspect",
              "center",
              "tile",
              "initial"
            ],
            "name": "buttoniconurlfilltype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`receiveStateSelectedButton` attribute",
              "***",
              "ReceiveStateSelectedButton attribute helps the user to select an item on the button list by using an analog join."
            ],
            "value": [],
            "name": "receivestateselectedbutton",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`useContractForEachButtonSelection` attribute",
              "***",
              "The default value is false. If the value is true then the selected state of the buttons is taken from the contractName.ItemSelected else from contractName.Button[x]ItemSelected."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforeachbuttonselection",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-button-list` element",
          "***",
          "A list of custom buttons designed to provide options to add icons, label, text, multi-select among other powerful options."
        ],
        "snippets": [
          {
            "prefix": "ch5-button-list:blank",
            "description": "Crestron button list",
            "body": [
              "<ch5-button-list>",
              "</ch5-button-list>$0"
            ]
          },
          {
            "prefix": "ch5-button-list:default",
            "description": "Crestron button list (default)",
            "body": [
              "<ch5-button-list id=\"ch5-button-list_${1:id}\"",
              "\torientation=\"${2:horizontal}\"",
              "\tscrollbar=\"${3:false}\"",
              "\tcenterItems=\"${4:false}\"",
              "\tendless=\"${5:false}\"",
              "\tnumberOfItems=\"${6:10}\"",
              "\trows=\"${7:1}\"",
              "\tcolumns=\"${8:1}\"",
              "\tindexId=\"${9:}\"",
              "\tloadItems=\"${10:visible-only}\"",
              "\tscrollToPosition=\"${11:0}\">",
              "</ch5-button-list>$0"
            ]
          },
          {
            "prefix": "ch5-button-list:all-attributes",
            "description": "Crestron button list (All Attributes)",
            "body": [
              "<ch5-button-list id=\"ch5-button-list_${1:id}\"",
              "\torientation=\"${2:horizontal}\"",
              "\tscrollbar=\"${3:false}\"",
              "\tcenterItems=\"${4:false}\"",
              "\tendless=\"${5:false}\"",
              "\tnumberOfItems=\"${6:10}\"",
              "\trows=\"${7:1}\"",
              "\tcolumns=\"${8:1}\"",
              "\tindexId=\"${9:}\"",
              "\tscrollToPosition=\"${10:0}\"",
              "\treceiveStateNumberOfItems=\"${11:}\"",
              "\treceiveStateScrollToPosition=\"${12:}\"",
              "\tbuttonType=\"${13:default}\"",
              "\tbuttonHAlignLabel=\"${14:center}\"",
              "\tbuttonVAlignLabel=\"${15:middle}\"",
              "\tbuttonCheckboxPosition=\"${16:left}\"",
              "\tbuttonIconPosition=\"${17:first}\"",
              "\tbuttonShape=\"${18:rectangle}\"",
              "\tbuttonCheckboxShow=\"${19:}\"",
              "\tbuttonSelected=\"${20:}\"",
              "\tbuttonPressed=\"${21:}\"",
              "\tbuttonMode=\"${22:0}\"",
              "\tbuttonIconClass=\"${23:}\"",
              "\tbuttonIconUrl=\"${24:}\"",
              "\tbuttonReceiveStateMode=\"${25:}\"",
              "\tbuttonReceiveStateSelected=\"${26:}\"",
              "\tbuttonReceiveStateLabel=\"${27:}\"",
              "\tbuttonReceiveStateScriptLabelHtml=\"${28:}\"",
              "\tbuttonReceiveStateIconClass=\"${29:}\"",
              "\tbuttonReceiveStateIconUrl=\"${30:}\"",
              "\tbuttonSendEventOnClick=\"${31:}\"",
              "\tbuttonReceiveStateShow=\"${32:}\"",
              "\tbuttonReceiveStateEnable=\"${33:}\"",
              "\tcontractName=\"${34:}\"",
              "\tuseContractForEnable=\"${35:false}\"",
              "\tuseContractForShow=\"${36:false}\"",
              "\tuseContractForItemEnable=\"${37:false}\"",
              "\tuseContractForItemShow=\"${38:false}\"",
              "\tcontractItemLabelType=\"${39:none}\"",
              "\tcontractItemIconType=\"${40:none}\"",
              "\tuseContractForCustomStyle=\"${41:false}\"",
              "\tuseContractForCustomClass=\"${42:false}\"",
              "\tuseContractForEachButtonSelection=\"${43:false}\"",
              "\tuseContractForNumItems=\"${44:false}\"",
              "\tbuttonReceiveStateSGIconNumeric=\"${45:}\"",
              "\tbuttonReceiveStateSGIconString=\"${46:}\"",
              "\treceiveStateSelectedButton=\"${47:}\"",
              "\tbuttonSgIconTheme=\"${48:icons-lg}\"",
              "\tloadItems=\"${49:visible-only}\"",
              "\tclickHoldTime=\"${50:1500}\">",
              "</ch5-button-list>$0"
            ]
          },
          {
            "prefix": "ch5-button-list:contractbased",
            "description": "Crestron Button List(contractbased)",
            "body": [
              "<ch5-button-list id=\"ch5-button-list_${1:id}\"",
              "\tcontractName=\"${2:}\">",
              "</ch5-button-list>$0"
            ]
          },
          {
            "prefix": "ch5-button-list:contractbased-attributes",
            "description": "Crestron Button List(contractbased-attributes)",
            "body": [
              "<ch5-button-list id=\"ch5-button-list_${1:id}\"",
              "\tcontractName=\"${2:}\"",
              "\tuseContractForEnable=\"${3:false}\"",
              "\tuseContractForShow=\"${4:false}\"",
              "\tuseContractForItemEnable=\"${5:false}\"",
              "\tuseContractForItemShow=\"${6:false}\"",
              "\tcontractItemLabelType=\"${7:none}\"",
              "\tcontractItemIconType=\"${8:none}\"",
              "\tuseContractForCustomStyle=\"${9:false}\"",
              "\tuseContractForCustomClass=\"${10:false}\"",
              "\tuseContractForEachButtonSelection=\"${11:false}\"",
              "\tuseContractForNumItems=\"${12:false}\"",
              "\tclickHoldTime=\"${13:1500}\">",
              "</ch5-button-list>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-button-list-label",
            "optional": true,
            "childElements": [
              {
                "tagName": "template",
                "optional": false,
                "childElements": []
              }
            ]
          },
          {
            "tagName": "ch5-button-list-individual-button",
            "optional": true,
            "childElements": []
          },
          {
            "tagName": "ch5-button-list-mode",
            "optional": true,
            "childElements": [
              {
                "tagName": "ch5-button-list-label",
                "optional": true,
                "childElements": [
                  {
                    "tagName": "template",
                    "optional": false,
                    "childElements": []
                  }
                ]
              },
              {
                "tagName": "ch5-button-list-mode-state",
                "optional": true,
                "childElements": [
                  {
                    "tagName": "ch5-button-list-label",
                    "optional": true,
                    "childElements": [
                      {
                        "tagName": "template",
                        "optional": false,
                        "childElements": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "description": "Ch5 Button List offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Button List",
        "tagName": "ch5-button-list",
        "role": "button-list",
        "componentVersion": "2.3.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Possible values are danger, text, warning, info, success, default, primary, secondary"
            ],
            "value": [
              "default",
              "danger",
              "text",
              "warning",
              "info",
              "success",
              "primary",
              "secondary"
            ],
            "name": "type",
            "default": "default",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`hAlignLabel` attribute",
              "***",
              "Default attribute is center. Possible values are 'center', 'left', 'right'.  When the buttonHAlignLabel property is set, the label and the icon of the button are horizontally aligned. The center property sets the horizontal alignment of the label to the center of the button. The left property sets the horizontal alignment of the label to the left of the button. The right property sets the horizontal alignment of the label to the right of the button."
            ],
            "value": [
              "center",
              "left",
              "right"
            ],
            "name": "halignlabel",
            "default": "center",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`vAlignLabel` attribute",
              "***",
              "Default attribute is middle. Possible values are 'middle', 'top', 'bottom'. When the buttonvAlignLabel property is set, the label and the icon of the button are vertically aligned. The middle property sets the vertical alignment of the label to the middle of the button. The top property sets the vertical alignment of the label to the top of the button. The bottom property sets the vertical alignment of the label to the bottom of the button."
            ],
            "value": [
              "middle",
              "top",
              "bottom"
            ],
            "name": "valignlabel",
            "default": "middle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`checkboxPosition` attribute",
              "***",
              "Default value is left.  Valid values are 'left', 'right'.  This property is used to set the position of a checkbox in a button.  The value left would set the checkbox to the left of the button and the value right would set the checkbox to the right of the button."
            ],
            "value": [
              "left",
              "right"
            ],
            "name": "checkboxposition",
            "default": "left",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`iconPosition` attribute",
              "***",
              "The default value is 'first'. Valid values: 'first', 'last', 'top', 'bottom'. The icon position relative to the label."
            ],
            "value": [
              "first",
              "last",
              "top",
              "bottom"
            ],
            "name": "iconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`iconClass` attribute",
              "***",
              "The iconClass attribute with Font Awesome icons and Material Icons. You can declare more than one css class in the iconClass attribute."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconUrl` attribute",
              "***",
              "The iconUrl attribute with SVG icons and PNG Icons we can pass only one url in the iconUrl attribute"
            ],
            "value": [],
            "name": "iconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customClass` attribute",
              "***",
              "defines custom class for the button list mode"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customStyle` attribute",
              "***",
              "defines custom style for the button list mode"
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`labelInnerHTML` attribute",
              "***",
              "Ability to provide a template that applies for the button"
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EncodedHTML",
            "hidden": true
          }
        ],
        "documentation": [
          "`ch5-button-list-mode` element",
          "***",
          "A child element designed to capture mode level attributes for Ch5 Button list component."
        ],
        "snippets": [
          {
            "prefix": "ch5-button-list-mode:blank",
            "description": "Crestron button list mode",
            "body": [
              "<ch5-button-list-mode>",
              "</ch5-button-list-mode>$0"
            ]
          },
          {
            "prefix": "ch5-button-list-mode:default",
            "description": "Crestron button list mode (default)",
            "body": [
              "<ch5-button-list-mode id=\"ch5-button-list-mode_${1:id}\"",
              "\ttype=\"${2:default}\"",
              "\thAlignLabel=\"${3:center}\"",
              "\tvAlignLabel=\"${4:middle}\"",
              "\tcheckboxPosition=\"${5:left}\"",
              "\ticonPosition=\"${6:first}\"",
              "\ticonClass=\"${7:}\"",
              "\ticonUrl=\"${8:}\"",
              "\tcustomClass=\"${9:}\"",
              "\tcustomStyle=\"${10:}\">",
              "</ch5-button-list-mode>$0"
            ]
          },
          {
            "prefix": "ch5-button-list-mode:all-attributes",
            "description": "Crestron button list mode (All Attributes)",
            "body": [
              "<ch5-button-list-mode id=\"ch5-button-list-mode_${1:id}\"",
              "\ttype=\"${2:default}\"",
              "\thAlignLabel=\"${3:center}\"",
              "\tvAlignLabel=\"${4:middle}\"",
              "\tcheckboxPosition=\"${5:left}\"",
              "\ticonPosition=\"${6:first}\"",
              "\ticonClass=\"${7:}\"",
              "\ticonUrl=\"${8:}\"",
              "\tcustomClass=\"${9:}\"",
              "\tcustomStyle=\"${10:}\">",
              "</ch5-button-list-mode>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-button-list-label",
            "optional": true,
            "childElements": [
              {
                "tagName": "template",
                "optional": false,
                "childElements": []
              }
            ]
          },
          {
            "tagName": "ch5-button-list-mode-state",
            "optional": true,
            "childElements": [
              {
                "tagName": "ch5-button-list-label",
                "optional": true,
                "childElements": [
                  {
                    "tagName": "template",
                    "optional": false,
                    "childElements": []
                  }
                ]
              }
            ]
          }
        ],
        "description": "Ch5 Button List Mode is a child node for <ch5-button-list>.",
        "name": "Ch5 Button List Mode",
        "tagName": "ch5-button-list-mode",
        "role": "template",
        "componentVersion": "2.3.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`state` attribute",
              "***",
              "Default value is normal. Valid values are normal,pressed,selected. Determines the state of the button"
            ],
            "value": [
              "normal",
              "pressed",
              "selected"
            ],
            "name": "state",
            "default": "normal",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Possible values are danger, text, warning, info, success, default, primary, secondary"
            ],
            "value": [
              "default",
              "danger",
              "text",
              "warning",
              "info",
              "success",
              "primary",
              "secondary"
            ],
            "name": "type",
            "default": "default",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`hAlignLabel` attribute",
              "***",
              "Default attribute is center. Possible values are 'center', 'left', 'right'. When the buttonHAlignLabel property is set, the label and the icon of the button are horizontally aligned. The center property sets the horizontal alignment of the label to the center of the button. The left property sets the horizontal alignment of the label to the left of the button. The right property sets the horizontal alignment of the label to the right of the button."
            ],
            "value": [
              "center",
              "left",
              "right"
            ],
            "name": "halignlabel",
            "default": "center",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`vAlignLabel` attribute",
              "***",
              "Default attribute is middle. Possible values are 'middle', 'top', 'bottom'. When the buttonvAlignLabel property is set, the label and the icon of the button are vertically aligned. The middle property sets the vertical alignment of the label to the middle of the button. The top property sets the vertical alignment of the label to the top of the button. The bottom property sets the vertical alignment of the label to the bottom of the button."
            ],
            "value": [
              "middle",
              "top",
              "bottom"
            ],
            "name": "valignlabel",
            "default": "middle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`checkboxPosition` attribute",
              "***",
              "Default value is left. Valid values are 'left', 'right'. This property is used to set the position of a checkbox in a button. The value left would set the checkbox to the left of the button and the value right would set the checkbox to the right of the button."
            ],
            "value": [
              "left",
              "right"
            ],
            "name": "checkboxposition",
            "default": "left",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`iconPosition` attribute",
              "***",
              "The default value is 'first', Valid values: 'first', 'last', 'top', 'bottom'. The icon position relative to the label."
            ],
            "value": [
              "first",
              "last",
              "top",
              "bottom"
            ],
            "name": "iconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`iconClass` attribute",
              "***",
              "The iconClass attribute with Font Awesome icons and Material Icons. You can declare more than one css class in the iconClass attribute."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconUrl` attribute",
              "***",
              "The iconUrl attribute with SVG icons and PNG Icons we can pass only one url in the iconUrl attribute"
            ],
            "value": [],
            "name": "iconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customClass` attribute",
              "***",
              "defines custom class for the button list mode"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customStyle` attribute",
              "***",
              "defines custom style for the button list mode"
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`labelInnerHTML` attribute",
              "***",
              "Ability to provide a template that applies for the button"
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EncodedHTML",
            "hidden": true
          }
        ],
        "documentation": [
          "`ch5-button-list-mode-state` element",
          "***",
          "A child element designed to capture state level attributes for Ch5 Button List Mode component."
        ],
        "snippets": [
          {
            "prefix": "ch5-button-list-mode-state:blank",
            "description": "Crestron button list mode state",
            "body": [
              "<ch5-button-list-mode-state>",
              "</ch5-button-list-mode-state>$0"
            ]
          },
          {
            "prefix": "ch5-button-list-mode-state:default",
            "description": "Crestron button list mode state (default)",
            "body": [
              "<ch5-button-list-mode-state id=\"ch5-button-list-mode-state_${1:id}\"",
              "\tstate=\"${2:normal}\"",
              "\ttype=\"${3:default}\"",
              "\thAlignLabel=\"${4:center}\"",
              "\tvAlignLabel=\"${5:middle}\"",
              "\tcheckboxPosition=\"${6:left}\"",
              "\ticonPosition=\"${7:first}\"",
              "\ticonClass=\"${8:}\"",
              "\ticonUrl=\"${9:}\"",
              "\tcustomClass=\"${10:}\"",
              "\tcustomStyle=\"${11:}\">",
              "</ch5-button-list-mode-state>$0"
            ]
          },
          {
            "prefix": "ch5-button-list-mode-state:all-attributes",
            "description": "Crestron button list mode state (All Attributes)",
            "body": [
              "<ch5-button-list-mode-state id=\"ch5-button-list-mode-state_${1:id}\"",
              "\tstate=\"${2:normal}\"",
              "\ttype=\"${3:default}\"",
              "\thAlignLabel=\"${4:center}\"",
              "\tvAlignLabel=\"${5:middle}\"",
              "\tcheckboxPosition=\"${6:left}\"",
              "\ticonPosition=\"${7:first}\"",
              "\ticonClass=\"${8:}\"",
              "\ticonUrl=\"${9:}\"",
              "\tcustomClass=\"${10:}\"",
              "\tcustomStyle=\"${11:}\">",
              "</ch5-button-list-mode-state>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-button-list-label",
            "optional": true,
            "childElements": [
              {
                "tagName": "template",
                "optional": false,
                "childElements": []
              }
            ]
          }
        ],
        "description": "Ch5 Button List Mode State is a child node for <ch5-button-list-mode>.",
        "name": "Ch5 Button List Mode State",
        "tagName": "ch5-button-list-mode-state",
        "role": "",
        "componentVersion": "2.3.0"
      },
      {
        "attributes": [],
        "documentation": [
          "`ch5-button-list-label` element",
          "***",
          "A child element designed to capture the label for Ch5 Button list component."
        ],
        "snippets": [
          {
            "prefix": "ch5-button-list-label:blank",
            "description": "Crestron button list label",
            "body": [
              "<ch5-button-list-label>",
              "\t<template>",
              "\t$1",
              "\t</template>",
              "</ch5-button-list-label>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "template",
            "optional": false,
            "childElements": []
          }
        ],
        "description": "Ch5 Button List Label is a child node for <ch5-button-list>, <ch5-button-list-mode> and <ch5-button-list-mode-state>.",
        "name": "Ch5 Button List Label",
        "tagName": "ch5-button-list-label",
        "role": "label",
        "componentVersion": "2.3.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`labelInnerHTML` attribute",
              "***",
              "Ability to provide a template that applies for the individual button in the list. This attribute takes preference over the buttonLabelInnerHTML attribute in ch5-button-list for the respective individual button based on index."
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconUrl` attribute",
              "***",
              "The iconUrl attribute with SVG icons and PNG Icons. We can pass only one url in the iconUrl attribute. This attribute overrides the buttonIconUrl attribute in ch5-button-list for the respective individual button based on index."
            ],
            "value": [],
            "name": "iconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconClass` attribute",
              "***",
              "The iconClass attribute with Font Awesome icons and Material Icons. We can declare more than one css class in the iconClass attribute. This attribute overrides the buttonIconClass attribute in ch5-button-list for the respective individual button based on index."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`onRelease` attribute",
              "***",
              "The onRelease attribute allows selection of a page to be made visible on clicking of the button."
            ],
            "value": [],
            "name": "onrelease",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          }
        ],
        "documentation": [
          "`ch5-button-list-individual-button` element",
          "***",
          "Ch5 Button List Individual Button tag to provide ability to enter individual button labels and individual icons for each button in the list."
        ],
        "snippets": [
          {
            "prefix": "ch5-button-list-individual-button:blank",
            "description": "Crestron button list individual button",
            "body": [
              "<ch5-button-list-individual-button>",
              "</ch5-button-list-individual-button>$0"
            ]
          },
          {
            "prefix": "ch5-button-list-individual-button:default",
            "description": "Crestron button list individual button (default)",
            "body": [
              "<ch5-button-list-individual-button id=\"ch5-button-list-individual-button_${1:id}\"",
              "\ticonUrl=\"${2:}\"",
              "\tonRelease=\"${3:}\"",
              "\ticonClass=\"${4:}\">",
              "</ch5-button-list-individual-button>$0"
            ]
          },
          {
            "prefix": "ch5-button-list-individual-button:all-attributes",
            "description": "Crestron button list individual button (All Attributes)",
            "body": [
              "<ch5-button-list-individual-button id=\"ch5-button-list-individual-button_${1:id}\"",
              "\tlabelInnerHTML=\"${2:}\"",
              "\ticonUrl=\"${3:}\"",
              "\tonRelease=\"${4:}\"",
              "\ticonClass=\"${5:}\">",
              "</ch5-button-list-individual-button>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "A child element designed to handle individual buttons for Ch5 Button list component",
        "name": "Ch5 Button List Individual Button",
        "tagName": "ch5-button-list-individual-button",
        "role": "template",
        "componentVersion": "2.3.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`previewColor` attribute",
              "***",
              "Select a color to preview and define initial color of the color chip. Default value is rgb(0,0,0)."
            ],
            "value": [],
            "name": "previewcolor",
            "default": "rgb(0,0,0)",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "string"
          },
          {
            "documentation": [
              "`maxValue` attribute",
              "***",
              "Determines the maximum analog value to use as analog join input / output for changing current red, green and/or blue values of color chip. Default value is 255 and it can range from 50 to 65535."
            ],
            "value": [],
            "name": "maxvalue",
            "default": "255",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 50,
                "max": 65535
              }
            ],
            "attributeType": "number"
          },
          {
            "documentation": [
              "`sendEventOnClick` attribute",
              "***",
              "Sends a high signal when user places the finger on the control and low signal when finger is released."
            ],
            "value": [],
            "name": "sendeventonclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateRedValue` attribute",
              "***",
              "Input join, with valid values from 0-Maximum Analog Value, to update red color value of the color chip. Shall scale to 24-bit color range of 256 if Maximum analog value exceeds 256."
            ],
            "value": [],
            "name": "receivestateredvalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateGreenValue` attribute",
              "***",
              "Input join, with valid values from 0-Maximum Analog Value, to update green color value of the color chip. Shall scale to 24-bit color range of 256 if Maximum analog value exceeds 256."
            ],
            "value": [],
            "name": "receivestategreenvalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateBlueValue` attribute",
              "***",
              "Input join, with valid values from 0-Maximum Analog Value, to update blue color value of the color chip. Shall scale to 24-bit color range of 256 if Maximum analog value exceeds 256."
            ],
            "value": [],
            "name": "receivestatebluevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventColorRedOnChange` attribute",
              "***",
              "Send changed red value to Control System"
            ],
            "value": [],
            "name": "sendeventcolorredonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventColorGreenOnChange` attribute",
              "***",
              "Send changed green value to Control System"
            ],
            "value": [],
            "name": "sendeventcolorgreenonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventColorBlueOnChange` attribute",
              "***",
              "Send changed blue value to control system"
            ],
            "value": [],
            "name": "sendeventcolorblueonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-color-chip` element",
          "***",
          "The Color Chip widget provides two functions: It provides additional feedback of an RGB color combination, potentially from the Color Picker, but could be any source of Red, Green and Blue values. It also acts as a simple flat color image that can be pressed by user and provides a digital join to control system to indicate it has been pressed."
        ],
        "snippets": [
          {
            "prefix": "ch5-color-chip:blank",
            "description": "Crestron color chip",
            "body": [
              "<ch5-color-chip>",
              "</ch5-color-chip>$0"
            ]
          },
          {
            "prefix": "ch5-color-chip:default",
            "description": "Crestron ColorChip",
            "body": [
              "<ch5-color-chip previewColor=\"${1:black}\"",
              "\treceiveStateRedValue=\"${2}\"",
              "\treceiveStateGreenValue=\"${3}\"",
              "\treceiveStateBlueValue=\"${4}\">",
              "</ch5-color-chip>$0"
            ]
          },
          {
            "prefix": "ch5-color-chip:all-attributes",
            "description": "Crestron ColorChip (All Attributes)",
            "body": [
              "<ch5-color-chip previewColor=\"${1:black}\"",
              "\tmaxValue=\"${2:255}\"",
              "\tsendEventOnClick=\"${3:colorChip_${id}_clicked}\"",
              "\treceiveStateRedValue=\"${4}\"",
              "\treceiveStateGreenValue=\"${5}\"",
              "\treceiveStateBlueValue=\"${6}\"",
              "\tsendEventColorRedOnChange=\"${7:colorChip_${id}_redChange}\"",
              "\tsendEventColorGreenOnChange=\"${8:colorChip_${id}_greenChange}\"",
              "\tsendEventColorBlueOnChange=\"${9:colorChip_${id}_blueChange}\">",
              "</ch5-color-chip>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "Color Chip is used as a display source of Red, Blue, and Green values.",
        "name": "Ch5 Color Chip",
        "tagName": "ch5-color-chip",
        "role": "color-chip",
        "componentVersion": "2.1.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`maxValue` attribute",
              "***",
              "Determines the maximum analog value to use as analog join input / output for changing current red, green and/or blue values of color picker. For hardware that support a wider range than 256, CH5 shall scale the individual color values to a 256 equivalent. Default value is 255 and it can range from 255 to 65535."
            ],
            "value": [],
            "name": "maxvalue",
            "default": "255",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 50,
                "max": 65535
              }
            ],
            "attributeType": "number"
          },
          {
            "documentation": [
              "`receiveStateRedValue` attribute",
              "***",
              "Input join, with valid values from 0-Maximum Analog Value, to update red color value of the color picker. Shall scale to 24-bit color range of 256 if Maximum analog value exceeds 256"
            ],
            "value": [],
            "name": "receivestateredvalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateGreenValue` attribute",
              "***",
              "Input join, with valid values from 0-Maximum Analog Value, to update green color value of the color picker. Shall scale to 24-bit color range of 256 if Maximum analog value exceeds 256."
            ],
            "value": [],
            "name": "receivestategreenvalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateBlueValue` attribute",
              "***",
              "Input join, with valid values from 0-Maximum Analog Value, to update blue color value of the color picker. Shall scale to 24-bit color range of 256 if Maximum analog value exceeds 256."
            ],
            "value": [],
            "name": "receivestatebluevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventColorRedOnChange` attribute",
              "***",
              "Send changed red value to Control System"
            ],
            "value": [],
            "name": "sendeventcolorredonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventColorGreenOnChange` attribute",
              "***",
              "Send changed green value to control system "
            ],
            "value": [],
            "name": "sendeventcolorgreenonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventColorBlueOnChange` attribute",
              "***",
              "Send changed blue value to control system "
            ],
            "value": [],
            "name": "sendeventcolorblueonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-color-picker` element",
          "***",
          "The color picker is a widget that allows users to see and select full 24 bit range of colors in manner similar to popular image editing software such as Adobe Photoshop, GNU Gimp and Microsoft Paint."
        ],
        "snippets": [
          {
            "prefix": "ch5-color-picker:blank",
            "description": "Crestron color picker",
            "body": [
              "<ch5-color-picker>",
              "</ch5-color-picker>$0"
            ]
          },
          {
            "prefix": "ch5-color-picker:default",
            "description": "Crestron ColorPicker",
            "body": [
              "<ch5-color-picker receiveStateRedValue=\"${1}\"",
              "\treceiveStateGreenValue=\"${2}\"",
              "\treceiveStateBlueValue=\"${3}\">",
              "</ch5-color-picker>$0"
            ]
          },
          {
            "prefix": "ch5-color-picker:all-attributes",
            "description": "Crestron ColorPicker (All Attributes)",
            "body": [
              "<ch5-color-picker maxValue=\"${1:255}\"",
              "\treceiveStateRedValue=\"${2}\"",
              "\treceiveStateGreenValue=\"${3}\"",
              "\treceiveStateBlueValue=\"${4}\"",
              "\tsendEventColorRedOnChange=\"${5:colorPicker_${id}_redChange}\"",
              "\tsendEventColorGreenOnChange=\"${6:colorPicker_${id}_greenChange}\"",
              "\tsendEventColorBlueOnChange=\"${7:colorPicker_${id}_blueChange}\">",
              "</ch5-color-picker>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The Color Picker control will comprise of a rectangular image of various colors and a vertical slider of various luminance values.",
        "name": "Ch5 Color Picker",
        "tagName": "ch5-color-picker",
        "role": "color-picker",
        "componentVersion": "2.1.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`display24HourFormat` attribute",
              "***",
              "The default value is false. Time will be displayed in 24 hour format (applicable for displayType as 'datetime' or 'time')."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "display24hourformat",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`displayAmPm` attribute",
              "***",
              "The default value is true. Time will display AM/PM (applicable for displayType as 'datetime' or 'time')."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "displayampm",
            "default": "true",
            "hideWhen": [],
            "showWhen": [
              {
                "display24HourFormat": "false"
              }
            ],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`displayTwoDigitsHour` attribute",
              "***",
              "The default value is false. If set to true, the hours will always display two digits (applicable for displayType as 'datetime' or 'time')."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "displaytwodigitshour",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`displaySeconds` attribute",
              "***",
              "The default value is false. Seconds will be displayed (applicable for displayType as 'datetime' or 'time')."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "displayseconds",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`styleForDate` attribute",
              "***",
              "Possible values are MM-dd-yyyy (default) | M-dd-yyyy | M-d-yyyy | MM-dd-yy | M-dd-yy | M-d-yy | dd_MM_yyyy | d_MM_yyyy | d_M_yyyy | dd_MM_yy | d_MM_yy | d_M_yy | d MMM yyyy | MMM d yyyy | d MMMM yyyy | MMMM d yyyy | yyyy-MM-dd | yyyy_MM_dd | MMM d, yyyy | yyyy MM, dd | yyyy MMMM, dd | MMMM d, yyyy,  Style used for the date. M=numerical month 1-12 | MM=numerical month with preceding 0 for months 1 to 9 | MMM=short month string | MMMM=full month string | d=day of month | dd=day of month with preceding 0 for values 1 to 9 | YY=last two digits of year | YYYY=4 digit year | '_'=forward slash character | '-'=dash character."
            ],
            "value": [
              "MM-dd-yyyy",
              "M-dd-yyyy",
              "M-d-yyyy",
              "MM-dd-yy",
              "M-dd-yy",
              "M-d-yy",
              "dd_MM_yyyy",
              "d_MM_yyyy",
              "d_M_yyyy",
              "dd_MM_yy",
              "d_MM_yy",
              "d_M_yy",
              "d MMM yyyy",
              "MMM d yyyy",
              "d MMMM yyyy",
              "MMMM d yyyy",
              "yyyy-MM-dd",
              "yyyy_MM_dd",
              "MMM d, yyyy",
              "yyyy MM, dd",
              "yyyy MMMM, dd",
              "MMMM d, yyyy"
            ],
            "name": "stylefordate",
            "default": "MM-dd-yyyy",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`horizontalAlignment` attribute",
              "***",
              "Possible values are center(default), left, right. Sets the horizontal alignment of the text."
            ],
            "value": [
              "center",
              "left",
              "right"
            ],
            "name": "horizontalalignment",
            "default": "center",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`displayType` attribute",
              "***",
              "Possible values are datetime (default): Date and Time are displayed | date: Date is displayed | time: Time is displayed"
            ],
            "value": [
              "datetime",
              "date",
              "time"
            ],
            "name": "displaytype",
            "default": "datetime",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`timeOffsetHours` attribute",
              "***",
              "Default value: 0 | Min value: -37768 | Max value: 37767 | Offset the date/time in hours. As an example, to direct an offset of 1 hour 30 minutes, provide an analog value of 1.5"
            ],
            "value": [],
            "name": "timeoffsethours",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": -37768,
                "max": 37767
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`receiveStateOffsetTime` attribute",
              "***",
              "You may optionally select an analog join to programmatically change the time offset property during runtime. Values are in units of hundredths of an hour. As an example, to direct an offset of 1 hour 30 minutes, provide an analog value of 150."
            ],
            "value": [],
            "name": "receivestateoffsettime",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-datetime` element",
          "***",
          "An date and time display designed to provide options to show date with displayType, timeOffsetHours, display24HourFormat, displayAmPm, displayTwoDigitsHour, displaySeconds, styleForDate, horizontalAlignment and receiveStateOffsetTime"
        ],
        "snippets": [
          {
            "prefix": "ch5-datetime:blank",
            "description": "Crestron datetime",
            "body": [
              "<ch5-datetime>",
              "</ch5-datetime>$0"
            ]
          },
          {
            "prefix": "ch5-datetime:all-attributes",
            "description": "Crestron datetime (All Attributes)",
            "body": [
              "<ch5-datetime id=\"ch5-datetime_${1:id}\"",
              "\tdisplay24HourFormat=\"${2:false}\"",
              "\tdisplayAmPm=\"${3:true}\"",
              "\tdisplayTwoDigitsHour=\"${4:false}\"",
              "\tdisplaySeconds=\"${5:false}\"",
              "\tstyleForDate=\"${6:MM-dd-yyyy}\"",
              "\thorizontalAlignment=\"${7:center}\"",
              "\tdisplayType=\"${8:datetime}\"",
              "\ttimeOffsetHours=\"${9:0}\"",
              "\treceiveStateOffsetTime=\"${10:}\">",
              "</ch5-datetime>$0"
            ]
          },
          {
            "prefix": "ch5-datetime:default",
            "description": "Crestron datetime (default)",
            "body": [
              "<ch5-datetime id=\"ch5-datetime_${1:id}\"",
              "\tdisplay24HourFormat=\"${2:false}\"",
              "\tdisplayAmPm=\"${3:true}\"",
              "\tdisplayTwoDigitsHour=\"${4:false}\"",
              "\tdisplaySeconds=\"${5:false}\"",
              "\tstyleForDate=\"${6:MM-dd-yyyy}\"",
              "\thorizontalAlignment=\"${7:center}\"",
              "\tdisplayType=\"${8:datetime}\"",
              "\ttimeOffsetHours=\"${9:0}\">",
              "</ch5-datetime>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The Date Time component is a widget that displays date information using the current system date and time.",
        "name": "Ch5 Date Time",
        "tagName": "ch5-datetime",
        "role": "datetime",
        "componentVersion": "2.5.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconClass` attribute",
              "***",
              "The icon class gives the ability for the end developer to create custom icons."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "IconClass"
          },
          {
            "documentation": [
              "`iconUrl` attribute",
              "***",
              "A custom image that the user needs to pass the URL or the local file relative path, ",
              "the iconUrl takes precedence over iconClass."
            ],
            "value": [],
            "name": "iconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "ImageURL"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "The label attributes gives the ability for the end developer to specify a label for the CENTER button only"
            ],
            "value": [],
            "name": "label",
            "default": "null",
            "hideWhen": [
              {
                "key": [
                  "up",
                  "down",
                  "left",
                  "right"
                ]
              }
            ],
            "showWhen": [
              {
                "key": [
                  "center"
                ]
              }
            ],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`key` attribute",
              "***",
              "The key of the button to determine which button it is."
            ],
            "value": [
              "up",
              "down",
              "left",
              "right",
              "center"
            ],
            "name": "key",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`pressed` attribute",
              "***",
              "The default value is false.",
              "This property reflects the pressed state of the component. If set to true, ",
              "'keypad-btn-pressed' will be applied as the CSS class on the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "pressed",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-dpad-button` element",
          "***",
          "DPad Button <ch5-dpad-button key=`value`> component can be added under a <ch5-dpad> tag ",
          "for customization related to icon as a url or an icon class. ",
          "Note: This tag can never be independently used and always needs the container <ch5-dpad> to render."
        ],
        "snippets": [
          {
            "prefix": "ch5-dpad-button key=\"down\":blank",
            "description": "Crestron Dpad Button Blank",
            "body": [
              "<ch5-dpad-button key=\"${1|center,up,down,left,right|}\">",
              "</ch5-dpad-button>$0"
            ]
          },
          {
            "prefix": "ch5-dpad-button:iconurl",
            "description": "Crestron Dpad Icon Url",
            "body": [
              "<ch5-dpad-button key=\"${1|center,up,down,left,right|}\" iconurl=\"btn_${2:Icon Url}\">",
              "</ch5-dpad-button>$0"
            ]
          },
          {
            "prefix": "ch5-dpad-button:iconclass",
            "description": "Crestron Dpad Icon Class",
            "body": [
              "<ch5-dpad-button key=\"${1|center,up,down,left,right|}\" iconclass=\"btn_${2:Icon Class}\">",
              "</ch5-dpad-button>$0"
            ]
          },
          {
            "prefix": "ch5-dpad-button:all-attributes",
            "description": "Crestron Dpad All Attributes",
            "body": [
              "<ch5-dpad-button key=\"${1|center,up,down,left,right|}\"",
              "\ticonurl=\"btn_${2:IconUrl}\"",
              "\tpressed=\"${3:false}\"",
              "\tlabel=\"${4:Label}\"",
              "\ticonclass=\"${5:iconClass}\">",
              "</ch5-dpad-button>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "This is a child component of ch5-dpad",
        "name": "Ch5 Dpad Button",
        "tagName": "ch5-dpad-button",
        "role": "container",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`contractName` attribute",
              "***",
              "Defines the primary contract name to derive the component's contract details."
            ],
            "value": [],
            "name": "contractname",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Overrides the appearance of dpad with alternative CSS that is defined in classes ",
              "defined with ch5-dpad--type-typeValue where typeValue is the value of 'type' ",
              "property. If no 'type' is provided, type of 'default' is used."
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "type",
            "default": "default",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`shape` attribute",
              "***",
              "Sets the overall <ch5-dpad> component shape to plus or circle.",
              "CSS class of ch5-dpad--shape-shapeValue is added to the dpad, where shapeValue ",
              "is the value of 'shape' property. If no 'shape' is provided, shape of 'plus' is used."
            ],
            "value": [
              "plus",
              "circle"
            ],
            "name": "shape",
            "default": "plus",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "When the stretch property is set, the component inherits the width or/and height of the container. ",
              "If stretch by height is used, the <ch5-dpad> will be responsive based on the width of the container. ",
              "If stretch width is applied, the <ch5-dpad> will be responsive based on the height of the container. ",
              "This implies that the container height is picked for width and container width is picked for height ",
              "to ensure that the overall shape of the component is a 'square' in nature (equal in width and height ",
              "for the shapes of plus and circle)."
            ],
            "value": [
              "both",
              "width",
              "height"
            ],
            "name": "stretch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Overrides the appearance of dpad with alternative CSS that is defined in classes ",
              "defined with ch5-dpad--size-sizeValue where sizeValue is the value of 'size'.",
              "If no 'size' is provided, type of 'default' is used."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": "regular",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`useContractForEnable` attribute",
              "***",
              "If the contract name exists, by default this becomes true. ",
              "If the contract name does not exist, by default this becomes false. ",
              "If this value is set to true then the value received from the contract will be considered to enable ",
              "<ch5-dpad> tag and also to enable the buttons under <ch5-dpad> component i.e. <ch5-dpad-button>.",
              "The names from the contract will be different for each of the buttons and the overall <ch5-dpad> component. ",
              "The details can be seen in the table above."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforenable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForShow` attribute",
              "***",
              "If the contract name exists, by default this becomes true. ",
              "If the contract name does not exist, by default this becomes false. ",
              "If this value is set to true then the value received from the contract will be considered to show / hide ",
              "<ch5-dpad> tag. The names from the contract will be different for each of the buttons and the overall ",
              "<ch5-dpad> component. The details can be seen in the table above."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForCustomClass` attribute",
              "***",
              "If the contract name exists, by default this becomes true. ",
              "If the contract name does not exist, by default this becomes false. ",
              "If this value is set to true then the value received from the contract will be considered for remaining ",
              "ch5-dpad button as a custom class."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforcustomclass",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForCustomStyle` attribute",
              "***",
              "If the contract name exists, by default this becomes true. ",
              "If the contract name does not exist, by default this becomes false. ",
              "If this value is set to true then the value received from the contract will be considered ",
              "for the custom style."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforcustomstyle",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`sendEventOnClickStart` attribute",
              "***",
              "Only applies if contractName is not provided, if this parameter is supplied,",
              " the join number is applied to the up button, join+1 applies to down, ",
              "join+2 applies to left, join+3 applies to right, join+4 to center ."
            ],
            "value": [],
            "name": "sendeventonclickstart",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "booleanJoin": 5
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`hideCenterButton` attribute",
              "***",
              "Attribute to hide the center button of the DPad. Default value is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hidecenterbutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receiveStateHideCenterButton` attribute",
              "***",
              "Boolean signal to hide the center button of the DPad. This will override hideCenterButton."
            ],
            "value": [],
            "name": "receivestatehidecenterbutton",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`disableCenterButton` attribute",
              "***",
              "Attribute to disable the center button of the DPad. Default value is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disablecenterbutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receiveStateDisableCenterButton` attribute",
              "***",
              "Boolean signal to disable the center button of the DPad. This will override disableCenterButton."
            ],
            "value": [],
            "name": "receivestatedisablecenterbutton",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`useContractForDisableCenterButton` attribute",
              "***",
              "If the contract name exists, by default this becomes true. If the contract name does not exist, by default this becomes false. If this value is set to true then the value received from the contract will be considered to disable the center button."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractfordisablecenterbutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForHideCenterButton` attribute",
              "***",
              "If the contract name exists, by default this becomes true. If the contract name does not exist, by default this becomes false. If this value is set to true then the value received from the contract will be considered to hide the center button."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforhidecenterbutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-dpad` element",
          "***",
          "DPad <ch5-dpad> component consists of up, down, left, right and center buttons arranged in a grid. ",
          "The DPad has a default theme associated with it. The center button can contain customizable text. ",
          "Each button can send signals on click / touch events."
        ],
        "snippets": [
          {
            "prefix": "ch5-dpad:blank",
            "description": "Crestron Dpad",
            "body": [
              "<ch5-dpad>",
              "</ch5-dpad>$0"
            ]
          },
          {
            "prefix": "ch5-dpad:contractbased",
            "description": "Crestron Dpad",
            "body": [
              "<ch5-dpad id=\"btn_${0:id}\"",
              "\tcontractname=\"${1:}\"",
              ">",
              "</ch5-dpad>$0"
            ]
          },
          {
            "prefix": "ch5-dpad:eventbased",
            "description": "Crestron Dpad",
            "body": [
              "<ch5-dpad id=\"btn_${0:id}\"",
              "\tsendeventonclickstart=\"${1:}\"",
              ">",
              "</ch5-dpad>$0"
            ]
          },
          {
            "prefix": "ch5-dpad:all-attributes",
            "description": "Crestron Dpad",
            "body": [
              "<ch5-dpad id=\"btn_${0:id}\"",
              "\tcontractname=\"${1:}\"",
              "\tshape=\"${2:plus}\"",
              "\ttype=\"${3:default}\"",
              "\tusecontractforenable=\"${4:false}\"",
              "\tusecontractforshow=\"${5:false}\"",
              "\tusecontractforcustomclass=\"${6:false}\"",
              "\tusecontractforcustomstyle=\"${7:false}\"",
              "\tsendeventonclickstart=\"${8:}\"",
              "\thideCenterButton=\"${9:false}\"",
              "\treceiveStateHideCenterButton=\"${10:}\"",
              "\tdisableCenterButton=\"${11:false}\"",
              "\treceiveStateDisableCenterButton=\"${12:}\"",
              "\tuseContractForHideCenterButton =\"${13:false}\"",
              "\tuseContractForDisableCenterButton =\"${14:false}\">",
              "</ch5-dpad>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-dpad-button",
            "optional": true,
            "childElements": []
          }
        ],
        "description": "Ch5 Dpad offers a control set of 5 buttons.",
        "name": "Ch5 Dpad",
        "tagName": "ch5-dpad",
        "role": "container",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`submitbuttonlabel` attribute",
              "***",
              "Represents the label of the Submit button."
            ],
            "value": [],
            "name": "submitbuttonlabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`submitbuttonicon` attribute",
              "***",
              "Represents the icon of the Submit button."
            ],
            "value": [],
            "name": "submitbuttonicon",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`submitbuttonStyle` attribute",
              "***",
              "Represents the style of the Submit button."
            ],
            "value": [],
            "name": "submitbuttonstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`submitbuttontype` attribute",
              "***",
              "The default value is 'default'. ",
              "Represents the type of the auto-generated Submit button."
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "submitbuttontype",
            "default": "default",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`cancelbuttonlabel` attribute",
              "***",
              "Represents the label of the Cancel button."
            ],
            "value": [],
            "name": "cancelbuttonlabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`cancelbuttonicon` attribute",
              "***",
              "Represents the icon of the Cancel button."
            ],
            "value": [],
            "name": "cancelbuttonicon",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`cancelbuttonstyle` attribute",
              "***",
              "Represents the style of the Cancel button."
            ],
            "value": [],
            "name": "cancelbuttonstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`cancelButtonType` attribute",
              "***",
              "The default value is 'default'. ",
              "Represents the type of the auto-generated Cancel button."
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "cancelbuttontype",
            "default": "default",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`submitid` attribute",
              "***",
              "Represents the ID of the Submit button."
            ],
            "value": [],
            "name": "submitid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`cancelId` attribute",
              "***",
              "Represents the ID of the Cancel button."
            ],
            "value": [],
            "name": "cancelid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`hideCancelButton` attribute",
              "***",
              "Boolean for showing or hiding the Cancel button."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hidecancelbutton",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`hideSubmitButton` attribute",
              "***",
              "Boolean for showing or hiding the Submit button."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hidesubmitbutton",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-form` element",
          "***",
          " This component provides a container for which 'input' style components, such as TextEntry, ",
          "Slider, Toggle Switch, Select, and Spinner, can be grouped together to update their send signals upon a ",
          "Submit button press or to revert to their receive signal value upon a Cancel button press."
        ],
        "snippets": [
          {
            "prefix": "ch5-form:blank",
            "description": "Crestron Form (blank)",
            "body": [
              "<ch5-form>",
              "</ch5-form>$0"
            ]
          },
          {
            "prefix": "ch5-form:default",
            "description": "Crestron Form (default)",
            "body": [
              "<ch5-form>",
              "    <h2>Room X</h2>",
              "    ",
              "    <h5>Do not disturb</h5>",
              "    <ch5-toggle",
              "        labelon=\"On\"",
              "        labeloff=\"Off\"",
              "        feedbackmode=\"submit\"",
              "        receivestatevalue=\"room_donotdisturb_selected\"",
              "        sendeventonclick=\"room_donotdisturb_clicked\">",
              "    </ch5-toggle>",
              "",
              "",
              "    <h5>Temperature</h5>",
              "    <ch5-slider",
              "        feedbackmode=\"submit\"",
              "        receivestatevalue=\"room_thermostat_set_fb\"",
              "        sendeventonchange=\"room_thermostat_set\"",
              "        step=\"10\"",
              "        min=\"0\"",
              "        max=\"100\">",
              "    </ch5-slider>",
              "",
              "    ",
              "    <ch5-select size=\"4\" indexid=\"idx\" mode=\"panel\"",
              "                 feedbackmode=\"submit\"",
              "                 sendeventonchange=\"select_send_change_signal\"",
              "                 receivestatevalue=\"select_receive_signal_value\"",
              "                 noneselectedprompt=\"Select\">",
              "         <template>",
              "            <ch5-select-option>",
              "                <span>Option {{idx}}</span>",
              "            </ch5-select-option>",
              "         </template>",
              "    </ch5-select>",
              "</ch5-form>"
            ]
          },
          {
            "prefix": "ch5-form:custom-buttons",
            "description": "Crestron Form with custom submit and cancel buttons inside",
            "body": [
              "<ch5-form>",
              "    <h2>Room X</h2>",
              "    ",
              "    <h5>Do not disturb</h5>",
              "    <ch5-toggle",
              "        labelon=\"On\"",
              "        labeloff=\"Off\"",
              "        feedbackmode=\"submit\"",
              "        receivestatevalue=\"room_donotdisturb_selected\"",
              "        sendeventonclick=\"room_donotdisturb_clicked\">",
              "    </ch5-toggle>",
              "",
              "",
              "    <h5>Temperature</h5>",
              "    <ch5-slider",
              "        feedbackmode=\"submit\"",
              "        receivestatevalue=\"room_thermostat_set_fb\"",
              "        sendeventonchange=\"room_thermostat_set\"",
              "        step=\"10\"",
              "        min=\"0\"",
              "        max=\"100\">",
              "    </ch5-slider>",
              "",
              "    ",
              "    <ch5-select size=\"4\" indexId=\"idx\" mode=\"panel\"",
              "                 feedbackmode=\"submit\"",
              "                 sendeventonchange=\"select_send_change_signal\"",
              "                 receivestatevalue=\"select_receive_signal_value\"",
              "                 noneselectedprompt=\"Select\">",
              "         <template>",
              "            <ch5-select-option>",
              "                <span>Option {{idx}}</span>",
              "            </ch5-select-option>",
              "         </template>",
              "    </ch5-select>",
              "",
              "    <ch5-button id=\"room_submit_id\" formtype=\"submit\" label=\"Update Room\"></ch5-button>",
              "    <ch5-button id=\"room_cancel_id\" formtype=\"cancel\" label=\"Revert Changes\"></ch5-button>",
              "</ch5-form>"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 Form offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Form",
        "tagName": "ch5-form",
        "role": "form",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`url` attribute",
              "***",
              "The HTML file path."
            ],
            "value": [],
            "name": "url",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "ImageURL"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-import-htmlsnippet` element",
          "***",
          "The component is used to load HTML snippets during run time. ",
          "This component allows users to load HTML snippets. The snippets should not contain HTML, HEAD, and BODY tags. ",
          "Users can modularize the HTML files into pages or sections using this component, ",
          "and the snippet is inserted into the DOM at the respective location ",
          "during run time. ",
          "To import the snippet in Angular, the source directory must be added in angular.json file as follows: ",
          "     \"assets\": [",
          "         \"src/assets/htmlsnippets\" ",
          "     ]"
        ],
        "snippets": [
          {
            "prefix": "ch5-import-htmlsnippet:default",
            "description": "Crestron import-htmlsnippet (Default)",
            "body": [
              "<ch5-import-htmlsnippet url=\"\">",
              "</ch5-import-htmlsnippet>$0"
            ]
          },
          {
            "prefix": "ch5-import-htmlsnippet:All Attributes",
            "description": "Crestron import-htmlsnippet (All Attributes)",
            "body": [
              "<ch5-import-htmlsnippet url=\"\" receivestateshowpulse=\"\" receivestatehidepulse=\"\" receivestateshow=\"\" sendeventonshow=\"\">",
              "</ch5-import-htmlsnippet>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 import-htmlsnippet allows to import the HTML snippet.",
        "name": "Ch5 Import Html Snippet",
        "tagName": "ch5-import-htmlsnippet",
        "role": "template",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`alt` attribute",
              "***",
              "Defines an alternative text description for the image."
            ],
            "value": [],
            "name": "alt",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`height` attribute",
              "***",
              "The intrinsic height of the image, in pixels. Must be a string of the form Npx or N%."
            ],
            "value": [],
            "name": "height",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`width` attribute",
              "***",
              "The intrinsic width of the image, in pixels. Must be a string of the form Npx or N%."
            ],
            "value": [],
            "name": "width",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`refreshrate` attribute",
              "***",
              "The default value is '0'. ",
              "The number of seconds between each URL refresh. If 0, the URL will not",
              "be refreshed."
            ],
            "value": [],
            "name": "refreshrate",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 600
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`url` attribute",
              "***",
              "Must be a supported image format, including JPEG, GIF, PNG, SVG, and BMP."
            ],
            "value": [],
            "name": "url",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "ImageURL"
          },
          {
            "documentation": [
              "`mode` attribute",
              "***",
              "This attribute is used together with <ch5-image-mode> child component."
            ],
            "value": [],
            "name": "mode",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`password` attribute",
              "***",
              "The authentication password required to get the image."
            ],
            "value": [],
            "name": "password",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`user` attribute",
              "***",
              "The authentication username required to get the image."
            ],
            "value": [],
            "name": "user",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateurl` attribute",
              "***",
              "The image URL."
            ],
            "value": [],
            "name": "receivestateurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatemode` attribute",
              "***",
              "The image mode received."
            ],
            "value": [],
            "name": "receivestatemode",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventontouch` attribute",
              "***",
              "Sends a boolean true event when the screen is tapped and boolean false event when released. ",
              "Use this when the control system takes an action on a level-sensitive boolean digital event. ",
              "Examples include the SIMPL Logic Symbol for Analog Ramp with a description of ",
              "Digital input <up> 'High/1 (level sensitive) = Ramp up; Low/0 = Stop ramp'."
            ],
            "value": [],
            "name": "sendeventontouch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonclick` attribute",
              "***",
              "Sends an on click or tap event (mouse or swipe up and down quickly). ",
              "Use this when the control system takes an action on the rising edge from false to true of a boolean digital event. ",
              "Examples include the SIMPL Logic Symbol for Toggle with a description of ",
              "Digital input <clock> 'High/1 (rising edge) = Toggle; Low/0 = No effect'."
            ],
            "value": [],
            "name": "sendeventonclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonerror` attribute",
              "***",
              "Sends an event on error."
            ],
            "value": [],
            "name": "sendeventonerror",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-image` element",
          "***",
          "A component to load images. Even with this component, the user can use the standard HTML ",
          "<img> tag. This component allows for images to be loaded mainly from a security camera on a polled basis. ",
          "The implementation of the Image Component in used to coordinate requests of images to be shared ",
          "between different image components and video components that may be requesting the same image URL."
        ],
        "snippets": [
          {
            "prefix": "ch5-image:blank",
            "description": "Crestron Image (Blank)",
            "body": [
              "<ch5-image>",
              "</ch5-image>$0"
            ]
          },
          {
            "prefix": "ch5-image:default",
            "description": "Crestron Image (Default)",
            "body": [
              "<ch5-image alt=\"${1:Outside driveway image}\"",
              "\theight=\"${2:900px}\"",
              "\twidth=\"${3:1600px}\"",
              "\trefreshrate=\"${4:2}\"",
              "\turl=\"${5:http://someServer/image.png}\">",
              "</ch5-image>$0"
            ]
          },
          {
            "prefix": "ch5-image:receive-signal",
            "description": "Crestron Image (Receive Signal)",
            "body": [
              "<ch5-image alt=\"${1:Backyard image}\"",
              "\theight=\"${2:450px}\"",
              "\twidth=\"${3:800px}\"",
              "\trefreshrate=\"${4:1}\"",
              "\treceivestateurl=\"${5:url_for_image_signal}\">",
              "</ch5-image>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 Image offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Image",
        "tagName": "ch5-image",
        "role": "img",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "Defines an value for the ch5-jointotext-boolean."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "value",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`textWhenTrue` attribute",
              "***",
              "Defines an text that will be displayed on value=true for the ch5-jointotext-boolean."
            ],
            "value": [],
            "name": "textwhentrue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`textWhenFalse` attribute",
              "***",
              "Defines an text that will be displayed on value=false for the ch5-jointotext-boolean."
            ],
            "value": [],
            "name": "textwhenfalse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receiveStateValue` attribute",
              "***",
              "Defines the receivestatevalue state name."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-jointotext-boolean` element",
          "***",
          "This component provides attributes like - ",
          "value (this attribute is not expected to be used outside of diagnostic purposes. This attribute should not be used or honored when receiveStateValue attribute is provided),  ",
          "receiveStateValue (expected value is boolean/digital join number or contract state signal name. When not provided, the tag will evaluate to empty string), ",
          "textWhenTrue (expected value is the text to be displayed when the boolean join evaluates to true. If not provided and the boolean join evaluates to true, the component 'textContent' will evaluate to empty string), ",
          "textWhenFalse (expected value is the text to be displayed when the boolean value evaluates to false. If not provided and the boolean join evaluates to false, the component 'textContent' will evaluate to empty string)."
        ],
        "snippets": [
          {
            "prefix": "ch5-jointotext-boolean:blank",
            "description": "Crestron JoinToText Boolean (Blank)",
            "body": [
              "<ch5-jointotext-boolean>",
              "</ch5-jointotext-boolean>$0"
            ]
          },
          {
            "prefix": "ch5-jointotext-boolean:default",
            "description": "Crestron JoinToText Boolean (Default)",
            "body": [
              "<ch5-jointotext-boolean value=\"${1:true}\"",
              "\ttextWhenTrue=\"${2:The value is true}\"",
              "\ttextWhenFalse=\"${3:The value is false}\">",
              "</ch5-jointotext-boolean>$0"
            ]
          },
          {
            "prefix": "ch5-jointotext-boolean:receive-signal",
            "description": "Crestron JoinToText Boolean (Receive Signal)",
            "body": [
              "<ch5-jointotext-boolean receiveStateValue=\"${1:19}\"",
              "\ttextWhenTrue=\"${2:The value is true}\"",
              "\ttextWhenFalse=\"${3:The value is false}\">",
              "</ch5-jointotext-boolean>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The component provides a response of a digital join. This component can be used to show different values for true and false digital signal responses.",
        "name": "Ch5 JoinToTextBoolean",
        "tagName": "ch5-jointotext-boolean",
        "role": "presentation",
        "componentVersion": "2.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "Defines an value for the jointotext."
            ],
            "value": [],
            "name": "value",
            "default": "\"\"",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`textWhenEmpty` attribute",
              "***",
              "Defines an text that will be displayed on value is empty for the jointotext."
            ],
            "value": [],
            "name": "textwhenempty",
            "default": "\"\"",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receiveStateValue` attribute",
              "***",
              "Defines the receivestatevalue state name."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "\"\"",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-jointotext-string` element",
          "***",
          "When the response string join value is not empty, the tag component will provide the value of the string join. When the provided string join value is empty, then the component will provide the value of the textWhenEmpty attribute."
        ],
        "snippets": [
          {
            "prefix": "ch5-jointotext-string:blank",
            "description": "Crestron JoinToText String (Blank)",
            "body": [
              "<ch5-jointotext-string>",
              "</ch5-jointotext-string>$0"
            ]
          },
          {
            "prefix": "ch5-jointotext-string:default",
            "description": "Crestron JoinToText String (Default)",
            "body": [
              "<ch5-jointotext-string value=\"${1:true}\"",
              "\ttextWhenEmpty=\"${2:The value is empty}\">",
              "</ch5-jointotext-string>$0"
            ]
          },
          {
            "prefix": "ch5-jointotext-string:receive-signal",
            "description": "Crestron JoinToText String (Receive Signal)",
            "body": [
              "<ch5-jointotext-string receiveStateValue=\"${1:19}\"",
              "\ttextWhenEmpty=\"${2:The value is empty}\">",
              "</ch5-jointotext-string>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The component provides a response of a serial join.",
        "name": "Ch5 JoinToTextString",
        "tagName": "ch5-jointotext-string",
        "role": "presentation",
        "componentVersion": "2.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "Defines an value for the jointotext."
            ],
            "value": [],
            "name": "value",
            "default": "\"\"",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Defines the numeric type."
            ],
            "value": [
              "signed",
              "float",
              "percentage",
              "hex",
              "raw",
              "unsigned",
              "time"
            ],
            "name": "type",
            "default": "signed",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`receiveStateValue` attribute",
              "***",
              "Defines the receivestatevalue state name."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "\"\"",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`decimalLength` attribute",
              "***",
              "Defines the floating point position."
            ],
            "value": [],
            "name": "decimallength",
            "default": "2",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`length` attribute",
              "***",
              "Defines the whole number min length."
            ],
            "value": [],
            "name": "length",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`min` attribute",
              "***",
              "Defines the min range used only for percentage type."
            ],
            "value": [],
            "name": "min",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`max` attribute",
              "***",
              "Defines the max range used only for percentage type."
            ],
            "value": [],
            "name": "max",
            "default": "65535",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-jointotext-numeric` element",
          "***",
          "This component can be used to convert analog responses to various formats like 'signed', 'float', 'percentage', 'hex', 'raw', 'unsigned', and 'time'."
        ],
        "snippets": [
          {
            "prefix": "ch5-jointotext-numeric:blank",
            "description": "Crestron JoinToText Numeric (Blank)",
            "body": [
              "<ch5-jointotext-numeric>",
              "</ch5-jointotext-numeric>$0"
            ]
          },
          {
            "prefix": "ch5-jointotext-numeric:default",
            "description": "Crestron JoinToText Numeric (Default)",
            "body": [
              "<ch5-jointotext-numeric value=\"${1:true}\"",
              "\ttype=\"${2:signed}\">",
              "</ch5-jointotext-numeric>$0"
            ]
          },
          {
            "prefix": "ch5-jointotext-numeric:receive-signal",
            "description": "Crestron JoinToText Numeric (Receive Signal)",
            "body": [
              "<ch5-jointotext-numeric receiveStateValue=\"${1:19}\"",
              "\ttype=\"${2:signed}\">",
              "</ch5-jointotext-numeric>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The component provides a response of an analog join.",
        "name": "Ch5 JoinToTextNumeric",
        "tagName": "ch5-jointotext-numeric",
        "role": "presentation",
        "componentVersion": "2.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`labelMajor` attribute",
              "***",
              "Defines the primary/major text value of the button.",
              "Not applicable to the extra button."
            ],
            "value": [],
            "name": "labelmajor",
            "default": "null",
            "hideWhen": [
              {
                "showExtraButton": true
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`labelMinor` attribute",
              "***",
              "Defines the secondary/minor text value of the button.",
              "Not applicable to the extra button."
            ],
            "value": [],
            "name": "labelminor",
            "default": "null",
            "hideWhen": [
              {
                "showExtraButton": true
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconClass` attribute",
              "***",
              "Defines the secondary/minor text value of the button."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "IconClass"
          },
          {
            "documentation": [
              "`key` attribute",
              "***",
              "Defines the key value of the button."
            ],
            "value": [],
            "name": "key",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`pressed` attribute",
              "***",
              "The default value is false.",
              "This property reflects the pressed state of the component. If set to true, ",
              "'keypad-btn-pressed' will be applied as the CSS class on the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "pressed",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-keypad-button` element",
          "***",
          "The Keypad Child Button component is used to customize the button labels or icon."
        ],
        "snippets": [
          {
            "prefix": "ch5-keypad-button:basic",
            "description": "Crestron Keypad Child Button",
            "body": [
              "<ch5-keypad-button key=\"button${1:Button_Key}\">",
              "</ch5-keypad-button>$0"
            ]
          },
          {
            "prefix": "ch5-keypad-button:labels",
            "description": "Crestron Keypad Child Button",
            "body": [
              "<ch5-keypad-button key=\"button${1:Button_Key}\"",
              "\tlabelmajor=\"${2:}\"",
              "\tlabelminor=\"${3:}\"",
              ">",
              "</ch5-keypad-button>$0"
            ]
          },
          {
            "prefix": "ch5-keypad-button:iconclass",
            "description": "Crestron Keypad Child Button",
            "body": [
              "<ch5-keypad-button key=\"button${1:Button_Key}\"",
              "\ticonclass=\"${2:Icon_Class}\"",
              ">",
              "</ch5-keypad-button>$0"
            ]
          },
          {
            "prefix": "ch5-keypad-button:all-attribute",
            "description": "Crestron Keypad Child Button (All attribute)",
            "body": [
              "<ch5-keypad-button key=\"button${1:Button_Key}\"",
              "\tlabelMajor=\"${2:}\"",
              "\tlabelMinor=\"${3:}\"",
              "\ticonClass=\"${4:}\"",
              "\tpressed=\"${5:false}\">",
              "</ch5-keypad-button>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 Keypad Button offers an approach to customize the child buttons within a keypad.",
        "name": "Ch5 Keypad Button",
        "tagName": "ch5-keypad-button",
        "role": "container",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`contractName` attribute",
              "***",
              "Defines the primary contract name to derive the component's contract details."
            ],
            "value": [],
            "name": "contractname",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Overrides the appearance of each of the buttons inside <ch5-keypad> with alternative CSS ",
              "defined in classes defined with ch5-keypad--type where type is the value of the property. ",
              "If no 'type' is provided, type of 'primary' is used."
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "type",
            "default": "default",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`shape` attribute",
              "***",
              "Sets the overall <ch5-keypad> component shape to rounded-rectangle, square or circle."
            ],
            "value": [
              "rounded-rectangle",
              "square",
              "circle"
            ],
            "name": "shape",
            "default": "rounded-rectangle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "When the stretch property is set, the component inherits the width or/and height of the container. ",
              "If stretch by height is used, the <ch5-keypad> will be responsive based on the width of the container. ",
              "If stretch width is applied, the <ch5-keypad> will be responsive based on the height of the container. "
            ],
            "value": [
              "both",
              "width",
              "height"
            ],
            "name": "stretch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`textOrientation` attribute",
              "***",
              "Default value is 'top'. ",
              "Allows to customize the orientation of the keypad buttons' major-minor. ",
              "The value dictates the position of the labelMajor and labelMinor is complimented. ",
              "If value is top: then, major will be on top and minor will be below it. "
            ],
            "value": [
              "top",
              "right",
              "bottom",
              "left"
            ],
            "name": "textorientation",
            "default": "top",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Overrides the appearance of the button with alternative CSS that is defined in classes defined with ch5-keypad--size, where size is the value of the property. If no `size` is provided, type of `default` is used."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": "regular",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`useContractForEnable` attribute",
              "***",
              "If the contract name exists, by default this becomes true. ",
              "If the contract name does not exist, by default this becomes false. ",
              "If this value is set to true then the value received from the contract will be considered to enable ",
              "<ch5-keypad> tag and also to enable the buttons under <ch5-keypad> component.",
              "The names from the contract will be different for each of the buttons and the overall <ch5-keypad> component. ",
              "The details can be seen in the table above."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforenable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForShow` attribute",
              "***",
              "If the contract name exists, by default this becomes true. ",
              "If the contract name does not exist, by default this becomes false. ",
              "If this value is set to true then the value received from the contract will be considered to show / hide ",
              "<ch5-keypad> tag. The names from the contract will be different for each of the buttons and the overall ",
              "<ch5-keypad> component. The details can be seen in the table above."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForCustomClass` attribute",
              "***",
              "If the contract name exists, by default this becomes true. ",
              "If the contract name does not exist, by default this becomes false. ",
              "If this value is set to true then the value received from the contract will be considered for remaining ",
              "ch5-keypad button as a custom class."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforcustomclass",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForCustomStyle` attribute",
              "***",
              "If the contract name exists, by default this becomes true. ",
              "If the contract name does not exist, by default this becomes false. ",
              "If this value is set to true then the value received from the contract will be considered ",
              "for the custom style."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforcustomstyle",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForExtraButtonShow` attribute",
              "***",
              "If this value is set to true then the value received from the contract will be considered else from receiveStateExtraButtonShow or showExtraButton."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforextrabuttonshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`showExtraButton` attribute",
              "***",
              "The default value is false. This allows the keypad to have a ",
              "special row of buttons with a single button visible that shows a Phone icon. ",
              "The row when displayed, will add on to the existing height."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "showextrabutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receiveStateExtraButtonShow` attribute",
              "***",
              "The boolean value of the signal determines if the dial button is seen by the user. ",
              "Only applicable if contractName is not provided as a parameter."
            ],
            "value": [],
            "name": "receivestateextrabuttonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "booleanJoin": 1,
              "isContractName": true
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnClickStart` attribute",
              "***",
              "Only applies if contractName is not provided, if this parameter is supplied,",
              " the join + 1 number is applied to the #1 button, join+2 applies to #2 button, ",
              "join+3 applies #3 button, join+4 applies #4 button, join+5 applies #5 button, ",
              "join+6 applies #6 button, join+7 applies #7 button, join+8 applies #8 button, ",
              "join+9 applies #9 button, join applies #0 button, join+10 applies star button,",
              "join+11 applies hash button and join+12 applies to extra button."
            ],
            "value": [],
            "name": "sendeventonclickstart",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "booleanJoin": 13
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`hidePoundButton` attribute",
              "***",
              "Attribute to hide the pound button of the Keypad. Default value is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hidepoundbutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`hideAsteriskButton` attribute",
              "***",
              "Attribute to hide the asterisk button of the Keypad. Default value is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hideasteriskbutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receiveStateHideAsteriskButton` attribute",
              "***",
              "Boolean signal to hide the asterisk button of the Keypad. This will override hideAsteriskButton."
            ],
            "value": [],
            "name": "receivestatehideasteriskbutton",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`useContractForHideAsteriskButton` attribute",
              "***",
              "Possible values true, false. If this value is set to true then the value received from the contract will be considered to hide ch5-keypad asterisk button. Default is 'false'."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforhideasteriskbutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receiveStateHidePoundButton` attribute",
              "***",
              "Boolean signal to hide the pound button of the Keypad. This will override hidePoundButton."
            ],
            "value": [],
            "name": "receivestatehidepoundbutton",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`useContractForHidePoundButton` attribute",
              "***",
              "Possible values true, false. If this value is set to true then the value received from the contract will be considered to hide ch5-keypad pound button. Default is 'false'."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforhidepoundbutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-keypad` element",
          "***",
          "The Keypad component is a flexible numeric keypad that always displays 0-9 like a standard telephone ",
          "(along with * and #) and also allows for customizable button labels. ",
          "The Keypad has a default theme associated with it. The extra button can contain customizable icon. ",
          "Each button can send signals on click / touch events."
        ],
        "snippets": [
          {
            "prefix": "ch5-keypad:blank",
            "description": "Crestron Keypad",
            "body": [
              "<ch5-keypad>",
              "</ch5-keypad>$0"
            ]
          },
          {
            "prefix": "ch5-keypad:contractbased",
            "description": "Crestron Keypad",
            "body": [
              "<ch5-keypad id=\"keypad_${0:id}\"",
              "\tcontractname=\"${1:}\"",
              ">",
              "</ch5-keypad>"
            ]
          },
          {
            "prefix": "ch5-keypad:eventbased",
            "description": "Crestron Keypad",
            "body": [
              "<ch5-keypad id=\"keypad_${0:id}\"",
              "\tsendeventonclickstart=\"${1:}\"",
              ">",
              "</ch5-keypad>"
            ]
          },
          {
            "prefix": "ch5-keypad:all-attributes",
            "description": "Crestron Keypad",
            "body": [
              "<ch5-keypad id=\"keypad_${0:id}\"",
              "\tcontractName=\"${1:}\"",
              "\tshape=\"${2:rounded-rectangle}\"",
              "\ttype=\"${3:default}\"",
              "\ttextOrientation=\"${4:top}\"",
              "\tshowExtraButton=\"${5:true}\"",
              "\treceiveStateExtraButtonShow=\"${6:}\"",
              "\tuseContractForEnable=\"${7:false}\"",
              "\tuseContractForShow=\"${8:false}\"",
              "\tuseContractForCustomClass=\"${9:false}\"",
              "\tuseContractForCustomStyle=\"${10:false}\"",
              "\tuseContractForExtraButtonShow=\"${11:false}\"",
              "\tuseContractForHideAsteriskButton=\"${12:false}\"",
              "\tuseContractForHidePoundButton=\"${13:false}\"",
              "\tsendEventOnclickStart=\"${14:}\"",
              "\thidePoundButton=\"${15:false}\"",
              "\thideAsteriskButton=\"${16:false}\"",
              "\treceiveStateHideAsteriskButton=\"${17:}\"",
              "\treceiveStateHidePoundButton=\"${18:}\">",
              "</ch5-keypad>"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 Keypad offers a control set of 12 buttons (+ 1 extra button)",
        "name": "Ch5 Keypad",
        "tagName": "ch5-keypad",
        "role": "container",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "The default value is '1'. ",
              "The number of items in a list. The max value is 1000."
            ],
            "value": [],
            "name": "size",
            "default": "1",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "The default value is 'vertical'. Valid values: 'vertical' or 'horizontal'. ",
              "Positions the control elements in a horizontal or vertical orientation. ",
              "This is done with the CSS overflow property. The overflow property specifies ",
              "what happens if content overflows an element's box."
            ],
            "value": [
              "vertical",
              "horizontal"
            ],
            "name": "orientation",
            "default": "vertical",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`bufferammount` attribute",
              "***",
              "The default value is '0'. ",
              "The number of elements to be rendered outside of the current container's ",
              "viewport (visible area)."
            ],
            "value": [],
            "name": "bufferamount",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`itemheight` attribute",
              "***",
              "The height of an item. The height value can be in px and vh. ",
              "The item height is needed for a vertical infinite list. If the height is not provided, ",
              "the infinite list is calculated based on the first item height. ",
              "Each list item must have the same height."
            ],
            "value": [],
            "name": "itemheight",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`itemwidth` attribute",
              "***",
              "Recommendation: Use the same unit type for all width and height attributes. ",
              "The width of an item. The height value can be in px and vh. ",
              "The item width is needed for a vertical infinite list. If the width is not provided, ",
              "the infinite list is calculated based on the first item width. ",
              "Each list item must have the same width."
            ],
            "value": [],
            "name": "itemwidth",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`minWidth` attribute",
              "***",
              "Recommendation: Use the same unit type for all width height attributes. ",
              "The min width of the list container."
            ],
            "value": [],
            "name": "minwidth",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`minWidth` attribute",
              "***",
              "Recommendation: Use the same unit type for all width and height attributes. ",
              "The max width of the list container."
            ],
            "value": [],
            "name": "maxwidth",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`minHeight` attribute",
              "***",
              "Recommendation: Use the same unit type for all width and height attributes ",
              "The min height of the list container."
            ],
            "value": [],
            "name": "minheight",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`maxHeight` attribute",
              "***",
              "Recommendation: Use the same unit type for all width and height attributes. ",
              "The max height of the list container."
            ],
            "value": [],
            "name": "maxheight",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`scrollToTime` attribute",
              "***",
              "The default value is 500ms. Sets how long to animate changing a list location to the scrollTo ",
              "signal value."
            ],
            "value": [],
            "name": "scrolltotime",
            "default": "500ms",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 1000
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`indexid` attribute",
              "***",
              "The pattern that will be replaced with the id from the list items iteration. ",
              "Example: {{ idx }}"
            ],
            "value": [],
            "name": "indexid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`scrollbar` attribute",
              "***",
              "The default value is false. If true, shows a scrollbar for the list."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "scrollbar",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`pageswipe` attribute",
              "***",
              "The default value is false. If false, a swipe gesture moves the list with momentum as ",
              "expected on 'throwable' lists. If true, a swipe gesture will move the list only ",
              "woith the number of visible items, snapping the first visible item to the top ",
              "for a vertical list or on left for dir='ltr' attribute lists."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "pagedswipe",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`endless` attribute",
              "***",
              "The default value is false. If false, continued swiping when reaching end of list reveals ",
              "no items beyond the last. If true, if the attirbute is added without a value, ",
              "the first list item will ",
              "virtually follow the last item when the end of the list is reached. ",
              "Swiping towards the beginning of the list items will also show the last item ",
              "prior to the first."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "endless",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receivestatesize` attribute",
              "***",
              "Represents the size of the list received from Native."
            ],
            "value": [],
            "name": "receivestatesize",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatescrollto` attribute",
              "***",
              "Represents the scroll position of the list received from Native. ",
              "Example: value 10 of receivestatescrollto will scroll the list ",
              "to the 10th element."
            ],
            "value": [],
            "name": "receivestatescrollto",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatetemplatevars` attribute",
              "***",
              "Represents the template variables that are received from Native."
            ],
            "value": [],
            "name": "receivestatetemplatevars",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-list` element",
          "***",
          " This component is used to display a list of items."
        ],
        "snippets": [
          {
            "prefix": "ch5-list:all",
            "description": "Crestron List (All Attributes)",
            "body": [
              "<ch5-list indexid=\"${1:idx}\"",
              "\tsize=\"${2:5}\"",
              "\torientation=\"${3:horizontal}\"",
              "\tbufferamount=\"${4:5}\"",
              "\titemheight=\"${5:75px}\"",
              "\titemwidth=\"${6:125px}\"",
              "\tminwidth=\"${7:250px}\"",
              "\tmaxwidth=\"${8:500px}\"",
              "\tminheight=\"${9:100px}\"",
              "\tmaxheight=\"${10:150px}\"",
              "\tpagedswipe=\"${11:false}\"",
              "\tendless=\"${12:false}\"",
              "\tscrollbar=\"${13:true}\"",
              "\tscrolltotime=\"${14}\"",
              "\treceivestatesize=\"${15}\"",
              "\treceivestatescrollto=\"${16}\"",
              "\treceivestatetemplatevars=\"${17}\">",
              "</ch5-list>$0"
            ]
          },
          {
            "prefix": "ch5-list",
            "description": "Crestron List",
            "body": [
              "<ch5-list size=\"${1:10}\" orientation=\"${2|vertical,horizontal|}\">",
              "\t<template>",
              "\t\t<ch5-button id=\"btn_${3:id}\"",
              "\t\t\tlabel=\"${4:Crestron Button}\"",
              "\t\t\tsendeventonclick=\"${5:btn_${3}_clicked}\">",
              "\t\t</ch5-button>",
              "\t</template>",
              "</ch5-list>$0"
            ]
          },
          {
            "prefix": "ch5-list-",
            "description": "Crestron List Extended",
            "body": [
              "<ch5-list size=\"${1:10}\" orientation=\"${2|vertical,horizontal|}\" minwidth=\"${3:900px}\" maxwidth=\"${4:1115px}\"",
              "\t minheight=\"${5:600px}\" maxheight=\"${6:700px}\" indexid=\"${7:idx}\" itemwidth=\"${8:150px}\">",
              "\t<template>",
              "\t\t<ch5-button stretch=\"${9|both,width,height|}\" label=\"${10:mute}\"",
              "\t\t\treceivestateselected=\"levels_mute_selected_${7}\">",
              "\t\t</ch5-button>",
              "\t</template>",
              "</ch5-list>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "template",
            "optional": false,
            "childElements": []
          }
        ],
        "description": "Ch5 List offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 List",
        "tagName": "ch5-list",
        "role": "list",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`closeicon` attribute",
              "***",
              "A class name of the close icon. It may be a font awesome class."
            ],
            "value": [],
            "name": "closeicon",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "IconClass"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Valid values: 'width', 'height', and 'both'. The component will stretch to ",
              "the available width or the available height in the parent component. Using ",
              "'both' will stretch the component both ways."
            ],
            "value": [
              "both",
              "width",
              "height"
            ],
            "name": "stretch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`overflow` attribute",
              "***",
              "The default value is scroll. ",
              "Valid values: 'scroll' and 'show'. The overflow property specifies what ",
              "happens if content does or does not overflow the component box. ",
              "This is related to the stretch property. This property specifies whether to add ",
              "scrollbars when an element's content is too big to fit in a specified area. ",
              "If 'show' is selected, the overflow is not clipped."
            ],
            "value": [
              "scroll",
              "show"
            ],
            "name": "overflow",
            "default": "scroll",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`width` attribute",
              "***",
              "The width of the modal dialog, in pixels. Must be a string of the form Npx."
            ],
            "value": [],
            "name": "width",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`height` attribute",
              "***",
              "The height of the modal dialog, in pixels. Must be a string of the form Npx."
            ],
            "value": [],
            "name": "height",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`title` attribute",
              "***",
              "The title of the modal dialog. Must be a string."
            ],
            "value": [],
            "name": "title",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`maskstyle` attribute",
              "***",
              "The Header title text. If absent or empty, the title bar will be hidden."
            ],
            "value": [],
            "name": "maskstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`okbuttonlabel` attribute",
              "The OK button text. If absent or empty, the default translated 'OK' text is shown."
            ],
            "value": [],
            "name": "okbuttonlabel",
            "default": "\"Ok\"",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`okbuttonicon` attribute",
              "***",
              "The OK button icon. If absent or empty, the icon is hidden."
            ],
            "value": [],
            "name": "okbuttonicon",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`okbuttonstyle` attribute",
              "***",
              "The inline style value for the OK button to override the theme."
            ],
            "value": [],
            "name": "okbuttonstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`cancelbuttonlabel` attribute",
              "***",
              "The Cancel button text. If absent or empty, the default translated 'Cancel' text ",
              "is shown."
            ],
            "value": [],
            "name": "cancelbuttonlabel",
            "default": "\"Cancel\"",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`cancelbuttonicon` attribute",
              "***",
              "The Cancel button icon. If absent or empty, the icon is hidden."
            ],
            "value": [],
            "name": "cancelbuttonicon",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`cancelbuttonstyle` attribute",
              "***",
              "The inline style value for the Cancel button to override the theme."
            ],
            "value": [],
            "name": "cancelbuttonstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`prompt` attribute",
              "***",
              "The optional text for a message."
            ],
            "value": [],
            "name": "prompt",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`prompticon` attribute",
              "***",
              "The icon that appears next to prompt text"
            ],
            "value": [],
            "name": "prompticon",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`dismissable` attribute",
              "***",
              "The default value is 'true'. If false, the panel will not automatically hide if a touch event occurs outside of it."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "dismissable",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`closable` attribute",
              "***",
              "The default value is 'false'. If true, shows a close icon on the corner of the panel. If false, ",
              "the close icon is not showed."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "closable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`mask` attribute",
              "***",
              "The default value is false. ",
              "Specifies whether to apply a background mask."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "mask",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`hideokbutton` attribute",
              "***",
              "The default value is false. If true, the button is hidden."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hideokbutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`hidecancelbutton` attribute",
              "***",
              "The default value is false. If true, the button is hidden."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "hidecancelbutton",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`sendeventonbeforeshow` attribute",
              "***",
              "The name of the boolean signal that will be sent to Native just before the panel is shown."
            ],
            "value": [],
            "name": "sendeventonbeforeshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonaftershow` attribute",
              "***",
              "The name of the boolean signal that will be sent to Native after the panel is shown."
            ],
            "value": [],
            "name": "sendeventonaftershow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonbeforehide` attribute",
              "***",
              "The name of the boolean signal that will be sent to Native before the panel is hidden."
            ],
            "value": [],
            "name": "sendeventonbeforehide",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonafterhide` attribute",
              "***",
              "The name of the boolean signal that will be sent to Native after the panel is hidden."
            ],
            "value": [],
            "name": "sendeventonafterhide",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonok` attribute",
              "***",
              "The name of the boolean signal that will be sent when the OK button is pressed."
            ],
            "value": [],
            "name": "sendeventonok",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventoncancel` attribute",
              "***",
              "The name of the boolean signal that will be sent when the Cancel button is pressed."
            ],
            "value": [],
            "name": "sendeventoncancel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-modal-dialog` element",
          "***",
          "The modal dialog should generally contains an optional header bar with a title, ",
          "an optional message with an optional icon, an optional button 'ok', and 'cancel' buttons."
        ],
        "snippets": [
          {
            "prefix": "ch5-modal-dialog:blank",
            "description": "Crestron Modal Dialog (Blank)",
            "body": [
              "<ch5-modal-dialog>",
              "</ch5-modal-dialog>$0"
            ]
          },
          {
            "prefix": "ch5-modal-dialog:default",
            "description": "Crestron Modal Dialog (Default)",
            "body": [
              "<ch5-modal-dialog receivestateshowpulse=\"${1:trigger_1}\" closable>",
              "    <p>Sample text</p>",
              "    <ch5-image id=\"${2:ex1-img}\" url=\"${3:some_server_url}\">",
              "    </ch5-image>",
              "</ch5-modal-dialog>$0"
            ]
          },
          {
            "prefix": "ch5-modal-dialog:signals",
            "description": "Crestron Modal Dialog Signals",
            "body": [
              "<ch5-modal-dialog",
              "    receivestateshowpulse=\"${1:trigger_1}\"",
              "    closable",
              "    sendeventonshow=\"${1:signal_on_show}\"",
              "    sendeventonbeforeshow=\"${2:signal_on_before_show}\"",
              "    sendeventonaftershow=\"${3:signal_on_after_show}\"",
              "    sendeventonbeforehide=\"${4:signal_on_before_hide}\"",
              "    sendeventonafterhide=\"${5:signal_on_after_hide}\"",
              "    sendeventonok=\"${6:signal_on_ok}\"",
              "    >",
              "    <p>Sample text</p>",
              "    <ch5-image id=\"${7:ex1-img}\" url=\"${8:some_server_url}\">",
              "    </ch5-image>",
              "</ch5-modal-dialog>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The Modal Dialog component is a special-case instance of an overlay panel used primarily to display dialog windows and user prompts.",
        "name": "Ch5 Modal Dialog",
        "tagName": "ch5-modal-dialog",
        "role": "dialog",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`closeicon` attribute",
              "***",
              "A class name of the close icon. It may be a font awesome class."
            ],
            "value": [],
            "name": "closeicon",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "IconClass"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Valid values: 'width', 'height', and 'both'. The component will stretch to ",
              "the available width or the available height in the parent component. Using ",
              "'both' will stretch the component both directions."
            ],
            "value": [
              "both",
              "width",
              "height"
            ],
            "name": "stretch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`overflow` attribute",
              "***",
              "The default value is scroll. ",
              "Valid values: 'scroll' and 'show'. The overflow property specifies what ",
              "happens if content does or does not overflow the component box. ",
              "This is related with stretch property. This property specifies whether to add ",
              "scrollbars when an element's content is too big to fit in a specified area. ",
              "If 'show' is selected, the overflow is not clipped."
            ],
            "value": [
              "scroll",
              "show"
            ],
            "name": "overflow",
            "default": "scroll",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`positionto` attribute",
              "***",
              "If not set, the position will be related to the viewport. ",
              "Positions the component related to either a window or an element by id."
            ],
            "value": [],
            "name": "positionto",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`positionoffset` attribute",
              "***",
              "The default value is top-left. ",
              "Valid values 'top-left', 'top-center', 'top-right', 'bottom-left', 'bottom-center', ",
              "'bottom-right', 'left-center', and 'right-center'. Auto-positions the panel offset ",
              "to the event element's position."
            ],
            "value": [
              "top-left",
              "top-center",
              "top-right",
              "bottom-left",
              "bottom-center",
              "bottom-right",
              "left-center",
              "right-center"
            ],
            "name": "positionoffset",
            "default": "top-left",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`dismissable` attribute",
              "***",
              "The default value is 'true'. If false, the panel won't automatically hide if a touch event occurs outside of it."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "dismissable",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`closable` attribute",
              "***",
              "The default value is 'false'. If true, shows a close icon on the corner of the panel. If false, ",
              "the close icon is not shown."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "closable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receivestatepositionto` attribute ",
              "***",
              "When received, positions to this component."
            ],
            "value": [],
            "name": "receivestatepositionto",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatepositionoffset` attribute",
              "***",
              "when received, positions offset to this component. ",
              "See attribute 'positionOffset' for valid values."
            ],
            "value": [],
            "name": "receivestatepositionoffset",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonbeforeshow` attribute",
              "***",
              "Sends a signal on the overlay panel before show."
            ],
            "value": [],
            "name": "sendeventonbeforeshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonaftershow` attribute",
              "***",
              "Sends a signal on the overlay panel after show."
            ],
            "value": [],
            "name": "sendeventonaftershow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonbeforehide` attribute",
              "***",
              "Sends a signal on overlay panel before hide."
            ],
            "value": [],
            "name": "sendeventonbeforehide",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonafterhide` attribute",
              "***",
              "Sends a signal on overlay panel after hide."
            ],
            "value": [],
            "name": "sendeventonafterhide",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-overlay-panel` element",
          "***",
          "The overlay panel component provides a content container for other components that ",
          "'pop up' on top of and overlays the main content container."
        ],
        "snippets": [
          {
            "prefix": "ch5-overlay-panel:blank",
            "description": "Crestron Overlay Panel (Blank)",
            "body": [
              "<ch5-overlay-panel>",
              "</ch5-overlay-panel>$0"
            ]
          },
          {
            "prefix": "ch5-overlay-panel:default",
            "description": "Crestron Overlay Panel (Default)",
            "body": [
              "<ch5-overlay-panel receivestateshowpulse=\"${1:trigger_1}\" closable>",
              "    <p>Sample text</p>",
              "    <ch5-image id=\"${2:ex1-img}\" url=\"${3:some_server_url}\">",
              "    </ch5-image>",
              "</ch5-overlay-panel>$0"
            ]
          },
          {
            "prefix": "ch5-overlay-panel:signals",
            "description": "Crestron Overlay Panel Signals",
            "body": [
              "<ch5-overlay-panel",
              "    receivestateshowpulse=\"${1:trigger_1}\"",
              "    closable",
              "    sendeventonshow=\"${1:signal_on_show}\"",
              "    sendeventonbeforeshow=\"${2:signal_on_before_show}\"",
              "    sendeventonaftershow=\"${3:signal_on_after_show}\"",
              "    sendeventonbeforehide=\"${4:signal_on_before_hide}\"",
              "    sendeventonafterhide=\"${5:signal_on_after_hide}\"",
              "    >",
              "    <p>Sample text</p>",
              "    <ch5-image id=\"${8:ex1-img}\" url=\"${9:some_server_url}\">",
              "    </ch5-image>",
              "</ch5-overlay-panel>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "This component is used to overlay the content container.",
        "name": "Ch5 Overlay Panel",
        "tagName": "ch5-overlay-panel",
        "role": "dialog",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`color` attribute",
              "***",
              "Set the color for the qr code. Default value is #000000."
            ],
            "value": [],
            "name": "color",
            "default": "#000000",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "string"
          },
          {
            "documentation": [
              "`backgroundColor` attribute",
              "***",
              "Set the background color for the qr code. Default value is #ffffff."
            ],
            "value": [],
            "name": "backgroundcolor",
            "default": "#ffffff",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "string"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Set the width of the qr code. The height of the qr code will be same as width. Default value is 200 and it can range from 160 to 10000. The unit is pixel and should not be set in the attribute."
            ],
            "value": [],
            "name": "size",
            "default": "200",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 160,
                "max": 10000
              }
            ],
            "attributeType": "number"
          },
          {
            "documentation": [
              "`qrCode` attribute",
              "***",
              "Sets the data stored in the QR Code image generated by the widget"
            ],
            "value": [],
            "name": "qrcode",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receiveStateQrCode` attribute",
              "***",
              "You may optionally select a serial join to programmatically change the data stored in the QR Code image generated by the widget."
            ],
            "value": [],
            "name": "receivestateqrcode",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-qrcode` element",
          "***",
          "The QR Code component is designed to provide options to add backgroundColor, color, qrCode, size and receiveStateQrCode."
        ],
        "snippets": [
          {
            "prefix": "ch5-qrcode:blank",
            "description": "Crestron QR Code",
            "body": [
              "<ch5-qrcode>",
              "</ch5-qrcode>$0"
            ]
          },
          {
            "prefix": "ch5-qrcode:all-attributes",
            "description": "Crestron qrcode (All Attributes)",
            "body": [
              "<ch5-qrcode id=\"ch5-qrcode_${1:id}\"",
              "\tqrCode=\"${2:}\"",
              "\tcolor=\"${3:#000000}\"",
              "\tbackgroundColor=\"${4:#ffffff}\"",
              "\tsize=\"${5:200}\"",
              "\treceiveStateQrCode=\"${6:}\">",
              "</ch5-qrcode>$0"
            ]
          },
          {
            "prefix": "ch5-qrcode:default",
            "description": "Crestron qrcode (default)",
            "body": [
              "<ch5-qrcode id=\"ch5-qrcode_${1:id}\"",
              "\tqrCode=\"${2:}\"",
              "\tcolor=\"${3:#000000}\"",
              "\tbackgroundColor=\"${4:#ffffff}\"",
              "\tsize=\"${5:200}\">",
              "</ch5-qrcode>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The QR Code Generator Widget is a programmable control used to display QR Code image desired by the designer.",
        "name": "Ch5 QrCode",
        "tagName": "ch5-qrcode",
        "role": "QR code",
        "componentVersion": "2.10.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "Sets the orientation of the gauge to horizontal(default) or vertical."
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation",
            "default": "horizontal",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`gaugeLedStyle` attribute",
              "***",
              "Determines the graphic features of the gauge. Possible values are rectangle(default) and circle."
            ],
            "value": [
              "rectangle",
              "circle"
            ],
            "name": "gaugeledstyle",
            "default": "rectangle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`primaryStateGraphic` attribute",
              "***",
              "Sets the segment graphic for the largest group of segments. Possible values are green(default), yellow, red, blue, orange, white and inactive."
            ],
            "value": [
              "green",
              "yellow",
              "red",
              "blue",
              "orange",
              "white",
              "inactive"
            ],
            "name": "primarystategraphic",
            "default": "green",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`secondaryStateGraphic` attribute",
              "***",
              "Defines the segment graphic for the second largest group of segments. Possible values are yellow(default), green, red, blue, orange, white and inactive."
            ],
            "value": [
              "green",
              "yellow",
              "red",
              "blue",
              "orange",
              "white",
              "inactive"
            ],
            "name": "secondarystategraphic",
            "default": "yellow",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`tertiaryStateGraphic` attribute",
              "***",
              "Determines the segment graphic for the smallest group of segments. Possible values are red(default), green, yellow, blue, orange, white and inactive."
            ],
            "value": [
              "green",
              "yellow",
              "red",
              "blue",
              "orange",
              "white",
              "inactive"
            ],
            "name": "tertiarystategraphic",
            "default": "red",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`minValue` attribute",
              "***",
              "The minimum value determines the analog value sent to and received from the control system that will reflect the lowest position of the gauge. Default value is 0."
            ],
            "value": [],
            "name": "minvalue",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 65534
              }
            ],
            "attributeType": "number"
          },
          {
            "documentation": [
              "`maxValue` attribute",
              "***",
              "The maximum value determines the analog value sent to and received from the control system that will reflect the topmost point of the gauge. Default value is 65535."
            ],
            "value": [],
            "name": "maxvalue",
            "default": "65535",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 65535
              }
            ],
            "attributeType": "number"
          },
          {
            "documentation": [
              "`numberOfSegments` attribute",
              "***",
              "Sets the number of gauge segments displayed on the gauge. This number is restricted to a maximum of 50 for usability. Default number of segments are 20."
            ],
            "value": [],
            "name": "numberofsegments",
            "default": "20",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 50
              }
            ],
            "attributeType": "number"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "It sets the value for segmented gauge. It can range from 0 to 65535. Default value is 0."
            ],
            "value": [],
            "name": "value",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 65535
              }
            ],
            "attributeType": "number"
          },
          {
            "documentation": [
              "`touchSettable` attribute",
              "***",
              "Enables or disables whether the control is touch settable. Default value is true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "touchsettable",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`sendEventOnClick` attribute",
              "***",
              "User may optionally select a digital join to send a value to the control system. The value goes high when the user places their finger on the gauge and low when it is released."
            ],
            "value": [],
            "name": "sendeventonclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnChange` attribute",
              "***",
              "Send an analog signal value on a change of value in the gauge. "
            ],
            "value": [],
            "name": "sendeventonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateValue` attribute",
              "***",
              "Analog join to receive feedback from the control system. Note that if no join is selected, the gauge will not update its position."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-segmented-gauge` element",
          "***",
          ""
        ],
        "snippets": [
          {
            "prefix": "ch5-segmented-gauge:blank",
            "description": "Crestron segmented gauge",
            "body": [
              "<ch5-segmented-gauge>",
              "</ch5-segmented-gauge>$0"
            ]
          },
          {
            "prefix": "ch5-segmented-gauge:all-attributes",
            "description": "Crestron segmented gauge (All Attributes)",
            "body": [
              "<ch5-segmented-gauge id=\"ch5-segmented-gauge_${1:id}\"",
              "\torientation=\"${2:horizontal}\"",
              "\tgaugeLedStyle=\"${3:rectangle}\"",
              "\tprimaryStateGraphic=\"${4:green}\"",
              "\tsecondaryStateGraphic=\"${5:yellow}\"",
              "\ttertiaryStateGraphic=\"${6:red}\"",
              "\tminValue=\"${7:0}\"",
              "\tmaxValue=\"${8:65535}\"",
              "\tnumberOfSegments=\"${9:20}\"",
              "\tvalue=\"${10:0}\"",
              "\ttouchSettable=\"${11:true}\"",
              "\tsendEventOnClick=\"${12:}\"",
              "\tsendEventOnChange=\"${13:}\"",
              "\treceiveStateValue=\"${14:}\">",
              "</ch5-segmented-gauge>$0"
            ]
          },
          {
            "prefix": "ch5-segmented-gauge:default",
            "description": "Crestron segmented gauge (Default)",
            "body": [
              "<ch5-segmented-gauge id=\"ch5-segmented-gauge_${1:id}\"",
              "\torientation=\"${2:horizontal}\"",
              "\tgaugeLedStyle=\"${3:rectangle}\"",
              "\tprimaryStateGraphic=\"${4:green}\"",
              "\tsecondaryStateGraphic=\"${5:yellow}\"",
              "\ttertiaryStateGraphic=\"${6:red}\"",
              "\tminValue=\"${7:0}\"",
              "\tmaxValue=\"${8:65535}\"",
              "\tnumberOfSegments=\"${9:20}\"",
              "\tvalue=\"${10:0}\"",
              "\ttouchSettable=\"${11:true}\">",
              "</ch5-segmented-gauge>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The Segmented Gauge is used to display feedback from an analog join by scaling the analog value on the touch panel instead of via programming on the control system.",
        "name": "Ch5 Segmented Gauge",
        "tagName": "ch5-segmented-gauge",
        "role": "segmented-gauge",
        "componentVersion": "2.2.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "The default value is 1. ",
              "The initial number of entries in a selection. The default value is 1. The accepted range is 1-30."
            ],
            "value": [],
            "name": "size",
            "default": "1",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 30
              }
            ],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "The default value is first. ",
              "Valid values: 'first' and 'last'. ",
              "This attribute only applies when a template is not provided ",
              "and the implied template is in use. If a template is provided, ",
              "this property is ignored."
            ],
            "value": [
              "first",
              "last"
            ],
            "name": "iconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`selectedvalue` attribute",
              "***",
              "The default value is -1. Set to true if multiple selections can be selected. ",
              "If true, the value of the selection will be an array of values."
            ],
            "value": [],
            "name": "selectedvalue",
            "default": "-1",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`panelscrollheight` attribute",
              "***",
              "The default value is 0. ",
              "height of the panel containing the list of options, supports px, vw, vh and % (% is based on the parent height of the ch5-select. "
            ],
            "value": [],
            "name": "panelscrollheight",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 99
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`minwidth` attribute",
              "***",
              "The min width of the selection container."
            ],
            "value": [],
            "name": "minwidth",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`maxwidth` attribute",
              "***",
              "The max width of the selection container."
            ],
            "value": [],
            "name": "maxwidth",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`minheight` attribute",
              "***",
              "The min height of the selection container."
            ],
            "value": [],
            "name": "minheight",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`maxheight` attribute",
              "***",
              "The max height of the selection container."
            ],
            "value": [],
            "name": "maxheight",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`mode` attribute",
              "***",
              "The default value is 'plain'. Two values are possible as show below. ",
              "plain - The select menu opens and closes as clicked by user. ",
              "panel – The select menu stays open even when not in focus."
            ],
            "value": [
              "plain",
              "panel"
            ],
            "name": "mode",
            "default": "plain",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "The default value is direct. ",
              "Allows the form submission functionality. Valid values: 'direct', 'submit'."
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode",
            "default": "direct",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`signalvaluesynctimeout` attribute",
              "***",
              "The default valus is 1500. Defines the time between when the user releases the ",
              "toggle handle and the time the toggle will check if the ",
              "value is equal with the value from the signal. If the value is not equal, it will ",
              "apply the value from the signal automatically. Apply only for feedbackMode direct."
            ],
            "value": [],
            "name": "signalvaluesynctimeout",
            "default": "1500",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`indexid` attribute",
              "***",
              "Provides the name of the offset identifier to be substituted with ",
              "a 1-based index of the item in a list within the template item ",
              "surrounded by '{{ delimiters }}' delimiters."
            ],
            "value": [],
            "name": "indexid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noneselectedprompt` attribute",
              "***",
              "Showed when no items are selected."
            ],
            "value": [],
            "name": "noneselectedprompt",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`multiselect` attribute",
              "***",
              "The default value is false. Set to true if multiple selections can be selected. ",
              "If true, the value of the selection will be an array of values."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "multiselect",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`resize` attribute",
              "***",
              "The default value is false. ",
              "If true, the options panel will be resized to fit content width. ",
              "The maximum width and height cannot be bigger then parent HTML element."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "resize",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`onclean` attribute",
              "***",
              "Runs when a clean event is initiated."
            ],
            "value": [
              "object"
            ],
            "name": "onclean",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`ondirty` attribute",
              "***",
              "Runs when a dirty event is initiated."
            ],
            "value": [
              "object"
            ],
            "name": "ondirty",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatevalue` attribute",
              "***",
              "When received, changes the selected value of this selector. This is only applicable for ",
              "multiselect=false. A 1-based index is expected. ",
              "Value 0 indicates all will be unselected."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatesize` attribute",
              "***",
              "Sets the number of items in this component."
            ],
            "value": [],
            "name": "receivestatesize",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatetemplatevars` attribute",
              "***",
              "A JSON-encoded array of name/value objects, with one per item created from the template."
            ],
            "value": [],
            "name": "receivestatetemplatevars",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonfocus` attribute",
              "***",
              "Send a signal on the focus event. Set to true if in focus and set to false if not in focus."
            ],
            "value": [],
            "name": "sendeventonfocus",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonchange` attribute",
              "***",
              "Sends a signal value on the selected change. This is only applicable for multiselect=false. ",
              "A 1-based index is expected. Value 0 indicates all will be unselected."
            ],
            "value": [],
            "name": "sendeventonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-select` element",
          "***",
          "The select component enables the user to select one or more choices from a list of options. ",
          "The select component will not be a wrapper around the HTML input type select because other options ",
          "must be covered that are not available on HTML input type select."
        ],
        "snippets": [
          {
            "prefix": "ch5-select:blank",
            "description": "Crestron Select (Blank)",
            "body": [
              "<ch5-select>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:all",
            "description": "Crestron Select (All Attributes)",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\ticonposition=\"${2|first,last|}\"",
              "\tmultiselect",
              "\tselectedvalue=\"${4}\"",
              "\tnoneselectedprompt=\"${5}\"",
              "\tpanelscrollheight=\"${6}\"",
              "\tminwidth=\"${7}\"",
              "\tmaxwidth=\"${8}\"",
              "\tminheight=\"${9}\"",
              "\tmaxheight=\"${8}\"",
              "\tresize=\"${9|true,false|}\"",
              "\tmode=\"${10|plain,panel|}\"",
              "\tfeedbackmode=\"${11|direct,submit|}\"",
              "\tsignalvaluesynctimeout=\"${12|1500|}\"",
              "\tindexid=\"${13|idx|}\"",
              "\treceivestatevalue=\"${14}\"",
              "\treceivestatesize=\"${15}\"",
              "\treceivestatetemplatevars=\"${16}\"",
              "\tsendeventonfocus=\"${17}\"",
              "\tsendeventonchange=\"${18}\">",
              "\t<template>",
              "\t\t<ch5-select-option receivestateselected=\"${19}\"",
              "\t\t\treceivestatelabel=\"${20}\"",
              "\t\t\treceivestateurl=\"${21}\"",
              "\t\t\treceivestatescriptlabelhtml=\"${22}\"",
              "\t\t\tsendeventonclick=\"${23}\">",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:single-selection",
            "description": "Crestron Select (single selection using receiveStateValue and sendEventOnChange",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\tselectedvalue=\"${2}\"",
              "\tnoneselectedprompt=\"${3}\"",
              "\tpanelscrollheight=\"${4}\"",
              "\tminwidth=\"${5}\"",
              "\tmaxwidth=\"${6}\"",
              "\tminheight=\"${7}\"",
              "\tmaxheight=\"${8}\"",
              "\tresize=\"${9|true,false|}\"",
              "\tmode=\"${10|plain,panel|}\"",
              "\tfeedbackmode=\"${11|direct,submit|}\"",
              "\tsignalvaluesynctimeout=\"${12|1500|}\"",
              "\tindexid=\"${13|idx|}\"",
              "\treceivestatevalue=\"${14}\"",
              "\tsendeventonchange=\"${15}\">",
              "\t<template>",
              "\t\t<ch5-select-option>",
              "\t\t\t<span>Option {{idx}}</span>",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:single-selection2",
            "description": "Crestron Select (single selection using receiveStateValue and ch5-select-option.sendEventOnClick)",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\tselectedvalue=\"${2}\"",
              "\tnoneselectedprompt=\"${3}\"",
              "\tpanelscrollheight=\"${4}\"",
              "\tminwidth=\"${5}\"",
              "\tmaxwidth=\"${6}\"",
              "\tminheight=\"${7}\"",
              "\tmaxheight=\"${8}\"",
              "\tresize=\"${9|true,false|}\"",
              "\tmode=\"${10|plain,panel|}\"",
              "\tfeedbackmode=\"${11|direct,submit|}\"",
              "\tsignalvaluesynctimeout=\"${12|1500|}\"",
              "\tindexid=\"${13|idx|}\"",
              "\treceivestatevalue=\"${14}\">",
              "\t<template>",
              "\t\t<ch5-select-option sendeventonclick=\"${15}\">",
              "\t\t\t<span>Option {{idx}}</span>",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:single-selection3",
            "description": "Crestron Select (single selection using ch5-select-option.receiveStateSelected and ch5-select-option.sendEventOnClick)",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\tselectedvalue=\"${2}\"",
              "\tnoneselectedprompt=\"${3}\"",
              "\tpanelscrollheight=\"${4}\"",
              "\tminwidth=\"${5}\"",
              "\tmaxwidth=\"${6}\"",
              "\tminheight=\"${7}\"",
              "\tmaxheight=\"${8}\"",
              "\tresize=\"${9|true,false|}\"",
              "\tmode=\"${10|plain,panel|}\"",
              "\tfeedbackmode=\"${11|direct,submit|}\"",
              "\tsignalvaluesynctimeout=\"${12|1500|}\"",
              "\tindexid=\"${13|idx|}\"",
              "\treceivestatevalue=\"${14}\">",
              "\t<template>",
              "\t\t<ch5-select-option sendeventonclick=\"${15}\"",
              "\t\t\treceivestateselected=\"${16}\">",
              "\t\t\t<span>Option {{idx}}</span>",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:multiselection",
            "description": "Crestron Select (multi selection using ch5-select-option.receiveStateSelected, ch5-select-option.sendEventOnClick and ch5-select-option.receiveStateLabel)",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\tnoneselectedprompt=\"${2}\"",
              "\tpanelscrollheight=\"${3}\"",
              "\tminwidth=\"${4}\"",
              "\tmaxwidth=\"${5}\"",
              "\tminheight=\"${6}\"",
              "\tmaxheight=\"${7}\"",
              "\tresize=\"${8|true,false|}\"",
              "\tmode=\"${9|plain,panel|}\"",
              "\tmultiselect",
              "\tfeedbackmode=\"${10|direct,submit|}\"",
              "\tindexid=\"${11|idx|}\">",
              "\t<template>",
              "\t\t<ch5-select-option sendeventonclick=\"${12}\"",
              "\t\t\treceivestateselected=\"${13}\"",
              "\t\t\treceivestatelabel=\"${14}\">",
              "\t\t\t<span>Option {{label}}</span>",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          },
          {
            "prefix": "ch5-select:default",
            "description": "Crestron Select (using default template)",
            "body": [
              "<ch5-select size=\"${1}\"",
              "\ticonposition=\"${2|first,last|}\"",
              "\tselectedvalue=\"${3}\"",
              "\tnoneselectedprompt=\"${4}\"",
              "\tpanelscrollheight=\"${5}\"",
              "\tminwidth=\"${6}\"",
              "\tmaxwidth=\"${7}\"",
              "\tminheight=\"${8}\"",
              "\tmaxheight=\"${9}\"",
              "\tresize=\"${10|true,false|}\"",
              "\tmode=\"${11|plain,panel|}\"",
              "\tfeedbackmode=\"${12|direct,submit|}\"",
              "\tsignalvaluesynctimeout=\"${13|1500|}\"",
              "\tindexid=\"${14|idx|}\">",
              "\t<template>",
              "\t\t<ch5-select-option receivestateselected=\"${15}\"",
              "\t\t\treceivestatelabel=\"${16}\"",
              "\t\t\treceivestateurl=\"${17}\"",
              "\t\t\treceivestatescriptlabelhtml=\"${18}\"",
              "\t\t\tsendeventonclick=\"${19}\">",
              "\t\t</ch5-select-option>",
              "\t</template>",
              "</ch5-select>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "template",
            "optional": false,
            "childElements": [
              {
                "tagName": "ch5-select-option",
                "optional": true,
                "childElements": []
              }
            ]
          }
        ],
        "description": "Ch5 Select inherits the default html select, but provides a lot of extra features.",
        "name": "Ch5 Select",
        "tagName": "ch5-select",
        "role": "listbox",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "The default value is 'first'. Valid values: 'first' and 'last'. ",
              "This attribute only applies when a template is not provided ",
              "and the implied template is in use. If a template is provided, ",
              "this property is ignored."
            ],
            "value": [
              "first",
              "last"
            ],
            "name": "iconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`useDefaultTmpl` attribute",
              "***",
              "The default value is false.",
              "Provides the ability to initialise ch5-select with the default template."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usedefaulttmpl",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receivestateselected` attribute",
              "***",
              "When received, applies a true value to the selected class (ch5-button--selected)."
            ],
            "value": [],
            "name": "receivestateselected",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatelabel` attribute",
              "***",
              "The label or name of the ch5-select-option is received via this attribute."
            ],
            "value": [],
            "name": "receivestatelabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateurl` attribute",
              "***",
              "Provides the image or icon url."
            ],
            "value": [],
            "name": "receivestateurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatescriptlabelhtml` attribute",
              "***",
              "A signal script evaluation will be applied to the ",
              "button.innerHTML. Allows for multiline, multi-styled labels."
            ],
            "value": [],
            "name": "receivestatescriptlabelhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonclick` attribute",
              "***",
              "Sends an on click or tap event (mouse or swipe up and down quickly). ",
              "Use this when the control system takes an action on the rising edge from false to true of a boolean digital event. ",
              "Examples include the SIMPL Logic Symbol for Toggle with a description of ",
              "Digital input <clock> 'High/1 (rising edge) = Toggle; Low/0 = No effect'."
            ],
            "value": [],
            "name": "sendeventonclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-select-option` element",
          "***",
          "An extension to standard HTML option element."
        ],
        "snippets": [],
        "childElements": [],
        "description": "This is a child element for ch5-select component.",
        "name": "Ch5 Select option",
        "tagName": "ch5-select-option",
        "role": "option",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "It sets the value of signal level gauge."
            ],
            "value": [],
            "name": "value",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 65535
              }
            ],
            "attributeType": "number"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "Sets the orientation (horizontal or vertical) of the gauge. Default value is 'horizontal'."
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation",
            "default": "horizontal",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`minValue` attribute",
              "***",
              "The minimum value determines the analog value sent to and received from the control system that will reflect the lowest position of the gauge. Default value is 0 and it can range from 0 to 65534."
            ],
            "value": [],
            "name": "minvalue",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 65534
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`maxValue` attribute",
              "***",
              "The maximum value determines the analog value sent to and received from the control system that will reflect the topmost point of the gauge. Default value is 65535 and it can range from 1 to 65535."
            ],
            "value": [],
            "name": "maxvalue",
            "default": "65535",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 65535
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`numberOfBars` attribute",
              "***",
              "Sets the number of visible bars on the gauge. Default value is 6 and it can range from 1 to 15."
            ],
            "value": [],
            "name": "numberofbars",
            "default": "6",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 15
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`signalBarSpacing` attribute",
              "***",
              "Sets the spacing (in pixels) between bars in the control. Default value is 1 and it can range from 0 to 6"
            ],
            "value": [],
            "name": "signalbarspacing",
            "default": "1",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 6
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`receiveStateValue` attribute",
              "***",
              "The gauge value gets updated with the newly received value from signal."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "defines the different sizes of gauge. Possible values are regular, small, large, x-large. Default value is 'regular'."
            ],
            "value": [
              "regular",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": "regular",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-signal-level-gauge` element",
          "***",
          "The Signal Level Gauge control is used to display the level of a signal using feedback from an Analog Join represented by bars using a predefined scale.  Additionally, the control can be used to scale an analog value on the touch panel instead of programming on the control system."
        ],
        "snippets": [
          {
            "prefix": "ch5-signal-level-gauge:blank",
            "description": "Crestron SignalLevelGauge",
            "body": [
              "<ch5-signal-level-gauge>",
              "</ch5-signal-level-gauge>$0"
            ]
          },
          {
            "prefix": "ch5-signal-level-gauge:default",
            "description": "Crestron SignalLevelGauge",
            "body": [
              "<ch5-signal-level-gauge signalBarSpacing=\"${1:1}\"",
              "\tvalue=\"${2:0}\"",
              "\treceiveStateValue=\"${3}\">",
              "</ch5-signal-level-gauge>$0"
            ]
          },
          {
            "prefix": "ch5-signal-level-gauge:all-attributes",
            "description": "Crestron SignalLevelGauge (All Attributes)",
            "body": [
              "<ch5-signal-level-gauge orientation=\"${1|horizontal,vertical|}\"",
              "\treceiveStateValue=\"${2}\"",
              "\tsignalBarSpacing=\"${3:1}\"",
              "\tminValue=\"${4:0}\"",
              "\tmaxValue=\"${5:65535}\"",
              "\tnumberOfBars=\"${6:6}\"",
              "\tvalue=\"${7:0}\"",
              "\tsize=\"${8|regular,small,large,x-large|}\">",
              "</ch5-signal-level-gauge>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The Signal Level Gauge displays feedback from an Analog Join.",
        "name": "Ch5 Signal Level Gauge",
        "tagName": "ch5-signal-level-gauge",
        "role": "signal-level-gauge",
        "componentVersion": "2.1.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "Positions the subpage elements in a horizontal or vertical orientation. Default value is 'horizontal'."
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation",
            "default": "horizontal",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`contractName` attribute",
              "***",
              "The contract Name is an encapsulated join type that links a smart control with a CED in SIMPL."
            ],
            "value": [],
            "name": "contractname",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`useContractForEnable` attribute",
              "***",
              "When true, contract 'Enable' state determines if the list is enabled. When false, the 'receiveStateEnable' join may be applied. Consistent with other components, if the 'receiveStateEnable' join is provide, the value of that join determines if the component is enabled. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforenable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForShow` attribute",
              "***",
              " When true, contract 'Show' state determines if the list is enabled. When false, the 'receiveStateShow' join may be applied. Consistent with other components, if the 'receiveStateShow' join is provide, the value of that join determines if the component is visible. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForItemEnable` attribute",
              "***",
              "When true, contract 'List_Item{{x}}_Enable' state determines if an individual subpage x is enabled. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforitemenable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForItemShow` attribute",
              "***",
              "When true, contract 'List_Item{{x}}_Visible' state determines if an individual subpage x is visible. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforitemshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForCustomStyle` attribute",
              "***",
              "contract for custom style "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforcustomstyle",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForCustomClass` attribute",
              "***",
              "contract for custom class"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforcustomclass",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForNumItems` attribute",
              "***",
              "When false, the 'receiveStateNumberOfItems' join may be applied. Consistent with other components, if the 'receiveStateNumberOfItems' join is provide, the value of that join determines how many items in the list to show. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractfornumitems",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`endless` attribute",
              "***",
              "The default value is false. If false, continued swiping when reaching end of list reveals no items beyond the last. If true, if the attribute is added without a value, the first list item will virtually follow the last item when the end of the list is reached. Swiping towards the beginning of the list items will also show the last item prior to the first. Note: Endless is set to false whenever there are multiple rows and columns."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "endless",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`centerItems` attribute",
              "***",
              "It will center the list items, if the number and size of the list items is less than the size of the control.If Stretch attribute is set to both then stretch attribute will take more priority than centerItems attribute. Default value is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "centeritems",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`rows` attribute",
              "***",
              "Sets the number of rows the contents of the list will be divided into.  It can range from 1 to 600 and default value is 1."
            ],
            "value": [],
            "name": "rows",
            "default": "1",
            "hideWhen": [],
            "showWhen": [
              {
                "orientation": "horizontal"
              }
            ],
            "limits": [
              {
                "min": 1,
                "max": 600
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`columns` attribute",
              "***",
              "Sets the number of columns the contents of the list will be divided into. It can range from 1 to 600 and default value is 1."
            ],
            "value": [],
            "name": "columns",
            "default": "1",
            "hideWhen": [],
            "showWhen": [
              {
                "orientation": "vertical"
              }
            ],
            "limits": [
              {
                "min": 1,
                "max": 600
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`scrollToPosition` attribute",
              "***",
              "Indicates the index of the subpage to scrollTo. This is applicable only for single row and column. The default value is 0, Minimum value is 0 and Maximum value is 599."
            ],
            "value": [],
            "name": "scrolltoposition",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 599
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`scrollbar` attribute",
              "***",
              "Determines whether or not the scrollbar will be visible on the subpage-reference list. Default Value is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "scrollbar",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`booleanJoinIncrement` attribute",
              "***",
              "The Digital Join Increment will be used to increment the digital joins of each Sub Page reference in the list. If 0, the value of the Join Increment will be used."
            ],
            "value": [],
            "name": "booleanjoinincrement",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`numericJoinIncrement` attribute",
              "***",
              "The Analog Join Increment will be used to increment the analog joins of each Sub Page reference in the list. If 0, the value of the Join Increment will be used."
            ],
            "value": [],
            "name": "numericjoinincrement",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`stringJoinIncrement` attribute",
              "***",
              "The Serial Join Increment will be used to increment the serial joins of each Sub Page reference in the list. If 0, the value of the Join Increment will be used."
            ],
            "value": [],
            "name": "stringjoinincrement",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`subpageReceiveStateEnable` attribute",
              "***",
              "Enables use of enable joins on each list item. With this enabled, if a list item is not programmatically driven HIGH through the control system, the list item will be disabled."
            ],
            "value": [],
            "name": "subpagereceivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`subpageReceiveStateShow` attribute",
              "***",
              "Enables use of visibility joins on each list item.If a list item is not programmatically driven HIGH through the control system, the list item will not be visible."
            ],
            "value": [],
            "name": "subpagereceivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`widgetId` attribute",
              "***",
              "It provides the widgetId to be included in the subpage reference."
            ],
            "value": [],
            "name": "widgetid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`subpageReceiveStateScrollTo` attribute",
              "***",
              "It scrolls to the position of the subpage in subpage-reference list based on the signal received."
            ],
            "value": [],
            "name": "subpagereceivestatescrollto",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "The default value is null. Valid values are null and 'both'. NOTE: stretch is set to null whenever there are multiple rows and columns. Stretch attribute is set to both will take more priority than centerItems attribute."
            ],
            "value": [
              "both"
            ],
            "name": "stretch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`numberOfItems` attribute",
              "***",
              "Specifies the number of subpage references to be added to the list.Its Min value is 1 and Max value is 600. Its default value is 10."
            ],
            "value": [],
            "name": "numberofitems",
            "default": "10",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 600
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`receiveStateNumberOfItems` attribute",
              "***",
              "It sets the number of subpage references to be added to the list on the basis of signal received."
            ],
            "value": [],
            "name": "receivestatenumberofitems",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`indexId` attribute",
              "***",
              "This attribute helps to replace the pattern with the index on the ch5-subpage-reference-list"
            ],
            "value": [],
            "name": "indexid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`loadItems:` attribute",
              "***",
              "The default value is visible-only. The possible values are visible-only, load-new, all. This attribute allows for subpages to be created and loaded on demand. Will determine if subpages are removed or not after they are no longer in visibility."
            ],
            "value": [
              "visible-only",
              "load-new",
              "all"
            ],
            "name": "loaditems",
            "default": "visible-only",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-subpage-reference-list` element",
          "***",
          "The Subpage Reference List is a component that has a collection of widgets that can be used in a CH5 project."
        ],
        "snippets": [
          {
            "prefix": "ch5-subpage-reference-list:blank",
            "description": "Crestron subpage reference list",
            "body": [
              "<ch5-subpage-reference-list>",
              "</ch5-subpage-reference-list>$0"
            ]
          },
          {
            "prefix": "ch5-subpage-reference-list:default",
            "description": "Crestron subpage reference list (default)",
            "body": [
              "<ch5-subpage-reference-list id=\"ch5-subpage-reference-list_${1:id}\"",
              "\twidgetId=\"${2:}\"",
              "\torientation=\"${3:horizontal}\"",
              "\tscrollbar=\"${4:false}\"",
              "\tcenterItems=\"${5:false}\"",
              "\tendless=\"${6:false}\"",
              "\tnumberOfItems=\"${7:10}\"",
              "\trows=\"${8:1}\"",
              "\tcolumns=\"${9:1}\"",
              "\tindexId=\"${10:}\"",
              "\tloadItems=\"${11:visible-only}\"",
              "\tscrollToPosition=\"${12:0}\">",
              "</ch5-subpage-reference-list>$0"
            ]
          },
          {
            "prefix": "ch5-subpage-reference-list:all-attributes",
            "description": "Crestron subpage reference list (All Attributes)",
            "body": [
              "<ch5-subpage-reference-list id=\"ch5-subpage-reference-list_${1:id}\"",
              "\torientation=\"${2|horizontal,vertical|}\"",
              "\tcontractName=\"${3:}\"",
              "\tendless=\"${4:false}\"",
              "\tcenterItems=\"${5:false}\"",
              "\trows=\"${6:1}\"",
              "\tcolumns=\"${7:1}\"",
              "\tscrollbar=\"${8:false}\"",
              "\tbooleanJoinIncrement=\"${9:}\"",
              "\tnumericJoinIncrement=\"${10:}\"",
              "\tstringJoinIncrement=\"${11:}\"",
              "\tsubpageReceiveStateEnable=\"${12:}\"",
              "\tsubpageReceiveStateShow=\"${13:}\"",
              "\twidgetId=\"${14:}\"",
              "\tsubpageReceiveStateScrollTo=\"${15:}\"",
              "\tnumberOfItems=\"${16:10}\"",
              "\treceiveStateNumberOfItems=\"${17:}\"",
              "\tscrollToPosition=\"${18:}\"",
              "\tuseContractForEnable=\"${19:false}\"",
              "\tuseContractForShow=\"${20:false}\"",
              "\tuseContractForItemEnable=\"${21:false}\"",
              "\tuseContractForItemShow=\"${22:false}\"",
              "\tuseContractForCustomStyle=\"${23:false}\"",
              "\tuseContractForCustomClass=\"${24:false}\"",
              "\tuseContractForNumItems=\"${25:false}\"",
              "\tloadItems=\"${26:visible-only}\"",
              "\tindexId=\"${27:}\">",
              "</ch5-subpage-reference-list>$0"
            ]
          },
          {
            "prefix": "ch5-subpage-reference-list:contractbased",
            "description": "Crestron Subpage Reference List",
            "body": [
              "<ch5-subpage-reference-list id=\"ch5-subpage-reference-list_${1:id}\"",
              "\tcontractName=\"${2:}\">",
              "</ch5-subpage-reference-list>$0"
            ]
          },
          {
            "prefix": "ch5-subpage-reference-list:contractbased-attributes",
            "description": "Crestron Button List",
            "body": [
              "<ch5-subpage-reference-list id=\"ch5-subpage-reference-list_${1:id}\"",
              "\tcontractName=\"${2:}\"",
              "\tuseContractForEnable=\"${3:false}\"",
              "\tuseContractForShow=\"${4:false}\"",
              "\tuseContractForItemEnable=\"${5:false}\"",
              "\tuseContractForItemShow=\"${6:false}\"",
              "\tuseContractForCustomStyle=\"${7:false}\"",
              "\tuseContractForCustomClass=\"${8:false}\"",
              "\tuseContractForNumItems=\"${9:false}\">",
              "</ch5-subpage-reference-list>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The Subpage Reference List allows multiple instances of a given widget to be displayed and managed in a list.",
        "name": "Ch5 Subpage Reference List",
        "tagName": "ch5-subpage-reference-list",
        "role": "subpage-reference-list",
        "componentVersion": "2.3.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`key` attribute",
              "***",
              "Used to set the type of button i.e on ,off."
            ],
            "value": [
              "on",
              "off"
            ],
            "name": "key",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "Used to set the label displayed for the on/off button."
            ],
            "value": [],
            "name": "label",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "string"
          },
          {
            "documentation": [
              "`labelInnerHTML` attribute",
              "***",
              "Used to set the label displayed for the on/off button. Takes the preference over the label attribute."
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "string"
          },
          {
            "documentation": [
              "`iconClass` attribute",
              "***",
              "The iconClass attribute with Font Awesome icons and Material Icons. We can declare more than one css class in the iconClass attribute."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "string"
          },
          {
            "documentation": [
              "`iconurl` attribute",
              "***",
              "The iconUrl attribute with SVG icons and PNG Icons. We can pass only one url in the iconUrl attribute."
            ],
            "value": [],
            "name": "iconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "string"
          },
          {
            "documentation": [
              "`sendeventonclick` attribute",
              "***",
              "Sends a high signal when user places the finger on the control and low signal when finger is released."
            ],
            "value": [],
            "name": "sendeventonclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatelabel` attribute",
              "***",
              "When received, applies the value to set the label displayed for the on/off button."
            ],
            "value": [],
            "name": "receivestatelabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateiconclass` attribute",
              "***",
              "After receiving the signal iconClass value from control system,It sets the icon class received from the control system."
            ],
            "value": [],
            "name": "receivestateiconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateiconurl` attribute",
              "***",
              "After receiving the signal iconUrl value from control system, this value is applied to the iconUrl."
            ],
            "value": [],
            "name": "receivestateiconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`iconUrlFillType` attribute",
              "***",
              "Sets the icon url fill type. Default value is 'null'. Applicable values are 'null', 'stretch', 'stretch-aspect', 'center', 'tile', 'initial'. Uses the css property background-size for the implementation."
            ],
            "value": [
              "stretch",
              "stretch-aspect",
              "center",
              "tile",
              "initial"
            ],
            "name": "iconurlfilltype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Valid values: 'default', 'primary', 'info', 'text', 'danger', 'warning', 'success', 'secondary'.",
              "Overrides the appearance of the slider button with alternative CSS ",
              "If no 'type' is provided, the type of ",
              "'default' is used."
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "type",
            "default": "default",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`halignlabel` attribute",
              "***",
              "Valid values: 'left', 'right', 'center'.",
              "When the hAlignLabel property is set, the label and the icon of the button are horizontally aligned. ",
              "The center property sets the horizontal alignment of the label to the center of the button. ",
              "The left property sets the horizontal alignment of the label to the left of the button. ",
              "The right property sets the horizontal alignment of the label to the right of the button. "
            ],
            "value": [
              "left",
              "right",
              "center"
            ],
            "name": "halignlabel",
            "default": "center",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`valignlabel` attribute",
              "***",
              "Valid values: 'top', 'bottom', 'middle'.",
              "When the vAlignLabel property is set, the label and the icon of the button are vertically aligned. ",
              "The middle property sets the vertical alignment of the label to the middle of the button. ",
              "The top property sets the vertical alignment of the label to the top of the button. ",
              "The bottom property sets the vertical alignment of the label to the bottom of the button. "
            ],
            "value": [
              "middle",
              "top",
              "bottom"
            ],
            "name": "valignlabel",
            "default": "middle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`selected` attribute",
              "***",
              "The default value is false.",
              "This property reflects the selected state of the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "selected",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`pressed` attribute",
              "***",
              "The default value is false.",
              "This property reflects the pressed state of the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "pressed",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`shape` attribute",
              "***",
              "The default value is 'rounded-rectangle'. Valid values: 'rounded-rectangle', ",
              "'rectangle', 'tab', 'circle', 'oval'. The shape of the button."
            ],
            "value": [
              "rounded-rectangle",
              "rectangle",
              "tab",
              "circle",
              "oval"
            ],
            "name": "shape",
            "default": "rounded-rectangle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          }
        ],
        "documentation": [
          "`ch5-slider-button` element",
          "***",
          ""
        ],
        "snippets": [
          {
            "prefix": "ch5-slider-button:blank",
            "description": "Crestron Slider Button",
            "body": [
              "<ch5-slider-button>",
              "</ch5-slider-button>$0"
            ]
          },
          {
            "prefix": "ch5-slider-button:all-attributes",
            "description": "Crestron Slider Button (All Attributes)",
            "body": [
              "<ch5-slider-button id=\"ch5-slider-button_${1:id}\"",
              "\tkey=\"${2:}\"",
              "\tlabel=\"${3:}\"",
              "\ticonClass=\"${4:}\"",
              "\ticonUrl=\"${5:}\"",
              "\tsendEventOnClick=\"${6:}\"",
              "\treceiveStateLabel=\"${7:}\"",
              "\treceiveStateIconClass=\"${8:}\"",
              "\tselected=\"${9:}\"",
              "\tpressed=\"${10:}\"",
              "\tshape=\"${11|rounded-rectangle,rectangle,tab,circle,oval|}\"",
              "\ttype=\"${12|default,primary,info,text,danger,warning,success,secondary|}\"",
              "\thalignlabel=\"${13|center,left,right|}\"",
              "\tvalignlabel=\"${14|middle,top,bottom|}\"",
              "\tlabelInnerHtml=\"${15:}\"",
              "\treceiveStateIconUrl=\"${16:}\">",
              "</ch5-slider-button>$0"
            ]
          },
          {
            "prefix": "ch5-slider-button:default",
            "description": "Crestron Slider Button (default)",
            "body": [
              "<ch5-slider-button id=\"ch5-slider-button_${1:id}\"",
              "\tkey=\"${2:on}\"",
              "\tlabel=\"${3:}\">",
              "<ch5-slider-button>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-slider-button-label",
            "optional": true,
            "childElements": [
              {
                "tagName": "template",
                "optional": false,
                "childElements": []
              }
            ]
          }
        ],
        "description": "Ch5 Slider Button tag provide the ability to set on/off buttons of the advance slider.",
        "name": "Ch5 Slider Button",
        "tagName": "ch5-slider-button",
        "role": "slider-button",
        "componentVersion": "2.4.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`label` attribute",
              "***",
              "It adds the label to the slider Title."
            ],
            "value": [],
            "name": "label",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`labelInnerHTML` attribute",
              "***",
              "Used to set the label displayed for the title of the advanced slider. Takes the preference over the label attribute."
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "string"
          },
          {
            "documentation": [
              "`receiveStateLabel` attribute",
              "***",
              "When received, applies the value to set the label displayed for the title of the advance slider."
            ],
            "value": [],
            "name": "receivestatelabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          }
        ],
        "documentation": [
          "`ch5-slider-title-label` element",
          "***",
          ""
        ],
        "snippets": [
          {
            "prefix": "ch5-slider-title-label:blank",
            "description": "Crestron Slider Title Label",
            "body": [
              "<ch5-slider-title-label>",
              "\t<template>",
              "\t$1",
              "\t</template>",
              "</ch5-slider-title-label>$0"
            ]
          },
          {
            "prefix": "ch5-slider-title-label:all-attributes",
            "description": "Crestron Slider Title Label (All Attributes)",
            "body": [
              "<ch5-slider-title-label id=\"ch5-slider-title-label_${1:id}\"",
              "\tlabel=\"${2:}\"",
              "\tlabelInnerHtml=\"${3:}\"",
              "\treceiveStateLabel=\"${4:}\">",
              "</ch5-slider-title-label>$0"
            ]
          },
          {
            "prefix": "ch5-slider-title-label:default",
            "description": "Crestron Slider Title Label (Default)",
            "body": [
              "<ch5-slider-title-label label=\"${1:}\">",
              "</ch5-slider-title-label>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "template",
            "optional": false,
            "childElements": []
          }
        ],
        "description": "Ch5 Slider title Label tag provide the ability to set label of the title of the advance slider.",
        "name": "Ch5 slider-title-Label",
        "tagName": "ch5-slider-title-label",
        "role": "slider-title-label",
        "componentVersion": "2.4.0"
      },
      {
        "attributes": [],
        "documentation": [
          "`ch5-slider-button-label` element",
          "***",
          ""
        ],
        "snippets": [
          {
            "prefix": "ch5-slider-button-label:blank",
            "description": "Crestron slider button label",
            "body": [
              "<ch5-slider-button-label>",
              "\t<template>",
              "\t$1",
              "\t</template>",
              "</ch5-slider-button-label>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "template",
            "optional": false,
            "childElements": []
          }
        ],
        "description": "Ch5 Slider Button Label tag provide the ability to set label of the on/off buttons of the advance slider.",
        "name": "Ch5 slider button label",
        "tagName": "ch5-slider-button-label",
        "role": "slider-button-label",
        "componentVersion": "2.4.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`handleShape` attribute",
              "***",
              "It defines the handle shape.",
              "The default value is 'rounded-rectangle'. Valid Values: 'rectangle', 'circle', 'oval', 'rounded-rectangle' "
            ],
            "value": [
              "rounded-rectangle",
              "rectangle",
              "circle",
              "oval"
            ],
            "name": "handleshape",
            "default": "rounded-rectangle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "The Initial values of the single value, or a lower value if range=true."
            ],
            "value": [],
            "name": "value",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 65535
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`valueHigh` attribute",
              "***",
              "The higher value is only applicable if range = true. valueHigh should always greater than value."
            ],
            "value": [],
            "name": "valuehigh",
            "default": "65535",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 65535
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`max` attribute",
              "***",
              "The maximum value determines the analog value sent to and received from the control system that will reflect the topmost point of the slider. Default value is 65535.It can range from 1 to 65535."
            ],
            "value": [],
            "name": "max",
            "default": "65535",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 65535
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`min` attribute",
              "***",
              "The minimum value determines the analog value sent to and received from the control system that will reflect the lowest position of the slider. Default value is 0.It can range from 0 to 65534."
            ],
            "value": [],
            "name": "min",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 65534
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "Sets the orientation (horizontal or vertical) of the slider.The default value is 'horizontal'."
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation",
            "default": "horizontal",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "defines the different sizes of slider. Possible values are 'x-small', 'small', 'regular', 'large', 'x-large'.",
              "The default value is 'regular'."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": "regular",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`handleSize` attribute",
              "***",
              "defines the different sizes of slider handle. Possible values are 'x-small', 'small', 'regular', 'large', 'x-large'.",
              "The default value is 'regular'."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "handlesize",
            "default": "regular",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`step` attribute",
              "***",
              "The default value is 1. Defines the size or amount of each interval or step the slider takes between the min and max values.",
              "If the value range between max and min (i.e. max - min) is not evenly divisible by step value, the max will be adjusted accordingly.",
              "Since all values on the slider are part of a range, step is strictly related to min and max attributes.",
              "If you want quarters (0, 25, 50, 75, 100), then 25 is the value for step attribute, 0 is value for min, and 100 is value for max."
            ],
            "value": [],
            "name": "step",
            "default": "1",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 65535
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "When the stretch property is set, the slider inherits the width and/or ",
              "height of the container.",
              "The default value is 'both'. Valid Values are 'width', 'height', 'both'. "
            ],
            "value": [
              "both",
              "height",
              "width"
            ],
            "name": "stretch",
            "default": "both",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`ticks` attribute",
              "***",
              "Defines the ticks on the slider. ",
              "This definition is based on advanced tick scales: non-linear or logarithmic. ",
              "Sliders can be created with ever-increasing increments by",
              "specifying the value for the slider at certain intervals. ",
              "- The first value defines the % position along the length of the slider scale to place a tick mark. ",
              "- The second value is the label value to place next to the tick at that position.",
              "***",
              "An example would be [[0.0,'-60'], [0.25,'-40'], [0.50,'-20'],[0.75,'-10'], [1.0,'0']]"
            ],
            "value": [],
            "name": "ticks",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`tooltipshowtype` attribute",
              "***",
              "The default value is 'off'.  Provides the ability to display a tooltip above (horizontal) or right (vertical) of the handle.  Valid values: ",
              "-'off': Not displayed ",
              "-'on': Always displayed ",
              "-'auto': Displayed while user interacts with the slider"
            ],
            "value": [
              "off",
              "on",
              "auto"
            ],
            "name": "tooltipshowtype",
            "default": "off",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`toolTipDisplayType` attribute",
              "***",
              "The default value is '%'. Sets what is displayed in the tooltip. Valid values: ",
              "'%' - The value is displayed as a percent ",
              "'value' - The actual value provided"
            ],
            "value": [
              "%",
              "value"
            ],
            "name": "tooltipdisplaytype",
            "default": "%",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`signalvaluesynctimeout` attribute",
              "***",
              "The default value is 1500. Defines the time (milliseconds) between when the user ",
              "releases the slider handle and the time the slider will check ",
              "if the value is equal with the value from the signal. If not, it will automatically apply the value from the signal."
            ],
            "value": [],
            "name": "signalvaluesynctimeout",
            "default": "1500",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": ""
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "The default value is direct.",
              "If set to direct, value send and receive will be instant. On submit, it ",
              "will send and listen for the first received event."
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode",
            "default": "direct",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": ""
          },
          {
            "documentation": [
              "`onclean` attribute",
              "***",
              "Runs when a clean event is initiated."
            ],
            "value": [
              "object"
            ],
            "name": "onclean",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": ""
          },
          {
            "documentation": [
              "`ondirty` attribute",
              "***",
              "Runs when a dirty event is initiated."
            ],
            "value": [
              "object"
            ],
            "name": "ondirty",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": ""
          },
          {
            "documentation": [
              "`range` attribute",
              "***",
              "If true, the slider will have two handles so two different values can be defined.The default value is false.",
              "Advance slider is not supported when range is true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "range",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": ""
          },
          {
            "documentation": [
              "`showTickValues` attribute",
              "***",
              "The default value is false. Used to display optional value labels next to tick marks at each tick increment.Possible values are true/false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "showtickvalues",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`noHandle` attribute",
              "***",
              "If the noHandle attribute is set to true, then the handle of the slider will hide. The possible values are true/false. The default value is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "nohandle",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`tapSettable` attribute",
              "***",
              "The default value is false. If true, sets the handle closest to the area where slider gets tapped. Possible values are true/false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "tapsettable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receiveStateValue` attribute",
              "***",
              "On receive, changes the value of the slider handle. Ramp Control Blocks (RCB) are defined as a numerical value and a time duration sent as a single signal."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateValueHigh` attribute",
              "***",
              "when receive, change the value of the high Handle of the slider, if range slider is set to true."
            ],
            "value": [],
            "name": "receivestatevaluehigh",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnChange` attribute",
              "***",
              "Sends a signal value on slider change."
            ],
            "value": [],
            "name": "sendeventonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnChangeHigh` attribute",
              "***",
              "If the range slider is set to true, sends a signal value high on the slider change."
            ],
            "value": [],
            "name": "sendeventonchangehigh",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`onOffOnly` attribute",
              "***",
              "The onOffOnly set to true will hide the slider leaving only the two buttons showing. The default value is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "onoffonly",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receiveStateShowOnOffOnly` attribute",
              "***",
              "Receive the signal(true) that value will hide the slider leaving only the two buttons showing."
            ],
            "value": [],
            "name": "receivestateshowonoffonly",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnUpper` attribute",
              "***",
              "Digital join to send a value to the control system if the user presses the top 3/4 half(vertical) or right 3/4 half(horizontal) of the slider."
            ],
            "value": [],
            "name": "sendeventonupper",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnLower` attribute",
              "***",
              "Digital join to send a value to the control system if the user presses the bottom 1/4 half(vertical) or left 1/4 half(horizontal) of the slider."
            ],
            "value": [],
            "name": "sendeventonlower",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnHandleClick` attribute",
              "***",
              "Sends a high signal when user places the finger on the handle and low signal when finger is released."
            ],
            "value": [],
            "name": "sendeventonhandleclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-slider` element",
          "***",
          "A component to provide input by dragging a handle. One or two numeric values can be ",
          "visualized with this component. If two values are used, two handles are provided."
        ],
        "snippets": [
          {
            "prefix": "ch5-slider:blank",
            "description": "Crestron slider (Blank)",
            "body": [
              "<ch5-slider>",
              "</ch5-slider>$0"
            ]
          },
          {
            "prefix": "ch5-slider:default",
            "description": "Crestron slider (Default)",
            "body": [
              "<ch5-slider value=\"${1:20}\"",
              "\tmin=\"${2:0}\"",
              "\tmax=\"${3:100}\"",
              "\tstep=\"${4:20}\"",
              "\tsendeventonchange=\"${5:slider_value_on_change}\"",
              "\treceivestatevalue=\"${6:receive_slider_value}\">",
              "</ch5-slider>$0"
            ]
          },
          {
            "prefix": "ch5-slider:range",
            "description": "Crestron slider range(If true, we provide two handles to define two values.)",
            "body": [
              "<ch5-slider value=\"${1:20}\"",
              "\tvaluehigh=\"${2:80}\"",
              "\tmin=\"${3:0}\"",
              "\tmax=\"${4:100}\"",
              "\tstep=\"${5:20}\"",
              "\trange=\"${6:true}\"",
              "\tsendeventonchange=\"${7:slider_value_on_change}\"",
              "\treceivestatevalue=\"${8:receive_slider_value}\"",
              "\tsendeventonchangehigh=\"${9:slider_value_high_on_change}\"",
              "\treceivestatevaluehigh=\"${10:receive_slider_value_high}\">",
              "</ch5-slider>$0"
            ]
          },
          {
            "prefix": "ch5-slider:ticks",
            "description": "Crestron slider ticks(Defines the ticks on the slider, value should be a valid JSON.)",
            "body": [
              "<ch5-slider value=\"${1:40}\"",
              "\tshowtickvalues=\"${2:true}\"",
              "\tticks='${3:{\"0\":\"-60\", \"25\":\"-40\", \"50\":\"-20\", \"75\":\"-10\", \"100\": \"0\" }}'",
              "\tsendeventonchange=\"${4:slider_value_on_change}\"",
              "\treceivestatevalue=\"${5:receive_slider_value}\">",
              "</ch5-slider>$0"
            ]
          },
          {
            "prefix": "ch5-slider:onOffOnly",
            "description": "Crestron slider onOffOnly",
            "body": [
              "<ch5-slider onOffOnly=\"${1:false}\">",
              "\t<ch5-slider-title-label >",
              "\t</ch5-slider-title-label>",
              "\t<ch5-slider-button >",
              "\t</ch5-slider-button>",
              "\t<ch5-slider-button >",
              "\t</ch5-slider-button>",
              "<ch5-slider>$0"
            ]
          },
          {
            "prefix": "ch5-slider:all-attribute",
            "description": "Crestron slider (All attribute)",
            "body": [
              "<ch5-slider id=\"ch5-slider_${1:id}\"",
              "\thandleshape=\"${2:rounded-rectangle}\"",
              "\trange=\"${3:false}\"",
              "\tvalue=\"${4:0}\"",
              "\tvaluehigh=\"${5:65535}\"",
              "\tmin=\"${6:0}\"",
              "\tmax=\"${7:65535}\"",
              "\tnohandle=\"${8:false}\"",
              "\tonoffonly=\"${9:false}\"",
              "\torientation=\"${10:horizontal}\"",
              "\tsize=\"${11:regular}\"",
              "\thandlesize=\"${12:regular}\"",
              "\tstep=\"${13:1}\"",
              "\tticks='${14:{\"0\":\"-60\", \"25\":\"-40\", \"50\":\"-20\", \"75\":\"-10\", \"100\": \"0\" }}'",
              "\tshowtickvalues=\"${15:false}\"",
              "\ttooltipshowtype=\"${16:off}\"",
              "\ttooltipdisplaytype=\"${17:%}\"",
              "\ttapsettable=\"${18:false}\"",
              "\tsendeventonchange=\"${19:}\"",
              "\tsendeventonchangehigh=\"${20:}\"",
              "\treceivestatevalue=\"${21:}\"",
              "\treceivestatevaluehigh=\"${22:}\"",
              "\treceivestateshowonoffonly=\"${23:}\"",
              "\tsendeventonupper=\"${24:}\"",
              "\tsendeventonlower=\"${25:}\"",
              "\tsendeventonhandleclick=\"${26:}\"",
              "\tstretch=\"${27:both}\">",
              "</ch5-slider>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 Slider inherits the default input range behavior but provides a lot of extra features.",
        "name": "Ch5 Slider",
        "tagName": "ch5-slider",
        "role": "slider",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "The default value is 1. ",
              "The number of items that can be in a spinner element. The minimum value is 1 and the maximum value is 30."
            ],
            "value": [],
            "name": "size",
            "default": "1",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 30
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "The label of the spinner element."
            ],
            "value": [],
            "name": "label",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "The default value is 'first'. Valid values: 'first' and 'last'. ",
              "This attribute only applies when a template is not provided ",
              "and the implied template is in use. ",
              "If a template is provided, this property is ignored. ",
              "If the direction attribute is 'ltr', as will be typical in locales with ",
              "left-to-right language direction, 'first' is equivalent to the icon being ",
              "placed on the left and the text on the right. Conversely, if the direction ",
              "attribute is 'rtl', 'first' would place the icon on the right and ",
              "the label to its left. Value of 'last' is the opposite of 'first'."
            ],
            "value": [
              "first",
              "last"
            ],
            "name": "iconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`selectedValue` attribute",
              "***",
              "The default value is 0. ",
              "The 1-based index of the selected item. Valid values are >=1",
              "and <= size."
            ],
            "value": [],
            "name": "selectedvalue",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 99
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`itemheight` attribute",
              "***",
              "The height of an item. The value of the height can be in px and vh. ",
              "The item height is required. If this is not provided, ",
              "CH5 calculates based on the first item height. ",
              "Each item on the list must have the same height."
            ],
            "value": [],
            "name": "itemheight",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`visibleitemscroll` attribute",
              "***",
              "The default value is 3. The number of items to show in the ",
              "upper/lower container around the selected item container. ",
              "This information is needed to determine how many items ",
              "are added to the top of the list and to the bottom. If this ",
              "value is not set, the number of items can fit in scrollHeight ",
              "must be calculated, which presents a probability that ",
              "one item will not be fully visible in height. If there is a template ",
              "including this, visibleItems will need to adjust on the height of ",
              "the template given."
            ],
            "value": [],
            "name": "visibleitemscroll",
            "default": "3",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 99
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "The default value is 'direct'. Allows the form submission functionality. ",
              "Valid values: 'direct', 'submit'."
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode",
            "default": "direct",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`signalValueSyncTimeout` attribute",
              "***",
              "The default value is 1500. Defines the time between the user releases a ",
              "toggle and the time the toggle will check if the ",
              "value is equal with the value from the signal. If the value is not equal, it will ",
              "apply the value from the signal automatically. Apply only for ",
              "feedbackMode direct."
            ],
            "value": [],
            "name": "signalvaluesynctimeout",
            "default": "1500",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`indexid` attribute",
              "***",
              "Provides the name of the offset identifier to be substituted with ",
              "a 1-based index of the item in a list within the template item ",
              "surrounded by '{{ delimiters }}'."
            ],
            "value": [],
            "name": "indexid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`onclean` attribute",
              "***",
              "Runs when a clean event is initiated."
            ],
            "value": [
              "object"
            ],
            "name": "onclean",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`ondirty` attribute",
              "***",
              "Runs when a dirty event is initiated."
            ],
            "value": [
              "object"
            ],
            "name": "ondirty",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`resize` attribute",
              "***",
              "The default value is false. ",
              "If true, the options panel is resized to fit content width. ",
              "Apply only with the CSS rule 'width=fit-content' and/or 'width =auto' ",
              "(depending on the browser agent)."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "resize",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`endless` attribute",
              "***",
              "The default value is false. Creates an infinite spinner. This will trigger the next ",
              "element after the last to be the first element in the list."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "endless",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`autoSetItemHeight` attribute",
              "***",
              "The default value is false. ",
              "Adjusts the height of ch5-spinner items automatically."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "autosetitemheight",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receiveStateValue` attribute",
              "***",
              "Provides the current value of the spinner."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSize` attribute",
              "***",
              "Provides the size of the spinner."
            ],
            "value": [],
            "name": "receivestatesize",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateLabel` attribute",
              "***",
              "Provides the label of the spinner."
            ],
            "value": [],
            "name": "receivestatelabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateUrl` attribute",
              "***",
              "Provides the image or icon URL."
            ],
            "value": [],
            "name": "receivestateurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnChange` attribute",
              "***",
              "Sends an event when the value of the spinner changes."
            ],
            "value": [],
            "name": "sendeventonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnFocus` attribute",
              "***",
              "Sends an event on focus."
            ],
            "value": [],
            "name": "sendeventonfocus",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnOverflow` attribute",
              "***",
              "Sends an event on overflow (endless attribute required)."
            ],
            "value": [],
            "name": "sendeventonoverflow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnUnderflow` attribute",
              "***",
              "Sends an event on underflow (endless attribute required)."
            ],
            "value": [],
            "name": "sendeventonunderflow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-spinner` element",
          "***",
          "Functionally, the Spinner component is similar to the Select component. The primary differences are in the visual representation. ",
          "The Spinner component presents a vertical list of values centered around one centrally-orientated ",
          "item, which is considered the single selected item. Swiping up and down on the items allow the user ",
          "to see other selections, and placing an item in the center chooses that item."
        ],
        "snippets": [
          {
            "prefix": "ch5-spinner:blank",
            "description": "Crestron Spinner (Blank)",
            "body": [
              "<ch5-spinner>",
              "</ch5-spinner>$0"
            ]
          },
          {
            "prefix": "ch5-spinner:default",
            "description": "Crestron Spinner (Default)",
            "body": [
              "<ch5-spinner",
              "    label=\"${1:item {{idx}}}\"",
              "    indexid=\"${2:idx}\"",
              "    size=\"${3:1}\"",
              "    itemheight=\"${4:40}\"",
              "    visibleitemscroll=\"${5:3}\"",
              "    sendeventonchange=\"${6:changed_signal}\">",
              "</ch5-spinner>$0"
            ]
          },
          {
            "prefix": "ch5-spinner:endless",
            "description": "Crestron Spinner endless attribute allows the user to continuously drag the spinner.",
            "body": [
              "<ch5-spinner",
              "    label=\"${1:item {{idx}}}\"",
              "    indexid=\"${2:idx}\"",
              "    size=\"${3:20}\"",
              "    itemheight=\"${4:40}\"",
              "    visibleitemscroll=\"${5:3}\"",
              "    endless=\"${6:true}\">",
              "</ch5-spinner>$0"
            ]
          },
          {
            "prefix": "ch5-spinner:signals",
            "description": "Crestron Spinner sending signals when interact with the component.",
            "body": [
              "<ch5-spinner",
              "    label=\"${1:item {{idx}}}\"",
              "    indexid=\"${2:idx}\"",
              "    size=\"${3:20}\"",
              "    itemheight=\"${4:40}\"",
              "    visibleitemscroll=\"${5:3}\"",
              "    endless=\"${6:true}\"",
              "    sendeventonchange=\"${7:changed_signal}\"",
              "    sendeventonfocus=\"${8:spinner_focusin}\">",
              "</ch5-spinner>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "CH5 Spinner provides a list of items where items can be moved between by dragging the spinner element.",
        "name": "Ch5 Spinner",
        "tagName": "ch5-spinner",
        "role": "listbox",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "Possible value are 'horizontal'(default), 'vertical'. Aligns the tab button according to orientation value."
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation",
            "default": "horizontal",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`numberOfItems` attribute",
              "***",
              "Default value is 3, Minimum value is 2 and Maximum value is 15. This attribute sets the number of buttons in the tab button"
            ],
            "value": [],
            "name": "numberofitems",
            "default": "3",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 2,
                "max": 15
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`indexId` attribute",
              "***",
              "This attribute helps to replace the pattern with the index on the ch5-tab-button."
            ],
            "value": [],
            "name": "indexid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`buttonType` attribute",
              "***",
              "buttonType sets the button background for all the buttons in the list. Valid values are default, danger, text, warning, info, success, primary, secondary."
            ],
            "value": [
              "default",
              "danger",
              "text",
              "warning",
              "info",
              "success",
              "primary",
              "secondary"
            ],
            "name": "buttontype",
            "default": "default",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonLabelInnerHtml` attribute",
              "***",
              "This attribute provides the ability of a template that applies for all the buttons in the tab button."
            ],
            "value": [],
            "name": "buttonlabelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EncodedHTML",
            "hidden": true
          },
          {
            "documentation": [
              "`buttonHAlignLabel` attribute",
              "***",
              "Default value is center. Possible values are 'center', 'left', 'right'. When the buttonHAlignLabel property is set, the label and the icon of the button are horizontally aligned.The center property sets the horizontal alignment of the label to the center of the button. The left property sets the horizontal alignment of the label to the left of the button. The right property sets the horizontal alignment of the label to the right of the button."
            ],
            "value": [
              "center",
              "left",
              "right"
            ],
            "name": "buttonhalignlabel",
            "default": "center",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonVAlignLabel` attribute",
              "***",
              "Default value is middle. Possible values are 'middle', 'top', 'bottom'. When the buttonVAlignLabel property is set, the label and the icon of the button are vertically aligned. The middle property sets the vertical alignment of the label to the middle of the button. The top property sets the vertical alignment of the label to the top of the button. The bottom property sets the vertical alignment of the label to the bottom of the button."
            ],
            "value": [
              "middle",
              "top",
              "bottom"
            ],
            "name": "buttonvalignlabel",
            "default": "middle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonIconPosition` attribute",
              "***",
              "The default value is 'first', Valid values: 'first', 'last', 'top', 'bottom'. The icon position relative to the label."
            ],
            "value": [
              "first",
              "last",
              "top",
              "bottom"
            ],
            "name": "buttoniconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonShape` attribute",
              "***",
              "Valid values are 'rectangle(default)', 'rounded-rectangle' and 'tab'. This attribute sets shape of the button."
            ],
            "value": [
              "rectangle",
              "rounded-rectangle",
              "tab"
            ],
            "name": "buttonshape",
            "default": "rectangle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`buttonSelected` attribute",
              "***",
              "The default value is false. This property reflects the selected state of the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "buttonselected",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`buttonPressed` attribute",
              "***",
              "The default value is false. This property reflects the pressed state of the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "buttonpressed",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`buttonIconClass` attribute",
              "***",
              "The buttoniconclass attribute with Font Awesome icons and Material Icons. We can declare more than one css class in the buttonIconClass attribute."
            ],
            "value": [],
            "name": "buttoniconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`buttonIconUrl` attribute",
              "***",
              "The buttonIconUrl attribute with SVG icons and PNG Icons we can pass only one url in the buttonIconUrl attribute"
            ],
            "value": [],
            "name": "buttoniconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`buttonReceiveStateSelected` attribute",
              "***",
              "When received, applies a true value applied by the selected class (ch5-button--selected) on all the buttons in the tab button."
            ],
            "value": [],
            "name": "buttonreceivestateselected",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateLabel` attribute",
              "***",
              "When received, applies the value on the label on all the buttons in the tab button."
            ],
            "value": [],
            "name": "buttonreceivestatelabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateScriptLabelHtml` attribute",
              "***",
              "Allows the signal script evaluation to be applied to the button.innerHTML class. Allows for multiline, multiStyled labels."
            ],
            "value": [],
            "name": "buttonreceivestatescriptlabelhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateIconClass` attribute",
              "***",
              "After receiving stateIconClass value from control system, this value is applied to the iconClass attribute of all the tab button."
            ],
            "value": [],
            "name": "buttonreceivestateiconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateIconUrl` attribute",
              "***",
              "After receiving stateIconUrl value from control system, this value is applied to the iconUrl attribute of all the buttons in the tab button."
            ],
            "value": [],
            "name": "buttonreceivestateiconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonSendEventOnClick` attribute",
              "***",
              "Sends an event on click or tap. Use this when the control system takes an action on the rising edge from false to true of a boolean digital event."
            ],
            "value": [],
            "name": "buttonsendeventonclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateShow` attribute",
              "***",
              "When the signal is low, the component will not be displayed, and the area will not be pressable. Note: If receiveStateShow attribute is given for ch5-tab-button then it will over ride buttonReceiveStateShow attribute"
            ],
            "value": [],
            "name": "buttonreceivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`buttonReceiveStateEnable` attribute",
              "***",
              "When the signal is low, the look of the component will change to represent a disabled state and the component will not be pressable. Note: If receiveStateEnable attribute is given for ch5-tab-button then it will over ride buttonReceiveStateEnable attribute"
            ],
            "value": [],
            "name": "buttonreceivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`contractName` attribute",
              "***",
              "ContractName attribute sets the name of the contract"
            ],
            "value": [],
            "name": "contractname",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`useContractForEnable` attribute",
              "***",
              "Default value is false. When true, contract 'Enable' state determines if the list is enabled. When false, the 'receiveStateEnable' join may be applied. Consistent with other components, if the 'receiveStateEnable' join is provide, the value of that join determines if the component is enabled. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforenable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForShow` attribute",
              "***",
              "Default value is false. When true, contract 'Show' state determines if the list is enabled. When false, the 'receiveStateShow' join may be applied. Consistent with other components, if the 'receiveStateShow' join is provide, the value of that join determines if the component is visible. "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForCustomStyle` attribute",
              "***",
              "Default value is false. Contract for custom style "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforcustomstyle",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForCustomClass` attribute",
              "***",
              "Default value is false. Contract for custom class"
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforcustomclass",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`buttonIconUrlFillType` attribute",
              "***",
              "Sets the icon url fill type for all the buttons. Default value is 'null'. Applicable values are 'null', 'stretch', 'stretch-aspect', 'center', 'tile', 'initial'. Uses the css property background-size for the implementation."
            ],
            "value": [
              "stretch",
              "stretch-aspect",
              "center",
              "tile",
              "initial"
            ],
            "name": "buttoniconurlfilltype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`receiveStateSelectedButton` attribute",
              "***",
              "ReceiveStateSelectedButton attribute helps the user to select an item on tab button by using an analog join."
            ],
            "value": [],
            "name": "receivestateselectedbutton",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`useContractForEachButtonSelection` attribute",
              "***",
              "The default value is false. If the value is true then the selected state of the buttons is taken from the contractName.TabSelected else from contractName.Tab[X]_Selected."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforeachbuttonselection",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-tab-button` element",
          "***",
          "A list of custom buttons designed to provide options to add icons, label, text, multi-select among other powerful options."
        ],
        "snippets": [
          {
            "prefix": "ch5-tab-button:blank",
            "description": "Crestron tab button",
            "body": [
              "<ch5-tab-button>",
              "</ch5-tab-button>$0"
            ]
          },
          {
            "prefix": "ch5-tab-button:default",
            "description": "Crestron tab button (default)",
            "body": [
              "<ch5-tab-button id=\"ch5-tab-button_${1:id}\"",
              "\torientation=\"${2:horizontal}\"",
              "\tnumberOfItems=\"${3:3}\"",
              "\tindexId=\"${4:}\">",
              "</ch5-tab-button>$0"
            ]
          },
          {
            "prefix": "ch5-tab-button:all-attributes",
            "description": "Crestron tab button (All Attributes)",
            "body": [
              "<ch5-tab-button id=\"ch5-tab-button_${1:id}\"",
              "\torientation=\"${2:horizontal}\"",
              "\tnumberOfItems=\"${3:3}\"",
              "\tindexId=\"${4:}\"",
              "\tbuttonType=\"${5:default}\"",
              "\tbuttonHAlignLabel=\"${6:center}\"",
              "\tbuttonVAlignLabel=\"${7:middle}\"",
              "\tbuttonIconPosition=\"${8:first}\"",
              "\tbuttonShape=\"${9:rectangle}\"",
              "\tbuttonSelected=\"${10:}\"",
              "\tbuttonPressed=\"${11:}\"",
              "\tbuttonIconClass=\"${12:}\"",
              "\tbuttonIconUrl=\"${13:}\"",
              "\tbuttonReceiveStateSelected=\"${14:}\"",
              "\tbuttonReceiveStateLabel=\"${15:}\"",
              "\tbuttonReceiveStateScriptLabelHtml=\"${16:}\"",
              "\tbuttonReceiveStateIconClass=\"${17:}\"",
              "\tbuttonReceiveStateIconUrl=\"${18:}\"",
              "\tbuttonSendEventOnClick=\"${19:}\"",
              "\tbuttonReceiveStateShow=\"${20:}\"",
              "\tbuttonReceiveStateEnable=\"${21:}\"",
              "\treceiveStateSelectedButton=\"${22:}\"",
              "\tcontractName=\"${23:}\"",
              "\tuseContractForEnable=\"${24:false}\"",
              "\tuseContractForShow=\"${25:false}\"",
              "\tuseContractForCustomClass=\"${26:false}\"",
              "\tuseContractForEachButtonSelection=\"${27:false}\"",
              "\tuseContractForCustomStyle=\"${28:false}\">",
              "</ch5-tab-button>$0"
            ]
          },
          {
            "prefix": "ch5-tab-button:contractbased",
            "description": "Crestron Tab Button(contractbased)",
            "body": [
              "<ch5-tab-button id=\"ch5-tab-button_${1:id}\"",
              "\tcontractName=\"${2:}\">",
              "</ch5-tab-button>$0"
            ]
          },
          {
            "prefix": "ch5-tab-button:contractbased-attributes",
            "description": "Crestron Tab Button(contractbased-attributes)",
            "body": [
              "<ch5-tab-button id=\"ch5-tab-button_${1:id}\"",
              "\tcontractName=\"${2:}\"",
              "\tuseContractForEnable=\"${3:false}\"",
              "\tuseContractForShow=\"${4:false}\"",
              "\tuseContractForCustomClass=\"${5:false}\"",
              "\tuseContractForEachButtonSelection=\"${6:false}\"",
              "\tuseContractForCustomStyle=\"${7:false}\">",
              "</ch5-tab-button>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-tab-button-label",
            "optional": true,
            "childElements": [
              {
                "tagName": "template",
                "optional": false,
                "childElements": []
              }
            ]
          },
          {
            "tagName": "ch5-tab-button-individual-button",
            "optional": true,
            "childElements": []
          }
        ],
        "description": "Ch5 Tab Button offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Tab Button",
        "tagName": "ch5-tab-button",
        "role": "tab-button",
        "componentVersion": "2.3.0"
      },
      {
        "attributes": [],
        "documentation": [
          "`ch5-tab-button-label` element",
          "***",
          "A child element designed to capture the label for Ch5 Tab Button component."
        ],
        "snippets": [
          {
            "prefix": "ch5-tab-button-label:blank",
            "description": "Crestron tab button label",
            "body": [
              "<ch5-tab-button-label>",
              "\t<template>",
              "\t$1",
              "\t</template>",
              "</ch5-tab-button-label>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "template",
            "optional": false,
            "childElements": []
          }
        ],
        "description": "Ch5 Tab Button Label is a child node for <ch5-tab-button>.",
        "name": "Ch5 Tab Button Label",
        "tagName": "ch5-tab-button-label",
        "role": "label",
        "componentVersion": "2.3.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`labelInnerHTML` attribute",
              "***",
              "Ability to provide a template that applies for the individual button in the tab button. This attribute takes preference over the buttonLabelInnerHtml attribute in ch5-tab-button for the respective individual button based on index."
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconUrl` attribute",
              "***",
              "The iconUrl attribute with SVG icons and PNG Icons. We can pass only one url in the iconUrl attribute. This attribute overrides the buttonIconUrl attribute in ch5-tab-button for the respective individual button based on index."
            ],
            "value": [],
            "name": "iconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconClass` attribute",
              "***",
              "The iconClass attribute with Font Awesome icons and Material Icons. We can declare more than one css class in the iconClass attribute. This attribute overrides the buttonIconClass attribute in ch5-tab-button for the respective individual button based on index."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`onRelease` attribute",
              "***",
              "The onRelease attribute allows selection of a page to be made visible on clicking of the button."
            ],
            "value": [],
            "name": "onrelease",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          }
        ],
        "documentation": [
          "`ch5-tab-button-individual-button` element",
          "***",
          ""
        ],
        "snippets": [
          {
            "prefix": "ch5-tab-button-individual-button:blank",
            "description": "Crestron tab button individual button",
            "body": [
              "<ch5-tab-button-individual-button>",
              "</ch5-tab-button-individual-button>$0"
            ]
          },
          {
            "prefix": "ch5-tab-button-individual-button:default",
            "description": "Crestron tab button individual button (default)",
            "body": [
              "<ch5-tab-button-individual-button id=\"ch5-tab-button-individual-button_${1:id}\"",
              "\ticonUrl=\"${2:}\"",
              "\tonRelease=\"${3:}\"",
              "\ticonClass=\"${4:}\">",
              "</ch5-tab-button-individual-button>$0"
            ]
          },
          {
            "prefix": "ch5-tab-button-individual-button:all-attributes",
            "description": "Crestron tab button individual button (All Attributes)",
            "body": [
              "<ch5-tab-button-individual-button id=\"ch5-tab-button-individual-button_${1:id}\"",
              "\tlabelInnerHtml=\"${2:}\"",
              "\ticonUrl=\"${3:}\"",
              "\tonRelease=\"${4:}\"",
              "\ticonClass=\"${5:}\">",
              "</ch5-tab-button-individual-button>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 Tab Button Individual Button tag to provide ability to enter individual button labels and individual icons for each button in the tab button",
        "name": "Ch5 Tab Button Individual Button",
        "tagName": "ch5-tab-button-individual-button",
        "role": "template",
        "componentVersion": "2.3.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`templateid` attribute",
              "***",
              "The ID of the template to be instantiated."
            ],
            "value": [],
            "name": "templateid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`context` attribute",
              "***",
              "In the format of 'original:replacement;' original is the value to be replaced, and replacement ",
              "is the replacement value."
            ],
            "value": [],
            "name": "context",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`contractName` attribute",
              "***",
              "A name to be prefixed to all signal names in the template.  ",
              ""
            ],
            "value": [],
            "name": "contractname",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`booleanJoinOffset` attribute",
              "***",
              "A value to be added to all digital/boolean join numbers provided in the template.  ",
              ""
            ],
            "value": [],
            "name": "booleanjoinoffset",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`numericJoinOffset` attribute",
              "***",
              "A value to be added to all analog/numeric join numbers provided in the template.  ",
              ""
            ],
            "value": [],
            "name": "numericjoinoffset",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`stringJoinOffset` attribute",
              "***",
              "A value to be added to all serial/string join numbers provided in the template.  ",
              ""
            ],
            "value": [],
            "name": "stringjoinoffset",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-template` element",
          "***",
          "The primary functionality of this component is to create new instances ",
          "of the user-provided <template> and to substitute event and state names ",
          "where indicated by the developer.  ",
          "Upon completion of creating a new instance of the the user-provided ",
          "<template>, a container element is provided with a unique ",
          "id attribute that is unique across all created instances.  ",
          "Each top level element provided in user-provided <template> will ",
          "also be provided a unique id, unless the element already has an id. "
        ],
        "snippets": [
          {
            "prefix": "ch5-template:default",
            "description": "Crestron Ch5-Template (default)",
            "body": [
              "<ch5-template templateId=\"[provideTemplateId]\" context=\"[original]:[replacement]\"></ch5-template>"
            ]
          }
        ],
        "childElements": [],
        "description": "ch5-template create new instances of the user provided <template>.",
        "name": "Ch5 Template",
        "tagName": "ch5-template",
        "role": "template",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`horizontalAlignment` attribute",
              "***",
              "Sets the text horizontally aligned to the container."
            ],
            "value": [
              "center",
              "left",
              "right"
            ],
            "name": "horizontalalignment",
            "default": "center",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`verticalAlignment` attribute",
              "***",
              "Sets the text vertically aligned to the container."
            ],
            "value": [
              "middle",
              "top",
              "bottom"
            ],
            "name": "verticalalignment",
            "default": "middle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`multilineSupport` attribute",
              "***",
              "Enables or disables support for multi-line text. Text will be truncated when the text content area does not allow for a second line. This shall not resize the text area to fit the text."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "multilinesupport",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`truncateText` attribute",
              "***",
              "Enables or disables text truncation depending on the length of text and the size of the control. This attribute when set to true will show an ellipsis when the text extends beyond the horizontally and vertically allocated space."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "truncatetext",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "Sets the text displayed on the label."
            ],
            "value": [],
            "name": "label",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receiveStateLabel` attribute",
              "***",
              "Select a serial join to receive feedback from the control system. The value of this join gets assigned to the label as text. NOTE: Due to a clearing of all joins at design time, if a join is set, the design time label will not display any text."
            ],
            "value": [],
            "name": "receivestatelabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`labelInnerHtml` attribute",
              "***",
              "Used to set the label displayed for the text. This attribute takes the preference over the label attribute."
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EncodedHTML",
            "hidden": true
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-text` element",
          "***",
          "The Text control is used to display advanced text on a touch panel. It supports HTML text via Serial Join as well as static text. Additionally, it can be used as multiline and/or truncated text."
        ],
        "snippets": [
          {
            "prefix": "ch5-text:blank",
            "description": "Crestron text",
            "body": [
              "<ch5-text>",
              "</ch5-text>$0"
            ]
          },
          {
            "prefix": "ch5-text:all-attributes",
            "description": "Crestron text (All Attributes)",
            "body": [
              "<ch5-text id=\"ch5-text_${1:id}\"",
              "\thorizontalAlignment=\"${2:center}\"",
              "\tverticalAlignment=\"${3:middle}\"",
              "\tmultilineSupport=\"${4:false}\"",
              "\ttruncateText=\"${5:false}\"",
              "\tlabel=\"${6:}\"",
              "\treceiveStateLabel=\"${7:}\">",
              "</ch5-text>$0"
            ]
          },
          {
            "prefix": "ch5-text:default",
            "description": "Crestron text (default)",
            "body": [
              "<ch5-text id=\"ch5-text_${1:id}\"",
              "\thorizontalAlignment=\"${2:center}\"",
              "\tverticalAlignment=\"${3:middle}\"",
              "\tmultilineSupport=\"${4:false}\"",
              "\ttruncateText=\"${5:false}\"",
              "\tlabel=\"${6:}\">",
              "</ch5-text>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The Text control is used to display advanced text on a touch panel.",
        "name": "Ch5 Text",
        "tagName": "ch5-text",
        "role": "label",
        "componentVersion": "2.5.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "The default value is 'direct'. Valid values: 'direct', 'submit'.",
              "***",
              "- 'direct' updates the trigger change event and sendEventOnChange ",
              "as the user changes. ",
              "- 'submit' triggers a change event and updates the signal in ",
              "sendEventOnChange attribute only when the submit() method is called by a Form Component."
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode",
            "default": "direct",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`signalvaluesynctimeout` attribute",
              "***",
              "The default value is 1500ms. Defines the time between the end of focus (no more user action ",
              "for example, for a ch5-toggle this means that the user has released the handle of the toggle) ",
              "and the time the CH5 element will check if the value is equal with the value from the signal. ",
              "If the value is not equal, it will apply the value from the signal automatically. Apply only for feedbackMode direct."
            ],
            "value": [],
            "name": "signalvaluesynctimeout",
            "default": "1500ms",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`mask` attribute",
              "***",
              "The background pattern that will be present when the input is focused. ",
              "The following combination of prebuilt definitions are permitted: ",
              "a - alpha character ",
              "9 - numeric character ",
              "* - alphanumeric character"
            ],
            "value": [],
            "name": "mask",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconClass` attribute",
              "***",
              "The icon to be shown. Its either prefixed or suffixed based on the iconposition attribute."
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "IconClass"
          },
          {
            "documentation": [
              "`icon` attribute",
              "***",
              "The icon to be shown. Its either prefixed or suffixed based on the iconposition attribute."
            ],
            "value": [],
            "name": "icon",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "IconClass",
            "deprecated": {
              "version": "1.0.0",
              "description": "This attribute is deprecated, please use 'iconClass' attribute."
            }
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "Provides the label for the input on left top corner of the control."
            ],
            "value": [],
            "name": "label",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`placeholder` attribute",
              "***",
              "Provides the placeholder for the input. This shares the default behavior of the input HMTL element."
            ],
            "value": [],
            "name": "placeholder",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "The default value is 'first'. Valid values: 'first' and 'last'. ",
              "If the direction attribute is 'ltr', as will be typical in locales with a left-to-right language ",
              "direction, 'first' is equivalent to the icon being placed on the left and the text on the ",
              "right. ",
              "Conversely, if the direction attribute is 'rtl', first' would place the icon on the ",
              "right and the label to its left. The Value of 'last' is ",
              "the opposite of 'first'."
            ],
            "value": [
              "first",
              "last"
            ],
            "name": "iconposition",
            "default": "first",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "The default value is text. Valid values are text, number, email, and password. The type attribute describes type of the input element."
            ],
            "value": [
              "text",
              "number",
              "email",
              "password"
            ],
            "name": "type",
            "default": "text",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`minlength` attribute",
              "***",
              "The default value is 0. ",
              "Applicable only in feedbackmode='submit'. The minimum length of the attribute."
            ],
            "value": [],
            "name": "minlength",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 99
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`maxlength` attribute",
              "***",
              "The default value is 0. ",
              "Applicable only in feedbackmode='submit'. The maximum length of the attribute"
            ],
            "value": [],
            "name": "maxlength",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 99
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`minvalue` attribute",
              "***",
              "The default value is 0. ",
              "Applicable only for type=numeric and feedbackmode='submit'. ",
              "The field will result in an error if the value supplied by user is less than value of the attribute."
            ],
            "value": [],
            "name": "minvalue",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 99
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`maxvalue` attribute",
              "***",
              "Applicable only for type=numeric and feedbackmode='submit'. ",
              "The default value is 0. ",
              "The field will result in an error if the value supplied by user is greater than value of ",
              "the attribute."
            ],
            "value": [],
            "name": "maxvalue",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 99
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "The default value is 'regular'. Valid values: 'regular',  'x-small', 'small', 'large' and 'x-large'. ",
              "Sets the relative size of this component."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": "regular",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "The default value is 'null'. Valid values: 'fixed', 'width', and 'content'.",
              "Sets the width of the input.",
              "Fixed - fixed position (from CSS classes) ",
              "Width - Width of the parent content ",
              "Content - Width will be equal to the content width"
            ],
            "value": [
              "fixed",
              "width",
              "content"
            ],
            "name": "stretch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`text-transform` attribute",
              "***",
              "The default value is 'none'. Only used for type=text. ",
              "Valid values: ",
              "'capitalize' – Makes all first characters of each word uppercase ",
              "'uppercase' – Makes all characters uppercase ",
              "'lowercase' – Makes all characters lowercase ",
              "'none' – Does not change the input"
            ],
            "value": [
              "none",
              "capitalize",
              "uppercase",
              "lowercase"
            ],
            "name": "text-transform",
            "default": "none",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`scaling` attribute",
              "***",
              "The default value is false. ",
              "Scales the input font size when it reaches the edge."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "scaling",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receivestatefocus` attribute",
              "***",
              "When focussed, send true. When focus is lost, send false."
            ],
            "value": [],
            "name": "receivestatefocus",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatevalue` attribute",
              "***",
              "When received, changes the value of the text input field."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonchange` attribute",
              "***",
              "Sends an event on value change."
            ],
            "value": [],
            "name": "sendeventonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonenterkey` attribute",
              "***",
              "Sends an event on press of enter key."
            ],
            "value": [],
            "name": "sendeventonenterkey",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonesckey` attribute",
              "***",
              "Sends an event on press of escape key."
            ],
            "value": [],
            "name": "sendeventonesckey",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonfocus` attribute",
              "***",
              "Sends an event on focus."
            ],
            "value": [],
            "name": "sendeventonfocus",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonblur` attribute",
              "***",
              "Sends an event on blur."
            ],
            "value": [],
            "name": "sendeventonblur",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`minimumfontsize` attribute",
              "***",
              "The default value is 12. ",
              "The minimum font size is applied when the input text exceeds the width of the input text box. ",
              "This will work only if a scaling attribute is set."
            ],
            "value": [],
            "name": "minimumfontsize",
            "default": "12",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`tabIndex` attribute",
              "***",
              "The default value is 0. ",
              "The tabIndex global attribute indicates that its element ",
              "can be focused and indicates where it places in sequential ",
              "keyboard navigation."
            ],
            "value": [],
            "name": "tabindex",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "The value attribute specifies the value of an input element."
            ],
            "value": [],
            "name": "value",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-textinput` attribute",
          "***",
          "The TextEntry component allows the user to enter textual input. Extending on a default ",
          "input HTML element, it allows additional customization like icons, label among others."
        ],
        "snippets": [
          {
            "prefix": "ch5-textinput:blank",
            "description": "Crestron Textinput (Blank)",
            "body": [
              "<ch5-textinput>",
              "</ch5-textinput>$0"
            ]
          },
          {
            "prefix": "ch5-textinput:phone",
            "description": "Crestron Textinput phone mask attribute",
            "body": [
              "<ch5-textinput",
              "    label=\"${1:Phone number:}\"",
              "    iconClass=\"${2:fa fa-phone}\"",
              "    size=\"${3:x-large}\"",
              "    placeholder=\"${4:Phone Number}\"",
              "    mask=\"${5:(+99) 999 999 999}\"",
              "    id=\"${7:phoneNumber}\">",
              "</ch5-textinput>"
            ]
          },
          {
            "prefix": "ch5-textinput:signals",
            "description": "Crestron Textinput phone mask attribute",
            "body": [
              "<ch5-textinput",
              "    label=\"${1:Phone number:}\"",
              "    iconClass=\"${2:fa fa-phone}\"",
              "    size=\"${3:x-large}\"",
              "    placeholder=\"${4:Phone Number}\"",
              "    mask=\"${5:(+99) 999 999 999}\"",
              "    id=\"${7:phoneNumber}\"",
              "    sendEventOnChange=\"${8:input_changed}\"",
              "    sendEventOnFocus=\"${9:input_focus}\"",
              "    sendEventOnBlur=\"${10:input_blur}\"",
              "    sendEventOnEnterKey=\"${11:input_enter_key_event}\"",
              "    sendEventOnEscKey=\"${12:input_esc_key_event}\">",
              "</ch5-textinput>"
            ]
          },
          {
            "prefix": "ch5-textinput:all-attributes",
            "description": "Crestron textinput (All Attributes)",
            "body": [
              "<ch5-textinput id=\"ch5-textinput_${1:id}\"",
              "\tmask=\"${2:}\"",
              "\ticonClass=\"${3:}\"",
              "\ticon=\"${4:}\"",
              "\tlabel=\"${5:}\"",
              "\tplaceholder=\"${6:}\"",
              "\ticonPosition=\"${7:first}\"",
              "\ttype=\"${8:text}\"",
              "\tminLength=\"${9:0}\"",
              "\tmaxLength=\"${10:0}\"",
              "\tminValue=\"${11:0}\"",
              "\tmaxValue=\"${12:0}\"",
              "\tsize=\"${13:regular}\"",
              "\ttext-transform=\"${15:none}\"",
              "\tscaling=\"${16:false}\"",
              "\tminimumFontSize=\"${17:12}\"",
              "\ttabIndex=\"${18:0}\"",
              "\treceiveStateFocus=\"${19:}\"",
              "\treceiveStateValue=\"${20:}\"",
              "\tsendEventOnChange=\"${21:}\"",
              "\tsendEventOnFocus=\"${22:}\"",
              "\tsendEventOnBlur=\"${23:}\"",
              "\tvalue=\"${24:}\">",
              "</ch5-textinput>$0"
            ]
          },
          {
            "prefix": "ch5-textinput:default",
            "description": "Crestron textinput (default)",
            "body": [
              "<ch5-textinput id=\"ch5-textinput_${1:id}\"",
              "\tmask=\"${2:}\"",
              "\ticonClass=\"${3:}\"",
              "\ticon=\"${4:}\"",
              "\tlabel=\"${5:}\"",
              "\tplaceholder=\"${6:}\"",
              "\ticonPosition=\"${7:first}\"",
              "\ttype=\"${8:text}\"",
              "\tminLength=\"${9:0}\"",
              "\tmaxLength=\"${10:0}\"",
              "\tminValue=\"${11:0}\"",
              "\tmaxValue=\"${12:0}\"",
              "\tsize=\"${13:regular}\"",
              "\ttext-transform=\"${15:none}\"",
              "\tscaling=\"${16:false}\"",
              "\tminimumFontSize=\"${17:12}\"",
              "\ttabIndex=\"${18:0}\"",
              "\tvalue=\"${19:}\">",
              "</ch5-textinput>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 Textinput inherits the default html input behavior, but also provides extra features.",
        "name": "Ch5 Textinput",
        "tagName": "ch5-textinput",
        "role": "input",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`handleShape` attribute",
              "***",
              "The default value is 'circle'. Possible values are circle, rectangle. Sets the shape that will determine the shape of the component."
            ],
            "value": [
              "circle",
              "rectangle"
            ],
            "name": "handleshape",
            "default": "circle",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "The label attribute allows a string value to be defined that will be used as the label for the ch5-toggle."
            ],
            "value": [],
            "name": "label",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`labelOn` attribute",
              "***",
              "Allows string values to be defined for the labelOn."
            ],
            "value": [],
            "name": "labelon",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`labelOff` attribute",
              "***",
              "Allows string values to be defined for the labelOff."
            ],
            "value": [],
            "name": "labeloff",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconOn` attribute",
              "***",
              "Allows icons to be defined for the on state of the ch5-toggle. You can declare CSS class in the iconOn attribute."
            ],
            "value": [],
            "name": "iconon",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconOff` attribute",
              "***",
              "Allows icons to be defined for the off state of the ch5-toggle. You can declare CSS class in the iconOff attribute."
            ],
            "value": [],
            "name": "iconoff",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "The default value is horizontal. Possible values are 'horizontal' or 'vertical'. Sets the control elements in a horizontal or vertical orientation, For vertical alignment, it will apply a CSS class that will rotate the, component 90 degrees (-90 degrees counter clockwise)"
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation",
            "default": "horizontal",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "The default value is regular. Possible values are regular, x-small, small, large, x-large."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": "regular",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "The value attribute specifies the value of an toggle element."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "value",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`receiveStateValue` attribute",
              "***",
              "The toggle value gets updated with the newly received value from signal."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateScriptLabelHTML` attribute",
              "***",
              "The value of the receiveStateScriptLabelHTML attribute is the name of a string signal. The signal should contain valid HTML. This HTML code will be placed in the label part of the ch5-toggle."
            ],
            "value": [],
            "name": "receivestatescriptlabelhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnClick` attribute",
              "***",
              "Sends a boolean signal on a click or tap event"
            ],
            "value": [],
            "name": "sendeventonclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "feedbackMode sends the input text changes based on the attribute value. The default value for feedbackMode attribute is 'direct' Valid values: 'direct' and 'submit'."
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode",
            "default": "direct",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`sendeventontouch` attribute",
              "Sends a signal on a touch event."
            ],
            "value": [],
            "name": "sendeventontouch",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`signalvaluesynctimeout` attribute",
              "***",
              "The default value is 1500. Defines the time between when the user clicks the ",
              "toggle and the time the toggle will check if the value is equal ",
              "with the value from the signal. If the value is not equal, it will apply ",
              "the value from the signal automatically. Apply only for feedbackMode direct."
            ],
            "value": [],
            "name": "signalvaluesynctimeout",
            "default": "1500",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`onclean` attribute",
              "***",
              "Runs when a clean event is initiated."
            ],
            "value": [
              "object"
            ],
            "name": "onclean",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`ondirty` attribute",
              "***",
              "Runs when a dirty event is initiated."
            ],
            "value": [
              "object"
            ],
            "name": "ondirty",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-toggle` element",
          "***",
          "Appears as a two-state switch with easy transition between states. The component has the,functionality of an HTML checkbox-type input element."
        ],
        "snippets": [
          {
            "prefix": "ch5-toggle:blank",
            "description": "Crestron toggle",
            "body": [
              "<ch5-toggle>",
              "</ch5-toggle>$0"
            ]
          },
          {
            "prefix": "ch5-toggle:all-attributes",
            "description": "Crestron toggle (All Attributes)",
            "body": [
              "<ch5-toggle id=\"ch5-toggle_${1:id}\"",
              "\thandleShape=\"${2:circle}\"",
              "\tlabel=\"${3:}\"",
              "\tlabelOn=\"${4:}\"",
              "\tlabelOff=\"${5:}\"",
              "\ticonOn=\"${6:}\"",
              "\ticonOff=\"${7:}\"",
              "\torientation=\"${8:horizontal}\"",
              "\tvalue=\"${9:false}\"",
              "\tsize=\"${10:regular}\"",
              "\treceiveStateValue=\"${11:}\"",
              "\treceiveStateScriptLabelHTML=\"${12:}\"",
              "\tsendEventOnClick=\"${13:}\"",
              "\tsendEventOnTouch=\"${14:}\">",
              "</ch5-toggle>$0"
            ]
          },
          {
            "prefix": "ch5-toggle:default",
            "description": "Crestron toggle (default)",
            "body": [
              "<ch5-toggle id=\"ch5-toggle_${1:id}\"",
              "\thandleShape=\"${2:circle}\"",
              "\tlabel=\"${3:}\"",
              "\tlabelOn=\"${4:}\"",
              "\tlabelOff=\"${5:}\"",
              "\ticonOn=\"${6:}\"",
              "\ticonOff=\"${7:}\"",
              "\torientation=\"${8:horizontal}\"",
              "\tsize=\"${9:regular}\"",
              "\tvalue=\"${10:false}\">",
              "</ch5-toggle>$0"
            ]
          },
          {
            "prefix": "ch5-toggle:label-on-off",
            "description": "Crestron Toggle (Default)",
            "body": [
              "<ch5-toggle label=\"${1:Alarm}\"",
              "\tvalue=\"${2:false}\"",
              "\tlabelOn=\"${3:On}\"",
              "\tlabelOff=\"${4:Off}\"",
              "\tsendeventOnClick=\"${5:send_switch_value}\"",
              "\treceiveStateValue=\"${5:receive_switch_value}\">",
              "</ch5-toggle>$0"
            ]
          },
          {
            "prefix": "ch5-toggle:icon-on-off",
            "description": "Crestron Toggle (Default)",
            "body": [
              "<ch5-toggle label=\"${1:Alarm}\"",
              "\tvalue=\"${2:false}\"",
              "\ticonOn=\"${3:fas fa-bell}\"",
              "\ticonOff=\"${4:fas fa-bell-slash}\"",
              "\tsendeventOnClick=\"${5:send_switch_value}\"",
              "\treceiveStateValue=\"${5:receive_switch_value}\">",
              "</ch5-toggle>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 Toggle represents an input with two states behaving like a switch.",
        "name": "Ch5 Toggle",
        "tagName": "ch5-toggle",
        "role": "switch",
        "componentVersion": "2.7.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, this will tell the parent component (ch5-triggerview) to hide all the other ChildViews and to only show this one."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Sends a digital pulse when a child view becomes visible. Allows the control system ",
              "to take various actions based on which view is active."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          }
        ],
        "documentation": [
          "`ch5-triggerview-child` attribute",
          "***",
          "Each TriggerView child is similar to a standalone page, and navigating between pages is done via swiping."
        ],
        "snippets": [
          {
            "prefix": "ch5-triggerview:child-send-signals",
            "body": [
              "<ch5-triggerview activeview=\"${1:1}\"> ",
              "    <ch5-triggerview-child sendeventonshow=\"${2:first_child_is_shown}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>First View</h1>",
              "        </div>",
              "    </ch5-triggerview-child > ",
              "    <ch5-triggerview-child sendeventonshow=\"${3:second_child_is_shown}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>Second View </h1>",
              "        </div> ",
              "    </ch5-triggerview-child >",
              "    <ch5-triggerview-child sendeventonshow=\"${4:third_child_is_shown}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>Third View </h1>",
              "        </div> ",
              "    </ch5-triggerview-child >",
              "</ch5-triggerview>"
            ],
            "description": "Crestron TriggerView Child Send Signals"
          },
          {
            "prefix": "ch5-triggerview:child-receive-signals",
            "body": [
              "<ch5-triggerview activeview=\"${1:1}\"> ",
              "    <ch5-triggerview-child receivestateshow=\"${2:show_first_view_signal}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>First View</h1>",
              "        </div>",
              "    </ch5-triggerview-child > ",
              "    <ch5-triggerview-child receivestateshow=\"${3:show_second_view_signal}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>Second View </h1>",
              "        </div> ",
              "    </ch5-triggerview-child >",
              "    <ch5-triggerview-child receivestateshow=\"${4:show_third_view_signal}\">",
              "        <div class=\"viewcontent\">",
              "            <h1>Third View </h1>",
              "        </div> ",
              "    </ch5-triggerview-child >",
              "</ch5-triggerview>"
            ],
            "description": "Crestron TriggerView Signals"
          }
        ],
        "childElements": [],
        "description": "Ch5 Trigger View Child - content wrapper for ch5-triggerview.",
        "name": "Ch5 Trigger View Child",
        "tagName": "ch5-triggerview-child",
        "role": "template",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`activeview` attribute",
              "***",
              "The default value is 0. Sets the view that will be shown using a 0-based index."
            ],
            "value": [],
            "name": "activeview",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 99
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`endless` attribute",
              "***",
              "The default value is false. The nextChildView method can be called on the last ChildView to open the first-child."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "endless",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`gestureable` attribute",
              "***",
              "The default value is false. When set to true, gesturing will be supported. Adding this will ",
              "change the behavior inside of the component. ",
              "Refer to Gesture - Use Cases for more information."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "gestureable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`nested` attribute",
              "***",
              "The default value is false. ",
              "A boolean attribute used to flag that ch5-triggerview is the child element on ch5-triggerview-child."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "nested",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`sendeventshowchildindex` attribute",
              "***",
              "Sends the numeric value of the currently visible state.",
              "Based on 0-based numbering."
            ],
            "value": [],
            "name": "sendeventshowchildindex",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowchildindex` attribute",
              "***",
              "The receipt of the numeric value of this state will make ",
              "the 0-based index of views in the component become visible."
            ],
            "value": [],
            "name": "receivestateshowchildindex",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`disableanimation` attribute",
              "***",
              "The default value is false. ",
              "Disables the swipe-like animation when navigating through the ChildViews of the TriggerView."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disableanimation",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-triggerview` element",
          "***",
          "A container-like component for organizing content into multiple subgroups (ch5-triggerview-child). Each ChildView can be viewed as a separate page or tab."
        ],
        "snippets": [
          {
            "prefix": "ch5-triggerview:blank",
            "body": [
              "<ch5-triggerview>",
              "    <ch5-triggerview-child>",
              "    </ch5-triggerview-child> ",
              "</ch5-triggerview>"
            ],
            "description": "Crestron TriggerView (Blank)"
          },
          {
            "prefix": "ch5-triggerview:default",
            "body": [
              "<ch5-triggerview activeview=\"${1:1}\" gestureable=\"${2:true}\" endless=\"${3:true}\"> ",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>First View</h1>",
              "        </div>",
              "    </ch5-triggerview-child> ",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>Second View</h1>",
              "        </div>",
              "    </ch5-triggerview-child>",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>Third View</h1>",
              "        </div>",
              "    </ch5-triggerview-child>",
              "</ch5-triggerview>"
            ],
            "description": "Crestron TriggerView (Default)"
          },
          {
            "prefix": "ch5-triggerview:signals",
            "body": [
              "<ch5-triggerview activeview=\"${1:1}\" sendeventshowchildindex=\"${2:send_index_view}\" receivestateshowchildindex=\"${3:receive_index_view}\" > ",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>First View</h1>",
              "        </div>",
              "    </ch5-triggerview-child> ",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>Second View</h1>",
              "        </div>",
              "    </ch5-triggerview-child>",
              "    <ch5-triggerview-child>",
              "        <div class=\"viewcontent\">",
              "            <h1>Third View</h1>",
              "        </div>",
              "    </ch5-triggerview-child>",
              "</ch5-triggerview>"
            ],
            "description": "Crestron TriggerView Signals"
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-triggerview-child",
            "optional": false,
            "childElements": []
          }
        ],
        "description": "Ch5 Trigger View will be used to group content, each component will be wrap inside an ChildView Component",
        "name": "Ch5 Trigger View",
        "tagName": "ch5-triggerview",
        "role": "listbox",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`indexId` attribute",
              "***",
              "Provides the name of the offset identifier to be substituted with 0 based index of the item in list within the signal names provided in other attributes surrounded by '{{ delimiters }}'. See examples. Note: 0-based.  Other components, e.g. List, Spinner, Select, are currently 1-based, but will be changed to 0-based in the future.  This component will start as 0-based. "
            ],
            "value": [],
            "name": "indexid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`aspectRatio` attribute",
              "***",
              "Sets the ratio of width to height of the video. Width and height of the component to be controlled by css style classes.",
              "Values are '16:9' (default), '4:3'. When size of container is not match the aspect ratio, the full height or the full width should be used and the dimension that is not full should be centered.",
              "In other words, use letterbox or pillarbox logic to place the video component view. Note: this attribute only defines the size of the component within the project, it does not define the size of video displayed within the component."
            ],
            "value": [
              "16:9",
              "4:3"
            ],
            "name": "aspectratio",
            "default": "16:9",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Default false. When true, video will be displayed in the whole component. When false, video will be displayed as letter or pillar box based upon the aspect ratio of the video feed and the size of the component. Note: this attribute is independent of aspectRatio."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "stretch",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`url` attribute",
              "***",
              "Default empty. Defines the video URL as an attribute, superseded by receiveStateURL."
            ],
            "value": [],
            "name": "url",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`sourceType` attribute",
              "***",
              "Default 'Network'. Defines the type of Video stream, superseded by receiveStateSourceType. See enumeration values in receiveStateSourceType."
            ],
            "value": [
              "Network"
            ],
            "name": "sourcetype",
            "default": "Network",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`userId` attribute",
              "***",
              "Default empty. Defines the userid passed to camera as credentials for video URL. Superseded by receiveStateUserId."
            ],
            "value": [],
            "name": "userid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`password` attribute",
              "***",
              "Default empty. Defines the password passed to the camera as credentials for the video URL. Superseded by receiveStatePassword."
            ],
            "value": [],
            "name": "password",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`snapshotURL` attribute",
              "***",
              "Default empty. Defines the still image URL as an attribute, superseded by receiveStateSnapshotURL."
            ],
            "value": [],
            "name": "snapshoturl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`snapshotRefreshRate` attribute",
              "***",
              "Default 5. Defines the refresh period for a snapshot URL in units of seconds. 0 indicates no refresh, max is 60. Superseded by receiveStateSnapshotRefreshRate."
            ],
            "value": [],
            "name": "snapshotrefreshrate",
            "default": "5",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 60
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`snapshotUserId` attribute",
              "***",
              "Default empty. Defines the userid passed to the camera as credentials for the image URL. Superseded by receiveStateSnapshotUserId."
            ],
            "value": [],
            "name": "snapshotuserid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`snapshotPassword` attribute",
              "***",
              "Default empty. Defines the password passed to the camera as credentials for the image URL. Superseded by receiveStateSnapshotPassword."
            ],
            "value": [],
            "name": "snapshotpassword",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Default regular. Defines the size of the video. The options available are 'x-small' | 'small' | 'regular' | 'large' | 'xlarge' | 'xx-large'."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large",
              "xx-large"
            ],
            "name": "size",
            "default": "regular",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`receiveStatePlay` attribute",
              "***",
              "when defined, will play video only when the value is true, will stop video when value is false.  If not defined, the video will play whenever the component is visible.  If defined and value of false, display background of ch5-video--nosource css class."
            ],
            "value": [],
            "name": "receivestateplay",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSelect` attribute",
              "***",
              "when defined, will play 0-based index of the video source list. Value of < 0 or > 31 will select no video to play Value of 0 to 31 will play the selected video source provided the video source type (see receiveStateSourceType) is valid. when not defined, the first video source defined (equivalent of index 0) in the list will be played."
            ],
            "value": [],
            "name": "receivestateselect",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateURL` attribute",
              "***",
              "provides the video URL to use when the selection changes to the INDEX value. INDEX is the value passed in the 'indexId' attribute that can be used as prefix or suffix of a signal template name. INDEX is 0-based offset into the list of up to maximum number of sources. As an example, if the value provided as indexId is 'INDEX' and the value provided for receiveStateURL is 'panel2.videourl[{{INDEX}}]', this video control will use 'panel2.videourl[0]', 'panel2.videourl[1]', ..., 'panel2.video_url[31]' as string state names to be associated with select value 0, 1, ..., 31."
            ],
            "value": [],
            "name": "receivestateurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSourceType` attribute",
              "***",
              "provides the video source type when the selection changes to INDEX value. Value is 'Network'."
            ],
            "value": [],
            "name": "receivestatesourcetype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateUserId` attribute",
              "***",
              "provides the userid for credentials supplied to camera for video URL."
            ],
            "value": [],
            "name": "receivestateuserid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStatePassword` attribute",
              "***",
              "provides the password for credentials supplied to camera for video URL."
            ],
            "value": [],
            "name": "receivestatepassword",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSnapshotURL` attribute",
              "***",
              "provides the still image URL to use when selection changes to INDEX value."
            ],
            "value": [],
            "name": "receivestatesnapshoturl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSnapshotRefreshRate` attribute",
              "***",
              "Defines the refresh period for a still image url when the selection changes to INDEX value. 0 indicates no refresh."
            ],
            "value": [],
            "name": "receivestatesnapshotrefreshrate",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSnapshotUserId` attribute",
              "***",
              "provides the userId for credentials supplied to camera for image URL."
            ],
            "value": [],
            "name": "receivestatesnapshotuserid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSnapshotPassword` attribute",
              "***",
              "provides the password for credentials supplied to camera for image URL."
            ],
            "value": [],
            "name": "receivestatesnapshotpassword",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateVideoCount` attribute",
              "***",
              "provides the count of videos."
            ],
            "value": [],
            "name": "receivestatevideocount",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnClick` attribute",
              "***",
              "send a signal on click or tap event (mouse or finger up and down in a small period of time)."
            ],
            "value": [],
            "name": "sendeventonclick",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventSelectionChange` attribute",
              "***",
              "send signal on source selection change."
            ],
            "value": [],
            "name": "sendeventselectionchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventSelectionSourceType` attribute",
              "***",
              "current selected source type."
            ],
            "value": [],
            "name": "sendeventselectionsourcetype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventSelectionURL` attribute",
              "***",
              "current selected video URL."
            ],
            "value": [],
            "name": "sendeventselectionurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventSnapshotURL` attribute",
              "***",
              "current selected snapshot URL."
            ],
            "value": [],
            "name": "sendeventsnapshoturl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventState` attribute",
              "***",
              "current state of the video stream numeric enumeration 0 - no selected source or uninitialized 1 - stopped 2 - playing 3 - stop requested 4 - play requested, connecting 5 - play requested, buffering 6 - play requested, retrying 7 - play requested, error."
            ],
            "value": [],
            "name": "sendeventstate",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventErrorCode` attribute",
              "***",
              "current state video error code numeric enumeration, applicable only when state of video is 0-success, 1-HDMI no sync, 2 - DM no stream, -1 -connection refused / camera offline, -2 -no network, -1001 -credentials required or invalid, -1002 -hostname invalid, -1003 -unsupported codec, -9001 - unsupported sourceType, -9002 - invalid url, -9003 - request for greater than maximum simultaneous sessions per source type, -9004 - request for greater than maximum simultaneous sessions per device, -9007 - Unknown Error Message"
            ],
            "value": [],
            "name": "sendeventerrorcode",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventErrorMessage` attribute",
              "***",
              "current state video error message string - diagnostic information on error as propagated from the video rendering engine."
            ],
            "value": [],
            "name": "sendeventerrormessage",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventRetryCount` attribute",
              "***",
              "current state video  retry count numeric - the count of times the video engine has retried to stream the current video source."
            ],
            "value": [],
            "name": "sendeventretrycount",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventResolution` attribute",
              "***",
              "current video resolution string."
            ],
            "value": [],
            "name": "sendeventresolution",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventSnapshotStatus` attribute",
              "***",
              "current state of the still image associated with the current source selection numeric - 0 not shown, 1 -currently shown, 2 - in error."
            ],
            "value": [],
            "name": "sendeventsnapshotstatus",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventSnapshotLastUpdateTime` attribute",
              "***",
              "The timestamp of  the last update time of the still image associated with the current source selection string - serial in RFC 3339 format."
            ],
            "value": [],
            "name": "sendeventsnapshotlastupdatetime",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          }
        ],
        "documentation": [
          "`ch5-video` element",
          "***",
          "Provides an overlay onto a streaming video window. ",
          "Components that should reside above the video that need to be visible and active ",
          "(such as buttons to control playback, text describing the video, ",
          "and annotation controls) need to be defined as children elements to this component.",
          "As a background, the <video> tag provided in modern HTML5 browsers will stream HTTP-based protocols ",
          "such as HLS (HTTP Live Streaming) and DASH (dynamic adaptive Streaming over HTTP). ",
          "These protocols are not employed on the vast majority of security cameras and the design of these protocols ",
          "specify a great deal of buffering (i.e. time delay) that would not be appropriate for use cases associated with a security camera. ",
          "The implementation of the <ch5-video> component will not attempt to render the streaming video within the HTML rendering engine. ",
          "A three tier approach will be employed.  In the top tier, ",
          "the HTML component will be responsible for creating invisible rectangles to expose content beneath the HTML rendering engine. ",
          "The second tier will provide a surface (handle to raw buffer to display graphics) that will render the streaming video. ",
          "The top tier and the second tier will coordinate the location and size of rendered video stream. ",
          "The bottom tier is responsible for decoding the video stream and interfacing with the second tier to display the decoded video stream. ",
          "The documentation below describes the configuration of the top tier HTML component <ch5-video>."
        ],
        "snippets": [
          {
            "prefix": "ch5-video:blank",
            "description": "Crestron video",
            "body": [
              "<ch5-video>",
              "</ch5-video>$0"
            ]
          },
          {
            "prefix": "ch5-video:all-attributes",
            "description": "Crestron video (All Attributes)",
            "body": [
              "<ch5-video id=\"ch5-video_${1:id}\"",
              "\tindexId=\"${2:}\"",
              "\taspectRatio=\"${3:16:9}\"",
              "\tstretch=\"${4:false}\"",
              "\turl=\"${5:}\"",
              "\tsourceType=\"${6:Network}\"",
              "\tuserId=\"${7:}\"",
              "\tpassword=\"${8:}\"",
              "\tsnapshotURL=\"${9:}\"",
              "\tsnapshotRefreshRate=\"${10:5}\"",
              "\tsnapshotUserId=\"${11:}\"",
              "\tsnapshotPassword=\"${12:}\"",
              "\tsize=\"${13:regular}\"",
              "\treceiveStatePlay=\"${14:}\"",
              "\treceiveStateSelect=\"${15:}\"",
              "\treceiveStateURL=\"${16:}\"",
              "\treceiveStateSourceType=\"${17:}\"",
              "\treceiveStateUserId=\"${18:}\"",
              "\treceiveStatePassword=\"${19:}\"",
              "\treceiveStateSnapshotURL=\"${20:}\"",
              "\treceiveStateSnapshotRefreshRate=\"${21:}\"",
              "\treceiveStateSnapshotUserId=\"${22:}\"",
              "\treceiveStateSnapshotPassword=\"${23:}\"",
              "\treceiveStateVideoCount=\"${24:}\"",
              "\tsendEventOnClick=\"${25:}\"",
              "\tsendEventSelectionChange=\"${26:}\"",
              "\tsendEventSelectionSourceType=\"${27:}\"",
              "\tsendEventSelectionURL=\"${28:}\"",
              "\tsendEventSnapshotURL=\"${29:}\"",
              "\tsendEventState=\"${30:}\"",
              "\tsendEventErrorCode=\"${31:}\"",
              "\tsendEventErrorMessage=\"${32:}\"",
              "\tsendEventRetryCount=\"${33:}\"",
              "\tsendEventResolution=\"${34:}\"",
              "\tsendEventSnapshotStatus=\"${35:}\"",
              "\tsendEventSnapshotLastUpdateTime=\"${36:}\">",
              "</ch5-video>$0"
            ]
          },
          {
            "prefix": "ch5-video:default",
            "description": "Crestron video (Default)",
            "body": [
              "<ch5-video id=\"ch5-video_${1:id}\"",
              "\tindexId=\"${2:}\"",
              "\taspectRatio=\"${3:16:9}\"",
              "\tstretch=\"${4:false}\"",
              "\turl=\"${5:}\"",
              "\tsourceType=\"${6:Network}\"",
              "\tuserId=\"${7:}\"",
              "\tpassword=\"${8:}\"",
              "\tsnapshotURL=\"${9:}\"",
              "\tsnapshotRefreshRate=\"${10:5}\"",
              "\tsnapshotUserId=\"${11:}\"",
              "\tsnapshotPassword=\"${12:}\"",
              "\tsize=\"${13:regular}\">",
              "</ch5-video>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "Ch5 Video offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Video",
        "tagName": "ch5-video",
        "role": "video",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`sourceListPosition` attribute",
              "***",
              "The position of the drag and drop list in relation to the area where the droppable screens are rendered. Possible values are top(default), left, right, bottom"
            ],
            "value": [
              "top",
              "left",
              "right",
              "bottom"
            ],
            "name": "sourcelistposition",
            "default": "top",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`endless` attribute",
              "***",
              "When endless scrolling is selected the items in the list will loop when the end is reached creating the illusion  that there is an 'endless'. Only works when numberOfSourceListDivisions is 1. Default value is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "endless",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`numberOfSourceListDivisions` attribute",
              "***",
              "This property determines the number of rows (when the list is at the top or bottom i.e. horizontal) or columns (when the list is on the left or right i.e. vertical) the contents of the list will be divided into user sets a default location attribute. This is an attribute for the sources. Default value is 1, Minimum value is 1 and Maximum value is 10."
            ],
            "value": [],
            "name": "numberofsourcelistdivisions",
            "default": "1",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 10
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`scrollbar` attribute",
              "***",
              "Determines whether or not the scrollbar will be visible on the list. The scrollbar position shall be bottom for horizontal and right for vertical. Default value is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "scrollbar",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`numberOfSources` attribute",
              "***",
              "Sets the number of sources on the control. Default value is 5, Minimum value is 1 and Maximum value is 256."
            ],
            "value": [],
            "name": "numberofsources",
            "default": "5",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 256
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`numberOfScreenColumns` attribute",
              "***",
              "Sets the number of columns in the screen view. Setting to zero disables this feature and returns to standard calculations. Note: A minimum screen size of 80Wx60H will be enforced. Your total number of columns may be limited automatically if the width of the control is exceeded. Default value is 0, Minimum value is 0 and Maximum value is 10."
            ],
            "value": [],
            "name": "numberofscreencolumns",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 10
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`indexId` attribute",
              "***",
              "Provides the name of the offset identifier to be substituted with 0 based index of the item in a list within the template item surrounded by '{{ delimiters }}'."
            ],
            "value": [],
            "name": "indexid",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`displayScreenLabel` attribute",
              "***",
              "Enables or disables the display of all labels on screens. Default value is true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "displayscreenlabel",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`screenAspectRatio` attribute",
              "***",
              "The aspect ratio of the drag and drop screen area. If this value is set the screens will always maintain the specified aspect ratio. Possible value are stretch(default), 16:9, 4:3."
            ],
            "value": [
              "stretch",
              "16:9",
              "4:3"
            ],
            "name": "screenaspectratio",
            "default": "stretch",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`numberOfScreens` attribute",
              "***",
              "Sets the maximum number of screens on the control. Note: A minimum screen size of 80Wx60H will be enforced. Your total number of screens may be limited automatically if the size of the control is exceeded. Default value is 2, Minimum value is 1 and Maximum value is 36."
            ],
            "value": [],
            "name": "numberofscreens",
            "default": "2",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 36
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`sourceIconClass` attribute",
              "***",
              "Sets the default icon for each source. The iconClass in the ch5-video-switcher-source tag will override this value. Default value is fa-solid fa-video"
            ],
            "value": [],
            "name": "sourceiconclass",
            "default": "fa-solid fa-video",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`sourceIconUrl` attribute",
              "***",
              "This attributes supports SVG icons and PNG icons, we can pass only one url in the sourceIconUrl attribute.The iconUrl in the ch5-video-switcher-source tag will override this value."
            ],
            "value": [],
            "name": "sourceiconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`sendEventOnDrop` attribute",
              "***",
              "Index sent to the control system for each icon when it is dropped on a screen."
            ],
            "value": [],
            "name": "sendeventondrop",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`sendEventOnChange` attribute",
              "***",
              "Boolean signal sent to the control system for each source dropped on the screen. No Repeat digital in this case."
            ],
            "value": [],
            "name": "sendeventonchange",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "event",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSourceChanged` attribute",
              "***",
              "Index of the screen changed."
            ],
            "value": [],
            "name": "receivestatesourcechanged",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateSourceLabel` attribute",
              "***",
              "After receiving value from control system, this value is applied to the label attribute of all the sources in the list."
            ],
            "value": [],
            "name": "receivestatesourcelabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateScriptSourceLabelHtml` attribute",
              "***",
              "Allows the signal script evaluation to be applied to the source label. Allows for multiline, multiStyled labels."
            ],
            "value": [],
            "name": "receivestatescriptsourcelabelhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateScreenLabel` attribute",
              "***",
              "After receiving value from control system, this value is applied to the label attribute of all the screens."
            ],
            "value": [],
            "name": "receivestatescreenlabel",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateScriptScreenLabelHtml` attribute",
              "***",
              "Allows the signal script evaluation to be applied to the screen label. Allows for multiline, multiStyled screen labels."
            ],
            "value": [],
            "name": "receivestatescriptscreenlabelhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "stringJoin": 1
            },
            "limits": [],
            "applicableToListItem": true,
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receiveStateNumberOfScreens` attribute",
              "***",
              "Value received from the receiveStateNumberOfScreens Join will be set to the numberOfScreens attribute."
            ],
            "value": [],
            "name": "receivestatenumberofscreens",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`contractName` attribute",
              "***",
              "ContractName attribute sets the name of the contract."
            ],
            "value": [],
            "name": "contractname",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`useContractForEnable` attribute",
              "***",
              "Default value is false. When true, contract 'Enable' state determines if the component is enabled. When false, the 'receiveStateEnable' join may be applied. Consistent with other components, if the 'receiveStateEnable' join is provided, the value of that join determines if the component is enabled "
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforenable",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`useContractForShow` attribute",
              "***",
              "Default value is false. When true, contract 'Show' state determines if the component is enabled. When false, the 'receiveStateShow' join may be applied. Consistent with other components, if the 'receiveStateShow' join is provided, the value of that join determines if the component is visible."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "usecontractforshow",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`contractSourceLabelType` attribute",
              "***",
              "Default value is 'none'. When 'none', contract ‘Source_X_Label’, will not change the label of source x. When 'textContent', change in value of contract 'Source_X_Label’, will change the label as if it were text, not HTML markup. When 'innerHTML', change in value of contract ‘Source_X_Label’, will change the label as if it were HTML content"
            ],
            "value": [
              "none",
              "textContent",
              "innerHTML"
            ],
            "name": "contractsourcelabeltype",
            "default": "none",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`contractScreenLabelType` attribute",
              "***",
              "Default value is 'none'. When 'none', contract ‘Screen_X_Label’, will not change the label of source x. When 'textContent', change in value of contract 'Screen_X_Label’, will change the label as if it were text, not HTML markup. When 'innerHTML', change in value of contract ‘Screen_X_Label’, will change the label as if it were HTML content "
            ],
            "value": [
              "none",
              "textContent",
              "innerHTML"
            ],
            "name": "contractscreenlabeltype",
            "default": "none",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-video-switcher` element",
          "***",
          "The Video Switcher widget combines a scrolling list with a drag and drop functionality geared towards controlling video sources in a switcher matrix."
        ],
        "snippets": [
          {
            "prefix": "ch5-video-switcher:blank",
            "description": "Crestron video switcher",
            "body": [
              "<ch5-video-switcher>",
              "</ch5-video-switcher>$0"
            ]
          },
          {
            "prefix": "ch5-video-switcher:all-attributes",
            "description": "Crestron video switcher (All Attributes)",
            "body": [
              "<ch5-video-switcher id=\"ch5-video-switcher_${1:id}\"",
              "\tsourceListPosition=\"${2:top}\"",
              "\tendless=\"${3:false}\"",
              "\tnumberOfSourceListDivisions=\"${4:1}\"",
              "\tscrollbar=\"${5:false}\"",
              "\tnumberOfSources=\"${6:5}\"",
              "\tnumberOfScreenColumns=\"${7:0}\"",
              "\tindexId=\"${8:}\"",
              "\tdisplayScreenLabel=\"${9:true}\"",
              "\tscreenAspectRatio=\"${10:stretch}\"",
              "\tnumberOfScreens=\"${11:2}\"",
              "\tsourceIconClass=\"${12:fa-solid fa-video}\"",
              "\tsourceIconUrl=\"${13:}\"",
              "\tsendEventOnDrop=\"${14:}\"",
              "\tsendEventOnChange=\"${15:}\"",
              "\treceiveStateSourceChanged=\"${16:}\"",
              "\treceiveStateSourceLabel=\"${17:}\"",
              "\treceiveStateScriptSourceLabelHtml=\"${18:}\"",
              "\treceiveStateScreenLabel=\"${19:}\"",
              "\treceiveStateScriptScreenLabelHtml=\"${20:}\"",
              "\treceiveStateNumberOfScreens=\"${21:}\"",
              "\tcontractName=\"${22:}\"",
              "\tuseContractForEnable=\"${23:false}\"",
              "\tuseContractForShow=\"${24:false}\"",
              "\tcontractSourceLabelType=\"${25:none}\"",
              "\tcontractScreenLabelType=\"${26:none}\">",
              "</ch5-video-switcher>$0"
            ]
          },
          {
            "prefix": "ch5-video-switcher:default",
            "description": "Crestron video switcher (default)",
            "body": [
              "<ch5-video-switcher id=\"ch5-video-switcher_${1:id}\"",
              "\tsourceListPosition=\"${2:top}\"",
              "\tendless=\"${3:false}\"",
              "\tnumberOfSourceListDivisions=\"${4:1}\"",
              "\tscrollbar=\"${5:false}\"",
              "\tnumberOfSources=\"${6:5}\"",
              "\tnumberOfScreenColumns=\"${7:0}\"",
              "\tindexId=\"${8:}\"",
              "\tdisplayScreenLabel=\"${9:true}\"",
              "\tscreenAspectRatio=\"${10:stretch}\"",
              "\tnumberOfScreens=\"${11:2}\"",
              "\tsourceIconClass=\"${12:fa-solid fa-video}\"",
              "\tsourceIconUrl=\"${13:}\">",
              "</ch5-video-switcher>$0"
            ]
          },
          {
            "prefix": "ch5-video-switcher:contractbased",
            "description": "Crestron video switcher(contractbased)",
            "body": [
              "<ch5-video-switcher id=\"ch5-video-switcher_${1:id}\"",
              "\tcontractName=\"${2:}\">",
              "</ch5-video-switcher>$0"
            ]
          },
          {
            "prefix": "ch5-video-switcher:contractbased-attributes",
            "description": "Crestron video switcher(contractbased-attributes)",
            "body": [
              "<ch5-video-switcher id=\"ch5-video-switcher_${1:id}\"",
              "\tcontractName=\"${2:}\"",
              "\tuseContractForEnable=\"${3:false}\"",
              "\tuseContractForShow=\"${4:false}\"",
              "\tcontractSourceLabelType=\"${5:none}\"",
              "\tcontractScreenLabelType=\"${6:none}\">",
              "</ch5-video-switcher>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "ch5-video-switcher-source",
            "optional": true,
            "childElements": [
              {
                "tagName": "ch5-video-switcher-source-label",
                "optional": true,
                "childElements": [
                  {
                    "tagName": "template",
                    "optional": false,
                    "childElements": []
                  }
                ]
              }
            ]
          },
          {
            "tagName": "ch5-video-switcher-screen",
            "optional": true,
            "childElements": [
              {
                "tagName": "ch5-video-switcher-screen-label",
                "optional": true,
                "childElements": [
                  {
                    "tagName": "template",
                    "optional": false,
                    "childElements": []
                  }
                ]
              }
            ]
          }
        ],
        "description": "Ch5 Video Switcher offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Video Switcher",
        "tagName": "ch5-video-switcher",
        "role": "video-switcher",
        "componentVersion": "2.9.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`labelInnerHTML` attribute",
              "***",
              "Ability to provide a template that applies for the individual screen in the list."
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String",
            "hidden": true
          },
          {
            "documentation": [
              "`alignLabel` attribute",
              "***",
              "Set the label alignment on the screen window as either left, center(default) and right."
            ],
            "value": [
              "center",
              "left",
              "right"
            ],
            "name": "alignlabel",
            "default": "center",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          }
        ],
        "documentation": [
          "`ch5-video-switcher-screen` element",
          "***",
          "Ch5 Video Switcher Screen tag to provide ability to enter individual screen labels and align the labels for the screen."
        ],
        "snippets": [
          {
            "prefix": "ch5-video-switcher-screen:blank",
            "description": "Crestron video switcher screen",
            "body": [
              "<ch5-video-switcher-screen>",
              "</ch5-video-switcher-screen>$0"
            ]
          },
          {
            "prefix": "ch5-video-switcher-screen:default/all",
            "description": "Crestron video switcher screen (default)",
            "body": [
              "<ch5-video-switcher-screen",
              "\talignLabel=\"${1:center}\">",
              "</ch5-video-switcher-screen>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "A child element designed to handle individual screen for Ch5 Video Switcher component",
        "name": "Ch5 Video Switcher Screen",
        "tagName": "ch5-video-switcher-screen",
        "role": "template",
        "componentVersion": "2.9.0"
      },
      {
        "attributes": [],
        "documentation": [
          "`ch5-video-switcher-screen-label` element",
          "***",
          "A child element designed to capture the label for Ch5 Video Switcher Screen Label."
        ],
        "snippets": [
          {
            "prefix": "ch5-video-switcher-screen-label:blank",
            "description": "Crestron video switcher screen label",
            "body": [
              "<ch5-video-switcher-screen-label>",
              "\t<template>",
              "\t$1",
              "\t</template>",
              "</ch5-video-switcher-screen-label>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "template",
            "optional": false,
            "childElements": []
          }
        ],
        "description": "Ch5 Video Switcher Screen Label is a child node for <ch5-video-switcher-screen>.",
        "name": "Ch5 Video Switcher Screen Label",
        "tagName": "ch5-video-switcher-screen-label",
        "role": "label",
        "componentVersion": "2.9.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`labelInnerHTML` attribute",
              "***",
              "Ability to provide a template that applies for the individual sources in the video switcher."
            ],
            "value": [],
            "name": "labelinnerhtml",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String",
            "hidden": true
          },
          {
            "documentation": [
              "`iconClass` attribute",
              "***",
              "The styled graphics and font styling information that determine the look/feel of the source icon image and the source icon text label. This style contains n states of icon images"
            ],
            "value": [],
            "name": "iconclass",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`iconUrl` attribute",
              "***",
              "This attribute supports SVG icons and PNG Icons, we can pass only one url in the iconUrl attribute."
            ],
            "value": [],
            "name": "iconurl",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          }
        ],
        "documentation": [
          "`ch5-video-switcher-source` element",
          "***",
          "Ch5 Video Switcher Source tag to provide ability to enter individual source labels, align the labels for the source and provide iconclass for the source."
        ],
        "snippets": [
          {
            "prefix": "ch5-video-switcher-source:blank",
            "description": "Crestron video switcher source",
            "body": [
              "<ch5-video-switcher-source>",
              "</ch5-video-switcher-source>$0"
            ]
          },
          {
            "prefix": "ch5-video-switcher-source:default/all",
            "description": "Crestron video switcher source (default)",
            "body": [
              "<ch5-video-switcher-source",
              "\ticonClass=\"${1:}\"",
              "\ticonUrl=\"${2:}\">",
              "</ch5-video-switcher-source>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "A child element designed to handle individual source for Ch5 Video Switcher component",
        "name": "Ch5 Video Switcher Source",
        "tagName": "ch5-video-switcher-source",
        "role": "template",
        "componentVersion": "2.9.0"
      },
      {
        "attributes": [],
        "documentation": [
          "`ch5-video-switcher-source-label` element",
          "***",
          "A child element designed to capture the label for Ch5 Video Switcher Source Label."
        ],
        "snippets": [
          {
            "prefix": "ch5-video-switcher-source-label:blank",
            "description": "Crestron video switcher source label",
            "body": [
              "<ch5-video-switcher-source-label>",
              "\t<template>",
              "\t$1",
              "\t</template>",
              "</ch5-video-switcher-source-label>$0"
            ]
          }
        ],
        "childElements": [
          {
            "tagName": "template",
            "optional": false,
            "childElements": []
          }
        ],
        "description": "Ch5 Video Switcher Source Label is a child node for <ch5-video-switcher-source>.",
        "name": "Ch5 Video Switcher Source Label",
        "tagName": "ch5-video-switcher-source-label",
        "role": "label",
        "componentVersion": "2.9.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of space delimited CSS classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": "null",
            "hideWhen": [
              {
                "receiveStateCustomClass": [
                  "true"
                ]
              }
            ],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of semicolon delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "booleanJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "It sets the value of wifi signal strength.It can range from 0 to 100. Default value is 0."
            ],
            "value": [],
            "name": "value",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 100
              }
            ],
            "attributeType": "number"
          },
          {
            "documentation": [
              "`receiveStateValue` attribute",
              "***",
              "The gauge value gets updated with the newly received value from signal."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "join": {
              "direction": "state",
              "isContractName": true,
              "numericJoin": 1
            },
            "limits": [],
            "attributeType": "Join"
          },
          {
            "documentation": [
              "`gaugeStyle` attribute",
              "***",
              "Determines the graphic presentation/appearance of the gauge. This style can contain any number of states each representing a different level of signal strength. It sets the style(accents,light and dark) of the gauge. Default value is 'light'."
            ],
            "value": [
              "light",
              "accents",
              "dark"
            ],
            "name": "gaugestyle",
            "default": "light",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`alignment` attribute",
              "***",
              "Sets the alignment of the gauge up, down, left and right. Default value is 'up'."
            ],
            "value": [
              "up",
              "down",
              "left",
              "right"
            ],
            "name": "alignment",
            "default": "up",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`minValue` attribute",
              "***",
              "Determines the minimum analog value received from the control system, when receiving this value or a value below the minimum the control will show the off state. Default value is 0 and it can range from 0 to 99."
            ],
            "value": [],
            "name": "minvalue",
            "default": "0",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 0,
                "max": 99
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`maxValue` attribute",
              "***",
              "Determines the maximum analog value received from the control system, when receiving this value or a value above the maximum the control will show the maximum signal strength state. Default value is 100 and it can range from 1 to 100."
            ],
            "value": [],
            "name": "maxvalue",
            "default": "100",
            "hideWhen": [],
            "showWhen": [],
            "limits": [
              {
                "min": 1,
                "max": 100
              }
            ],
            "attributeType": "Integer"
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Select the size of the wifi-signal level gauge from small, regular, large and x-large. Default value is 'regular'."
            ],
            "value": [
              "regular",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": "regular",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "EnumeratedValue"
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": "null",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "String"
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": "true",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": "false",
            "hideWhen": [],
            "showWhen": [],
            "limits": [],
            "attributeType": "Boolean"
          }
        ],
        "documentation": [
          "`ch5-wifi-signal-level-gauge` element",
          "***",
          ""
        ],
        "snippets": [
          {
            "prefix": "ch5-wifi-signal-level-gauge:blank",
            "description": "Crestron wifi signal level gauge",
            "body": [
              "<ch5-wifi-signal-level-gauge>",
              "</ch5-wifi-signal-level-gauge>$0"
            ]
          },
          {
            "prefix": "ch5-wifi-signal-level-gauge:default",
            "description": "Crestron wifi signal level gauge",
            "body": [
              "<ch5-wifi-signal-level-gauge gaugeStyle=\"${1:light}\"",
              "\treceiveStateValue=\"${2:}\"",
              "\tvalue=\"${3:0}\">",
              "</ch5-wifi-signal-level-gauge>$0"
            ]
          },
          {
            "prefix": "ch5-wifi-signal-level-gauge:all-attributes",
            "description": "Crestron wifi signal level gauge (All Attributes)",
            "body": [
              "<ch5-wifi-signal-level-gauge id=\"ch5-wifi-signal-level-gauge_${1:id}\"",
              "\treceiveStateValue=\"${2:}\"",
              "\tgaugeStyle=\"${3:light}\"",
              "\talignment=\"${4:up}\"",
              "\tminValue=\"${5:0}\"",
              "\tmaxValue=\"${6:100}\"",
              "\tsize=\"${7:regular}\"",
              "\tvalue=\"${8:0}\">",
              "</ch5-wifi-signal-level-gauge>$0"
            ]
          }
        ],
        "childElements": [],
        "description": "The Wifi Signal Level Gauge control is used to display a signal strength from an analog join.",
        "name": "Ch5 Wifi Signal Level Gauge",
        "tagName": "ch5-wifi-signal-level-gauge",
        "role": "wifi-signal-level-gauge",
        "componentVersion": "2.2.0"
      }
    ]
  }
}