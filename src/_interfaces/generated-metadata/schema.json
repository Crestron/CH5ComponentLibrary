{
  "version": "1.0.0",
  "htmlElements": {
    "common": {
      "attributes": [
        {
          "documentation": [
            "`data-ch5-show` custom attribute",
            "***",
            "Specifies whether or not an element is visible based upon the value of the state. Works with standard HTML elements. ",
            "The data-ch5-noshow-type attribute can be supplied to set how an HTML element will be hidden from view."
          ],
          "value": [],
          "name": "data-ch5-show",
          "default": null
        },
        {
          "documentation": [
            "`data-ch5-noshow-type` custom attribute",
            "***",
            "The 'data-ch5-noshow-type' custom attribute is related to the HTML custom attribute 'data-ch5-show' ",
            "and overrides the way in which a Component is made invisible. ",
            "The Crestron Components library will default the 'noshow' type based upon the element type."
          ],
          "value": [
            "visibility",
            "display",
            "remove"
          ],
          "name": "data-ch5-noshow-type",
          "default": null
        },
        {
          "documentation": [
            "`data-ch5-appendclass` custom attribute",
            "***",
            "The 'data-ch5-appendclass' custom HTML attribute appends the value of a signal to the 'class' attribute ",
            "on a standard HTML element. A change in signal value will remove the prior value of the ",
            "signal and append the new value."
          ],
          "value": [],
          "name": "data-ch5-appendclass",
          "default": null
        },
        {
          "documentation": [
            "`data-ch5-innerhtml` custom attribute",
            "***",
            "The 'data-ch5-innerhtml' custom HTML attribute allows for dynamic HTML content to be applied to ",
            "standard HTML elements such as <div>. This is a very powerful construct that, when used incorrecly, ",
            "can lead to functional and performance issues if used to inject badly-formed HTML. The ",
            "attribute value is signalScript as described in the ch5.subscribeStateScript utility function description."
          ],
          "value": [],
          "name": "data-ch5-innerhtml",
          "default": null
        },
        {
          "documentation": [
            "`data-ch5-showpulse` custom attribute",
            "***",
            "Works similarly to data-ch5-show, but does not offer toggle functionality (can only make the elements visible). ",
            "Works with standard HTML elements. ",
            "The data-ch5-noshow-type attribute can be supplied to set how an HTML element will be hidden from view."
          ],
          "value": [],
          "name": "data-ch5-showpulse",
          "default": null
        },
        {
          "documentation": [
            "`data-ch5-textcontent` custom attribute",
            "***",
            "The 'data-ch5-textcontent' custom HTML attribute allows for dynamic text content to be applied to ",
            "standard HTML elements such as <p> and <h1-6>. The attribute value is signalScript as described in the ",
            "ch5.subscribeStateScript utility function description."
          ],
          "value": [],
          "name": "data-ch5-textcontent",
          "default": null
        },
        {
          "documentation": [
            "`data-ch5-appendstyle` custom attribute",
            "***",
            "The 'data-ch5-appendstyle' custom HTML attribute appends the value of a signal to the 'style' attribute ",
            "on a standard HTML element. A signal value change will remove the prior value of the ",
            "signal and append the new value."
          ],
          "value": [],
          "name": "data-ch5-appendstyle",
          "default": null
        },
        {
          "documentation": [
            "`data-ch5-hidepulse` custom attribute",
            "***",
            "Works similarly to data-ch5-show, but does not offer toggle functionality (can only hide the elements). ",
            "Works with standard HTML elements. ",
            "The data-ch5-noshow-type attribute can be supplied to set how an HTML element will be hidden from view."
          ],
          "value": [],
          "name": "data-ch5-hidepulse",
          "default": null
        },
        {
          "documentation": [
            "`data-ch5-keep-sig-subscription` custom attribute",
            "***",
            "Keeps the state subscription key generated by hidepulse, showpulse, or show custom attributes."
          ],
          "value": [],
          "name": "data-ch5-keep-sig-subscription",
          "default": null
        },
        {
          "documentation": [
            "`data-ch5-i18n` custom attribute",
            "***",
            "The 'data-ch5-i18n' custom HTML attribute allows for text content translation to be applied to ",
            "standard HTML elements."
          ],
          "value": [],
          "name": "data-ch5-i18n",
          "default": null
        }
      ]
    },
    "elements": []
  },
  "ch5Elements": {
    "common": {
      "attributes": []
    },
    "elements": [
      {
        "attributes": [
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Overrides the appearance of the button with alternative CSS that is defined in classes defined with ch5-button--size, where size is the value of the property. If no `size` is provided, type of `default` is used."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": "regular"
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "The label of the button element."
            ],
            "value": [],
            "name": "label",
            "default": null
          },
          {
            "documentation": [
              "`icon` attribute",
              "***",
              "The icon class."
            ],
            "value": [],
            "name": "iconclass",
            "default": null
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "The default value is 'first'.",
              "Valid values: 'first', 'last', 'top', 'bottom'.",
              "The icon position relative to the label."
            ],
            "value": [
              "first",
              "last",
              "top",
              "bottom"
            ],
            "name": "iconposition",
            "default": "first"
          },
          {
            "documentation": [
              "`iconurl` attribute",
              "***",
              "The attribute used for add a SVG image."
            ],
            "value": [],
            "name": "iconurl",
            "default": null
          },
          {
            "documentation": [
              "`checkboxShow` attribute",
              "***",
              "The default value is false.",
              "This property is used to display or hide a checkbox. If set to true, a checkbox is displayed and ",
              "'ch5-button__checkbox' will be applied as the CSS class on the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "checkboxShow",
            "default": "false"
          },
          {
            "documentation": [
              "`checkboxPosition` attribute",
              "***",
              "The default value is false.",
              "This property is used to display or hide a checkbox. If set to true, a checkbox is displayed and ",
              "'ch5-button__checkbox' will be applied as the CSS class on the component."
            ],
            "value": [
              "left",
              "right"
            ],
            "name": "checkboxPosition",
            "default": "false"
          },
          {
            "documentation": [
              "`orientation` attribute",
              "***",
              "The default value is 'horizontal'. Valid values: 'horizontal', 'vertical'.",
              "Positions the control elements in a horizontal or vertical orientation.",
              "For vertical alignment, it will apply a CSS class that will rotate the ",
              "component -90 degrees (270 degrees clockwise, 90 degrees counter clockwise)."
            ],
            "value": [
              "horizontal",
              "vertical"
            ],
            "name": "orientation",
            "default": "horizontal"
          },
          {
            "documentation": [
              "`shape` attribute",
              "***",
              "The default value is 'rounded-rectangle'. Valid values: 'rounded-rectangle', ",
              "'rectangle', 'tab', 'circle', 'oval'. The shape of the button."
            ],
            "value": [
              "rounded-rectangle",
              "rectangle",
              "tab",
              "circle",
              "oval"
            ],
            "name": "shape",
            "default": "rounded-rectangle"
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "Valid values: 'width', 'height', 'both'.",
              "When the stretch property is set, the button element inherits the ",
              "width and/or height of the container. If stretch=height is used, ",
              "the button will be responsive based on the label length until it ",
              "reaches the max-width of the container. If stretch=width is ",
              "applied, there is no responsiveness after reaching the max-width, and ",
              "the text will overflow. The same applies if stretch=both is used. Note ",
              "that if the button element shape is 'circle' or 'oval', the stretch ",
              "property will be ignored."
            ],
            "value": [
              "both",
              "width",
              "height"
            ],
            "name": "stretch",
            "default": null
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "Valid values: 'default', 'info', 'text', 'danger', 'warning', 'success', 'primary', 'secondary'.",
              "Overrides the appearance of the button with alternative CSS ",
              "defined in classes defined with ch5-button--type, where type is ",
              "the value of the property. If no 'type' is provided, the type of ",
              "'default' is used."
            ],
            "value": [
              "default",
              "primary",
              "info",
              "text",
              "danger",
              "warning",
              "success",
              "secondary"
            ],
            "name": "type",
            "default": "default"
          },
          {
            "documentation": [
              "`hAlignLabel` attribute",
              "***",
              "Valid values: 'width', 'height', 'both'.",
              "When the stretch property is set, the button element inherits the ",
              "width and/or height of the container. If stretch=height is used, ",
              "the button will be responsive based on the label length until it ",
              "reaches the max-width of the container. If stretch=width is ",
              "applied, there is no responsiveness after reaching the max-width, and ",
              "the text will overflow. The same applies if stretch=both is used. Note ",
              "that if the button element shape is 'circle' or 'oval', the stretch ",
              "property will be ignored."
            ],
            "value": [
              "left",
              "right",
              "center",
              "justify"
            ],
            "name": "hAlignLabel",
            "default": null
          },
          {
            "documentation": [
              "`vAlignLabel` attribute",
              "***",
              "Valid values: 'width', 'height', 'both'.",
              "When the stretch property is set, the button element inherits the ",
              "width and/or height of the container. If stretch=height is used, ",
              "the button will be responsive based on the label length until it ",
              "reaches the max-width of the container. If stretch=width is ",
              "applied, there is no responsiveness after reaching the max-width, and ",
              "the text will overflow. The same applies if stretch=both is used. Note ",
              "that if the button element shape is 'circle' or 'oval', the stretch ",
              "property will be ignored."
            ],
            "value": [
              "start",
              "end",
              "center",
              "baseline"
            ],
            "name": "vAlignLabel",
            "default": null
          },
          {
            "documentation": [
              "`formtype` attribute",
              "***",
              "Valid values: 'cancel' and 'submit'. ",
              "submit: The value submit,submits the form data. ",
              "cancel: The value cancel, reset all the controls of form to their initial values."
            ],
            "value": [
              "cancel",
              "submit"
            ],
            "name": "formtype",
            "default": null
          },
          {
            "documentation": [
              "`receivestateselected` attribute",
              "***",
              "When received, applies a true value applied by the selected class (ch5-button--selected)."
            ],
            "value": [],
            "name": "receivestateselected",
            "default": null
          },
          {
            "documentation": [
              "`receivestatelabel` attribute",
              "***",
              "When received, applies the value on the label."
            ],
            "value": [],
            "name": "receivestatelabel",
            "default": null
          },
          {
            "documentation": [
              "`receivestatescriptlabelhtml` attribute",
              "***",
              "Allows the signal script evaluation to be applied to the ",
              "button.inner HTML class. Allows for multiline, multistyled labels."
            ],
            "value": [],
            "name": "receivestatescriptlabelhtml",
            "default": null
          },
          {
            "documentation": [
              "`sendeventonclick` attribute",
              "***",
              "Sends an event on click or tap (mouse or swipe up and down quickly).",
              "Use this when the control system takes an action on the rising edge from false to true of a boolean digital event.",
              "Examples include the SIMPL Logic Symbol for Toggle a with description of ",
              "Digital input <clock> 'High/1 (rising edge) = Toggle; Low/0 = No effect'."
            ],
            "value": [],
            "name": "sendeventonclick",
            "default": null
          },
          {
            "documentation": [
              "`sendeventontouch` attribute",
              "***",
              "Sends a boolean true event when the screen is tapped and a boolean false event when released.",
              "Use this when the control system takes an action on a level-sensitive boolean digital event.",
              "Examples include the SIMPL Logic Symbol for Analog Ramp with a description of ",
              "Digital input <up> 'High/1 (level sensitive) = Ramp up; Low/0 = Stop ramp'."
            ],
            "value": [],
            "name": "sendeventontouch",
            "default": null
          },
          {
            "documentation": [
              "`receivestateiconclass` attribute",
              "***",
              "The icon class received from the control system."
            ],
            "value": [],
            "name": "receivestateiconclass",
            "default": null
          },
          {
            "documentation": [
              "`receivestatetype` attribute",
              "***",
              "After receiving a stateType value from control system, this value is applied to the type attribute.",
              "See description of the type attribute."
            ],
            "value": [],
            "name": "receivestatetype",
            "default": null
          },
          {
            "documentation": [
              "`receivestateiconurl` attribute",
              "***",
              "After receiving stateIconUrl value from control system, this value is applied to the iconUrl attribute. ",
              "See description of the iconUrl attribute."
            ],
            "value": [],
            "name": "receivestateiconurl",
            "default": null
          },
          {
            "documentation": [
              "`customclasspressed` attribute",
              "***",
              "The name of the CSS class applied while the button is pressed by a user."
            ],
            "value": [],
            "name": "customclasspressed",
            "default": null
          },
          {
            "documentation": [
              "`customclassdisabled` attribute",
              "***",
              "The name of the CSS class applied while the button is disabled."
            ],
            "value": [],
            "name": "customclassdisabled",
            "default": null
          },
          {
            "documentation": [
              "`selected` attribute",
              "***",
              "The default value is false.",
              "This property reflects the state of the component. If set to true, ",
              "'ch5-button--selected' will be applied as the CSS class on the component."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "selected",
            "default": "false"
          }
        ],
        "documentation": [
          "`ch5-button` element",
          "***",
          "An extension to standard HTML ch5-button element with icons and simple formats."
        ],
        "snippets": [
          {
            "prefix": "ch5-button:blank",
            "description": "Crestron Button",
            "body": [
              "<ch5-button>",
              "</ch5-button>$0"
            ]
          },
          {
            "prefix": "ch5-button:default",
            "description": "Crestron Button",
            "body": [
              "<ch5-button id=\"btn_${1:id}\"",
              "\tlabel=\"${2:Crestron Button}\"",
              "\tsendeventonclick=\"${3:btn_${1}_clicked}\">",
              "</ch5-button>$0"
            ]
          },
          {
            "prefix": "ch5-button:all-attributes",
            "description": "Crestron Button (All Attributes)",
            "body": [
              "<ch5-button id=\"btn_${1:id}\"",
              "\tlabel=\"${2:Crestron Button}\"",
              "\ttype=\"${3|default,primary,info,text,danger,warning,success,secondary|}\"",
              "\tcustomClass=\"${4:customClass}\"",
              "\tshape=\"${5|rounded-rectangle,rectangle,tab,circle,oval|}\"",
              "\tsize=\"${6|regular,x-small,small,large,x-large|}\"",
              "\tstretch=\"${7|both,width,height|}\"",
              "\ticonposition=\"${8|first,last,top,bottom|}\"",
              "\ticonclass=\"${9:iconClass}\"",
              "\torientation=\"${10|horizontal,vertical|}\"",
              "\tsendeventonclick=\"${11:btn_${1}_clicked}\"",
              "\tsendeventontouch=\"${12:btn_${1}_touched}\"",
              "\treceivestateselected=\"${13}\"",
              "\treceivestatelabel=\"${14}\"",
              "\treceivestatescriptlabelhtml=\"${15}\">",
              "</ch5-button>$0"
            ]
          }
        ],
        "description": "Ch5 Button offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Button",
        "tagName": "ch5-button",
        "role": "button",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`alt` attribute",
              "***",
              "Defines an alternative text description for the image."
            ],
            "value": [],
            "name": "alt",
            "default": null
          },
          {
            "documentation": [
              "`height` attribute",
              "The intrinsic height of the image, in pixels. Must be a string of the form Npx or N%."
            ],
            "value": [],
            "name": "height",
            "default": null
          },
          {
            "documentation": [
              "`width` attribute",
              "The intrinsic width of the image, in pixels. Must be a string of the form Npx or N%."
            ],
            "value": [],
            "name": "width",
            "default": null
          },
          {
            "documentation": [
              "`refreshrate` attribute",
              "***",
              "The number of seconds between each URL refresh. If 0, the URL will not",
              "be refreshed."
            ],
            "value": [],
            "name": "refreshrate",
            "default": null
          },
          {
            "documentation": [
              "`url` attribute",
              "***",
              "Must be a supported image format, including JPEG, GIF, PNG, SVG, and BMP."
            ],
            "value": [],
            "name": "url",
            "default": null
          },
          {
            "documentation": [
              "`password` attribute",
              "***",
              "The authentication password required to get the image."
            ],
            "value": [],
            "name": "password",
            "default": null
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": null
          },
          {
            "documentation": [
              "`user` attribute",
              "***",
              "The authentication username required to get the image."
            ],
            "value": [],
            "name": "user",
            "default": null
          },
          {
            "documentation": [
              "`receivestateurl` attribute",
              "***",
              "The image URL passed via state."
            ],
            "value": [],
            "name": "receivestateurl",
            "default": null
          },
          {
            "documentation": [
              "`sendeventontouch` attribute",
              "***",
              "Sends a boolean true event when the screen is tapped and boolean false event when released. ",
              "Use this when the control system takes an action on a level-sensitive boolean digital event. ",
              "Examples include the SIMPL Logic Symbol for Analog Ramp with a description of ",
              "Digital input <up> 'High/1 (level sensitive) = Ramp up; Low/0 = Stop ramp'."
            ],
            "value": [],
            "name": "sendeventontouch",
            "default": null
          },
          {
            "documentation": [
              "`sendeventonclick` attribute",
              "***",
              "Sends an on click or tap event (mouse or swipe up and down quickly). ",
              "Use this when the control system takes an action on the rising edge from false to true of a boolean digital event. ",
              "Examples include the SIMPL Logic Symbol for Toggle with a description of ",
              "Digital input <clock> 'High/1 (rising edge) = Toggle; Low/0 = No effect'."
            ],
            "value": [],
            "name": "sendeventonclick",
            "default": null
          },
          {
            "documentation": [
              "`sendeventonerror` attribute",
              "***",
              "Sends an event on error."
            ],
            "value": [],
            "name": "sendeventonerror",
            "default": null
          },
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": null
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": null
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of space-delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": null
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": null
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": null
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": null
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": null
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": null
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": null
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": null
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": null
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": null
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": null
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": null
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": null
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": null
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": null
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": null
          },
          {
            "documentation": [
              "`onpress` attribute",
              "***",
              "Runs when a press event is initiated."
            ],
            "value": [],
            "name": "onpress",
            "default": null
          },
          {
            "documentation": [
              "`onrelease` attribute",
              "***",
              "Runs when a release event is initiated."
            ],
            "value": [],
            "name": "onrelease",
            "default": null
          }
        ],
        "documentation": [
          "`ch5-image` element",
          "***",
          "A component to load images. Even with this component, the user can use the standard HTML ",
          "<img> tag. This component allows for images to be loaded mainly from a security camera on a polled basis. ",
          "The implementation of the Image Component in used to coordinate requests of images to be shared ",
          "between different image components and video components that may be requesting the same image URL."
        ],
        "snippets": [
          {
            "prefix": "ch5-image:blank",
            "description": "Crestron Image (Blank)",
            "body": [
              "<ch5-image>",
              "</ch5-image>$0"
            ]
          },
          {
            "prefix": "ch5-image:default",
            "description": "Crestron Image (Default)",
            "body": [
              "<ch5-image alt=\"${1:Outside driveway image}\"",
              "\theight=\"${2:900px}\"",
              "\twidth=\"${3:1600px}\"",
              "\trefreshrate=\"${4:2}\"",
              "\turl=\"${5:http://someServer/image.png}\">",
              "</ch5-image>$0"
            ]
          },
          {
            "prefix": "ch5-image:receive-signal",
            "description": "Crestron Image (Receive Signal)",
            "body": [
              "<ch5-image alt=\"${1:Backyard image}\"",
              "\theight=\"${2:450px}\"",
              "\twidth=\"${3:800px}\"",
              "\trefreshrate=\"${4:1}\"",
              "\treceivestateurl=\"${5:url_for_image_signal}\">",
              "</ch5-image>$0"
            ]
          }
        ],
        "description": "Ch5 Image offers a wide range of functionality out-of-the-box.",
        "name": "Ch5 Image",
        "tagName": "ch5-image",
        "role": "img",
        "componentVersion": "1.0.0"
      },
      {
        "attributes": [
          {
            "documentation": [
              "`id` attribute",
              "***",
              "This is a standard id HTML attribute."
            ],
            "value": [],
            "name": "id",
            "default": null
          },
          {
            "documentation": [
              "`customclass` attribute",
              "***",
              "Contains a list of classes that are applied on the component"
            ],
            "value": [],
            "name": "customclass",
            "default": null
          },
          {
            "documentation": [
              "`customstyle` attribute",
              "***",
              "Contains a list of space-delimited style classes applied on the component."
            ],
            "value": [],
            "name": "customstyle",
            "default": null
          },
          {
            "documentation": [
              "`noshowtype` attribute",
              "***",
              "This property reflects the type of the visibility of the item. See the 'data-ch5-noshow-type' ",
              "custom HTML attribute for further information."
            ],
            "value": [
              "visibility",
              "display",
              "remove"
            ],
            "name": "noshowtype",
            "default": null
          },
          {
            "documentation": [
              "`receivestatecustomclass` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'customClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomclass",
            "default": null
          },
          {
            "documentation": [
              "`receivestatecustomstyle` attribute",
              "***",
              "The value of this signal will be applied as an equivalent property on 'styleClass'.",
              "The change of value will remove the prior value and apply the new value."
            ],
            "value": [],
            "name": "receivestatecustomstyle",
            "default": null
          },
          {
            "documentation": [
              "`receivestateshow` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is visible."
            ],
            "value": [],
            "name": "receivestateshow",
            "default": null
          },
          {
            "documentation": [
              "`'receivestateshowpulse` attribute",
              "***",
              "on transition from false to true, this signal directs the component to become visible."
            ],
            "value": [],
            "name": "receivestateshowpulse",
            "default": null
          },
          {
            "documentation": [
              "`receivestatehidepulse` attribute",
              "***",
              "on transition from false to true, this signal will direct if the component is no longer visible."
            ],
            "value": [],
            "name": "receivestatehidepulse",
            "default": null
          },
          {
            "documentation": [
              "`receivestateenable` attribute",
              "***",
              "When true, the boolean value of the signal determines if the component is enabled.",
              "Note that the signal name is provided, and the value of the signal has the opposite ",
              "convention of the 'disabled' attribute. This is to provide consistency with current programming practices."
            ],
            "value": [],
            "name": "receivestateenable",
            "default": null
          },
          {
            "documentation": [
              "`sendeventonshow` attribute",
              "***",
              "Has a boolean value of true when the component is visible and false when not visible.",
              "Note that even if component is completely covered by other visible elements, it is still considered visible."
            ],
            "value": [],
            "name": "sendeventonshow",
            "default": null
          },
          {
            "documentation": [
              "`appendclasswheninviewport` attribute",
              "***",
              "Applies the provided value as class name while the component is visible and removes the class name when not visible."
            ],
            "value": [],
            "name": "appendclasswheninviewport",
            "default": null
          },
          {
            "documentation": [
              "`show` attribute",
              "***",
              "The visibility of the component depends upon the boolean value. The component is visible ",
              "when the value is true and hides when it is false."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "show",
            "default": null
          },
          {
            "documentation": [
              "`dir` attribute",
              "***",
              "An enumerated attribute indicating the directionality of the element's text. It can have the following values:",
              "ltr, which means left to right and is to be used for languages that are written from the left to the right (like English) ",
              "rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic) ",
              "auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it ",
              "finds a character with a strong directionality then it applies that directionality to the whole element."
            ],
            "value": [],
            "name": "dir",
            "default": null
          },
          {
            "documentation": [
              "`class` attribute",
              "***",
              "This is a standard class HTML attribute."
            ],
            "value": [],
            "name": "class",
            "default": null
          },
          {
            "documentation": [
              "`style` attribute",
              "***",
              "This is a standard style HTML attribute."
            ],
            "value": [],
            "name": "style",
            "default": null
          },
          {
            "documentation": [
              "`role` attribute",
              "***",
              "This is an accessibility attribute implemented by all ch5-components and added automatically if not set by the user. ",
              "Where possible, it represents the closest supported type for a ch5-component. In the case of a ch5-button, the value of the role attribute is 'button', for a ch5-modal-dialog the value is 'dialog', and so on. ",
              "The default value for this ch5-component can be overridden via this attribute."
            ],
            "value": [],
            "name": "role",
            "default": null
          },
          {
            "documentation": [
              "`debug` attribute",
              "***",
              "The default value is false. Used to get useful developer-related information about component behavior."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "debug",
            "default": null
          },
          {
            "documentation": [
              "`disabled` attribute",
              "***",
              "The default value is false. This property will direct the component to change CSS and event listeners ",
              "to reflect a disabled state when true."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "disabled",
            "default": null
          },
          {
            "documentation": [
              "`feedbackmode` attribute",
              "***",
              "The default value is 'direct'. Valid values: 'direct', 'submit'.",
              "***",
              "- 'direct' updates the trigger change event and sendEventOnChange ",
              "as the user changes. ",
              "- 'submit' triggers a change event and updates the signal in ",
              "sendEventOnChange attribute only when the submit() method is called by a Form Component."
            ],
            "value": [
              "direct",
              "submit"
            ],
            "name": "feedbackmode",
            "default": null
          },
          {
            "documentation": [
              "`signalvaluesynctimeout` attribute",
              "***",
              "The default value is 1500ms. Defines the time between the end of focus (no more user action ",
              "for example, for a ch5-toggle this means that the user has released the handle of the toggle) ",
              "and the time the CH5 element will check if the value is equal with the value from the signal. ",
              "If the value is not equal, it will apply the value from the signal automatically. Apply only for feedbackMode direct."
            ],
            "value": [],
            "name": "signalvaluesynctimeout",
            "default": null
          },
          {
            "documentation": [
              "`onclean` attribute",
              "***",
              "Runs when a clean event is initiated."
            ],
            "value": [],
            "name": "onclean",
            "default": null
          },
          {
            "documentation": [
              "`ondirty` attribute",
              "***",
              "Runs when a dirty event is initiated."
            ],
            "value": [],
            "name": "ondirty",
            "default": null
          },
          {
            "documentation": [
              "`mask` attribute",
              "***",
              "The background pattern that will be present when the input is focused. ",
              "The following combination of prebuilt definitions are permitted: ",
              "a - alpha caracter ",
              "9 - numeric character ",
              "* - alphanumeric character"
            ],
            "value": [],
            "name": "mask",
            "default": null
          },
          {
            "documentation": [
              "`icon` attribute",
              "***",
              "The icon to be shown."
            ],
            "value": [],
            "name": "icon",
            "default": null
          },
          {
            "documentation": [
              "`label` attribute",
              "***",
              "Provides the label for the input."
            ],
            "value": [],
            "name": "label",
            "default": null
          },
          {
            "documentation": [
              "`placeholder` attribute",
              "***",
              "Provides the placeholder for the input. This shares the default behavior of the input HMTL element."
            ],
            "value": [],
            "name": "placeholder",
            "default": null
          },
          {
            "documentation": [
              "`iconposition` attribute",
              "***",
              "Valid values: 'first' and 'last'. The default value is 'first'. ",
              "If the direction attribute is 'ltr', as will be typical in locales with a left-to-right language ",
              "direction, 'first' is equivalent to the icon being placed on the left and the text on the ",
              "right. ",
              "Conversely, if the direction attribute is 'rtl', first' would place the icon on the ",
              "right and the label to its left. The Value of 'last' is ",
              "the opposite of 'first'."
            ],
            "value": [
              "first",
              "last"
            ],
            "name": "iconposition",
            "default": "first"
          },
          {
            "documentation": [
              "`type` attribute",
              "***",
              "The type of the input."
            ],
            "value": [
              "text",
              "number",
              "email"
            ],
            "name": "type",
            "default": null
          },
          {
            "documentation": [
              "`minlength` attribute",
              "***",
              "Applicable only in feedbackmode='submit'. The minimum length of the attribute."
            ],
            "value": [],
            "name": "minlength",
            "default": null
          },
          {
            "documentation": [
              "`maxlength` attribute",
              "***",
              "Applicable only in feedbackmode='submit'. The maximum length of the attribute"
            ],
            "value": [],
            "name": "maxlength",
            "default": null
          },
          {
            "documentation": [
              "`minvalue` attribute",
              "***",
              "Applicable only for type=numeric and feedbackmode='submit'. ",
              "The field will result in an error if the value supplied by user is less than value of the attribute."
            ],
            "value": [],
            "name": "minvalue",
            "default": null
          },
          {
            "documentation": [
              "`maxvalue` attribute",
              "***",
              "Applicable only for type=numeric and feedbackmode='submit'. ",
              "The field will result in an error if the value supplied by user is greater than value of ",
              "the attribute."
            ],
            "value": [],
            "name": "maxvalue",
            "default": null
          },
          {
            "documentation": [
              "`size` attribute",
              "***",
              "Sets the relative size of this component."
            ],
            "value": [
              "regular",
              "x-small",
              "small",
              "large",
              "x-large"
            ],
            "name": "size",
            "default": null
          },
          {
            "documentation": [
              "`stretch` attribute",
              "***",
              "The default value is 'fixed'. Valid values: 'fixed', 'width', and 'content'.",
              "Sets the width of the input.",
              "***",
              "Fixed - fixed position (from CSS classes) ",
              "Width - Width of the parent content ",
              "Content - Width will be equal to the content width"
            ],
            "value": [
              "fixed",
              "width",
              "content"
            ],
            "name": "stretch",
            "default": "fixed"
          },
          {
            "documentation": [
              "`text-transform` attribute",
              "***",
              "Only used for type=text. The default value is 'none'. ",
              "Valid values: ",
              "'capitalize' – Makes all first characters of each word uppercase ",
              "'uppercase' – Makes all characters uppercase ",
              "'lowercase' – Makes all characters lowercase ",
              "'none' – Does not change the input"
            ],
            "value": [
              "none",
              "capitalize",
              "uppercase",
              "lowercase"
            ],
            "name": "text-transform",
            "default": null
          },
          {
            "documentation": [
              "`scaling` attribute",
              "***",
              "Scales the input font size when it reaches the edge."
            ],
            "value": [
              "false",
              "true"
            ],
            "name": "scaling",
            "default": null
          },
          {
            "documentation": [
              "`receivestatefocus` attribute",
              "***",
              "When focused, send true. When unfocusesd, send false."
            ],
            "value": [],
            "name": "receivestatefocus",
            "default": null
          },
          {
            "documentation": [
              "`receivestatevalue` attribute",
              "***",
              "When recevied, changes the value of the text input field."
            ],
            "value": [],
            "name": "receivestatevalue",
            "default": null
          },
          {
            "documentation": [
              "`sendeventonchange` attribute",
              "***",
              "Sends an event on value change."
            ],
            "value": [],
            "name": "sendeventonchange",
            "default": null
          },
          {
            "documentation": [
              "`sendeventonfocus` attribute",
              "***",
              "Sends an event on focus."
            ],
            "value": [],
            "name": "sendeventonfocus",
            "default": null
          },
          {
            "documentation": [
              "`sendeventonblur` attribute",
              "***",
              "Sends an event on blur."
            ],
            "value": [],
            "name": "sendeventonblur",
            "default": null
          },
          {
            "documentation": [
              "`onvaliditychange` attribute",
              "***",
              "Runs when the validity state of a input has been changed."
            ],
            "value": [],
            "name": "onvaliditychange",
            "default": null
          },
          {
            "documentation": [
              "`value` attribute",
              "***",
              "The value attribute specifies the value of an input element."
            ],
            "value": [],
            "name": "value",
            "default": null
          },
          {
            "documentation": [
              "`minimumfontsize` attribute",
              "***",
              "The minimum font size is applied when the input text exceeds the width of the input text box. ",
              "This will work only if a scaling attribute is set."
            ],
            "value": [],
            "name": "minimumfontsize",
            "default": null
          },
          {
            "documentation": [
              "`tabIndex` attribute",
              "***",
              "The tabIndex global attribute indicates that its element ",
              "can be focused and indicates where it places in sequential ",
              "keyboard navigation."
            ],
            "value": [],
            "name": "tabindex",
            "default": null
          }
        ],
        "documentation": [
          "`ch5-textinput` attribute",
          "***",
          "The TextEntry component allows the user to enter textual input. This is an extension of the ",
          "input HTML element."
        ],
        "snippets": [
          {
            "prefix": "ch5-textinput:blank",
            "description": "Crestron Textinput (Blank)",
            "body": [
              "<ch5-textinput>",
              "</ch5-textinput>$0"
            ]
          },
          {
            "prefix": "ch5-textinput:default",
            "description": "Crestron Textinput (Default)",
            "body": [
              "<ch5-textinput",
              "     type=\"${1|text,number,month,week,email|}\">",
              "</ch5-textinput>$0"
            ]
          },
          {
            "prefix": "ch5-textinput:phone",
            "description": "Crestron Textinput phone mask attribute",
            "body": [
              "<ch5-textinput",
              "    label=\"${1:Phone number:}\"",
              "    icon=\"${2:fa fa-phone}\"",
              "    size=\"${3:x-large}\"",
              "    placeholder=\"${4:Phone Number}\"",
              "    mask=\"${5:(+99) 999 999 999}\"",
              "    id=\"${7:phoneNumber}\">",
              "</ch5-textinput>"
            ]
          },
          {
            "prefix": "ch5-textinput:signals",
            "description": "Crestron Textinput phone mask attribute",
            "body": [
              "<ch5-textinput",
              "    label=\"${1:Phone number:}\"",
              "    icon=\"${2:fa fa-phone}\"",
              "    size=\"${3:x-large}\"",
              "    placeholder=\"${4:Phone Number}\"",
              "    mask=\"${5:(+99) 999 999 999}\"",
              "    id=\"${7:phoneNumber}\"",
              "    sendeventonchange=\"${8:input_changed}\"",
              "    sendeventonfocus=\"${9:input_focus}\"",
              "    sendeventonblur=\"${10:input_blur}\">",
              "</ch5-textinput>"
            ]
          }
        ],
        "description": "Ch5 Textinput inherits the default html input behavior, but also provides extra features.",
        "name": "Ch5 Textinput",
        "tagName": "ch5-textinput",
        "role": "input",
        "componentVersion": "1.0.0"
      }
    ]
  }
}